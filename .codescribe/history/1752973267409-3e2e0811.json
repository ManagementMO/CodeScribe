{
  "id": "1752973267409-3e2e0811",
  "timestamp": "2025-07-20T01:01:07.414Z",
  "command": "default",
  "options": {},
  "context": {
    "git": {
      "branch": "feat/COD-20-warp-test",
      "diff": "diff --git a/.codescribe.example.json b/.codescribe.example.json\nnew file mode 100644\nindex 0000000..ef0da30\n--- /dev/null\n+++ b/.codescribe.example.json\n@@ -0,0 +1,44 @@\n+{\n+  \"workflows\": {\n+    \"github\": {\n+      \"enabled\": true,\n+      \"createDraft\": true,\n+      \"autoAssignReviewers\": false,\n+      \"templates\": \"default\"\n+    },\n+    \"linear\": {\n+      \"enabled\": true,\n+      \"autoTransition\": true,\n+      \"addComments\": true,\n+      \"trackTime\": false\n+    },\n+    \"documentation\": {\n+      \"enabled\": false,\n+      \"formats\": [\"mermaid\", \"markdown\"],\n+      \"autoGenerate\": false\n+    },\n+    \"quality\": {\n+      \"enabled\": false,\n+      \"thresholds\": {\n+        \"complexity\": 10,\n+        \"maintainability\": 70\n+      }\n+    }\n+  },\n+  \"ai\": {\n+    \"provider\": \"gemini\",\n+    \"model\": \"gemini-1.5-flash\",\n+    \"maxRetries\": 3,\n+    \"fallback\": true\n+  },\n+  \"git\": {\n+    \"autoPush\": true,\n+    \"defaultBranch\": \"main\",\n+    \"conventionalCommits\": true\n+  },\n+  \"logging\": {\n+    \"level\": \"info\",\n+    \"file\": false,\n+    \"console\": true\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/.kiro/specs/enhanced-codescribe-workflows/design.md b/.kiro/specs/enhanced-codescribe-workflows/design.md\nnew file mode 100644\nindex 0000000..c5de959\n--- /dev/null\n+++ b/.kiro/specs/enhanced-codescribe-workflows/design.md\n@@ -0,0 +1,370 @@\n+# Enhanced CodeScribe Workflows Design Document\n+\n+## Overview\n+\n+The enhanced CodeScribe system will transform the current single-purpose PR creation tool into a comprehensive workflow orchestration platform for professional software engineers. The system will maintain its current core functionality while adding modular workflow engines for GitHub automation, visual documentation generation, enhanced Linear integration, and code quality management.\n+\n+## Architecture\n+\n+### High-Level Architecture\n+\n+```mermaid\n+graph TB\n+    CLI[CodeScribe CLI] --> Core[Core Engine]\n+    Core --> Context[Context Analyzer]\n+    Core --> Workflow[Workflow Orchestrator]\n+    \n+    Context --> Git[Git Context]\n+    Context --> Code[Code Analyzer]\n+    Context --> Project[Project Context]\n+    \n+    Workflow --> GitHub[GitHub Workflows]\n+    Workflow --> Linear[Linear Workflows]\n+    Workflow --> Docs[Documentation Generator]\n+    Workflow --> Quality[Code Quality Engine]\n+    \n+    GitHub --> GH_API[GitHub API]\n+    Linear --> LIN_API[Linear API]\n+    Docs --> Mermaid[Mermaid Generator]\n+    Quality --> AI[AI Analysis Engine]\n+```\n+\n+### Core Components\n+\n+1. **Core Engine**: Central orchestrator that manages workflow execution and coordinates between components\n+2. **Context Analyzer**: Enhanced version of current context gathering with deeper code analysis\n+3. **Workflow Orchestrator**: Plugin-based system for managing different workflow types\n+4. **AI Analysis Engine**: Enhanced AI integration with multiple models and specialized prompts (using Gemini 2.5 pro with the already set up API setup)\n+5. **Configuration Manager**: Handles user preferences, project settings, and workflow configurations\n+\n+## Components and Interfaces\n+\n+### Core Engine Interface\n+\n+```javascript\n+class CodeScribeCore {\n+    constructor(config) {\n+        this.config = config;\n+        this.contextAnalyzer = new ContextAnalyzer();\n+        this.workflowOrchestrator = new WorkflowOrchestrator();\n+        this.aiEngine = new AIAnalysisEngine();\n+    }\n+    \n+    async execute(command, options) {\n+        const context = await this.contextAnalyzer.gather();\n+        const workflows = this.workflowOrchestrator.selectWorkflows(command, context);\n+        return await this.workflowOrchestrator.execute(workflows, context, options);\n+    }\n+}\n+```\n+\n+### Context Analyzer Interface\n+\n+```javascript\n+class ContextAnalyzer {\n+    async gather() {\n+        return {\n+            git: await this.gatherGitContext(),\n+            code: await this.analyzeCodeChanges(),\n+            project: await this.analyzeProjectStructure(),\n+            dependencies: await this.analyzeDependencies(),\n+            tests: await this.analyzeTestCoverage(),\n+            performance: await this.analyzePerformanceMetrics()\n+        };\n+    }\n+    \n+    async analyzeCodeChanges() {\n+        // Enhanced code analysis with AST parsing, complexity metrics, security scanning\n+    }\n+}\n+```\n+\n+### Workflow Orchestrator Interface\n+\n+```javascript\n+class WorkflowOrchestrator {\n+    constructor() {\n+        this.workflows = new Map();\n+        this.registerDefaultWorkflows();\n+    }\n+    \n+    registerWorkflow(name, workflow) {\n+        this.workflows.set(name, workflow);\n+    }\n+    \n+    selectWorkflows(command, context) {\n+        // Intelligent workflow selection based on context and command\n+    }\n+    \n+    async execute(workflows, context, options) {\n+        // Parallel and sequential workflow execution with dependency management\n+    }\n+}\n+```\n+\n+### GitHub Workflows Engine\n+\n+```javascript\n+class GitHubWorkflows {\n+    async createPR(context, options) {\n+        // Enhanced PR creation with templates, reviewers, labels\n+    }\n+    \n+    async manageIssues(context) {\n+        // Automatic issue creation from code analysis\n+    }\n+    \n+    async manageBranches(context) {\n+        // Branch cleanup, protection rules, merge strategies\n+    }\n+    \n+    async generateReleaseNotes(context) {\n+        // Automated release note generation from commits and PRs\n+    }\n+}\n+```\n+\n+### Linear Workflows Engine\n+\n+```javascript\n+class LinearWorkflows {\n+    async updateTicketStatus(ticketId, status, context) {\n+        // Enhanced ticket management with time tracking\n+    }\n+    \n+    async createSubTickets(parentTicket, tasks) {\n+        // Automatic sub-ticket creation from code analysis\n+    }\n+    \n+    async generateProjectReports(projectId) {\n+        // Automated project status reports\n+    }\n+    \n+    async manageBlockers(ticketId, blockers) {\n+        // Blocker detection and management\n+    }\n+}\n+```\n+\n+### Documentation Generator\n+\n+```javascript\n+class DocumentationGenerator {\n+    async generateMermaidDiagrams(codeContext) {\n+        // Generate flowcharts, sequence diagrams, architecture diagrams\n+    }\n+    \n+    async generateAPIDocumentation(apiChanges) {\n+        // Generate OpenAPI specs and API documentation\n+    }\n+    \n+    async generateADRs(architecturalChanges) {\n+        // Generate Architecture Decision Records\n+    }\n+    \n+    async generateOnboardingDocs(projectContext) {\n+        // Generate team onboarding documentation\n+    }\n+}\n+```\n+\n+## Data Models\n+\n+### Context Model\n+\n+```javascript\n+const ContextSchema = {\n+    git: {\n+        branch: String,\n+        commits: Array,\n+        diff: String,\n+        remoteUrl: String,\n+        status: Object\n+    },\n+    code: {\n+        changes: Array,\n+        complexity: Object,\n+        security: Object,\n+        dependencies: Array,\n+        testCoverage: Object\n+    },\n+    project: {\n+        structure: Object,\n+        configuration: Object,\n+        metadata: Object\n+    },\n+    linear: {\n+        ticketId: String,\n+        ticketData: Object,\n+        projectData: Object\n+    }\n+};\n+```\n+\n+### Workflow Configuration Model\n+\n+```javascript\n+const WorkflowConfigSchema = {\n+    name: String,\n+    triggers: Array,\n+    conditions: Array,\n+    actions: Array,\n+    dependencies: Array,\n+    parallel: Boolean,\n+    retryPolicy: Object,\n+    notifications: Array\n+};\n+```\n+\n+### AI Analysis Model\n+\n+```javascript\n+const AIAnalysisSchema = {\n+    codeQuality: {\n+        complexity: Number,\n+        maintainability: Number,\n+        testability: Number,\n+        suggestions: Array\n+    },\n+    security: {\n+        vulnerabilities: Array,\n+        recommendations: Array\n+    },\n+    performance: {\n+        bottlenecks: Array,\n+        optimizations: Array\n+    },\n+    documentation: {\n+        missing: Array,\n+        outdated: Array,\n+        suggestions: Array\n+    }\n+};\n+```\n+\n+## Error Handling\n+\n+### Error Categories\n+\n+1. **API Errors**: GitHub, Linear, AI service failures with retry logic\n+2. **Git Errors**: Repository state issues, merge conflicts, permission errors\n+3. **Configuration Errors**: Missing credentials, invalid settings\n+4. **Analysis Errors**: Code parsing failures, dependency resolution issues\n+5. **Workflow Errors**: Execution failures, dependency conflicts\n+\n+### Error Recovery Strategies\n+\n+```javascript\n+class ErrorHandler {\n+    async handleAPIError(error, context) {\n+        if (error.isRetryable()) {\n+            return await this.retryWithBackoff(error.operation, context);\n+        }\n+        return await this.fallbackStrategy(error, context);\n+    }\n+    \n+    async handleGitError(error, context) {\n+        // Git-specific error recovery (stash, reset, conflict resolution)\n+    }\n+    \n+    async handleWorkflowError(error, workflow, context) {\n+        // Workflow rollback and partial completion handling\n+    }\n+}\n+```\n+\n+## Testing Strategy\n+\n+### Unit Testing\n+\n+- **Component Testing**: Each workflow engine, context analyzer, and AI integration\n+- **Mock Services**: GitHub API, Linear API, AI services for isolated testing\n+- **Configuration Testing**: Various project configurations and edge cases\n+\n+### Integration Testing\n+\n+- **End-to-End Workflows**: Complete workflow execution from CLI to service updates\n+- **API Integration**: Real API calls with test repositories and projects\n+- **Cross-Platform Testing**: Windows, macOS, Linux compatibility\n+\n+### Performance Testing\n+\n+- **Large Repository Handling**: Performance with large codebases and diffs\n+- **Concurrent Workflow Execution**: Multiple workflows running simultaneously\n+- **AI Service Load Testing**: Handling AI service rate limits and failures\n+\n+### Test Structure\n+\n+```javascript\n+describe('Enhanced CodeScribe Workflows', () => {\n+    describe('Core Engine', () => {\n+        it('should orchestrate multiple workflows correctly');\n+        it('should handle workflow dependencies');\n+        it('should recover from partial failures');\n+    });\n+    \n+    describe('GitHub Workflows', () => {\n+        it('should create PRs with enhanced metadata');\n+        it('should manage issues automatically');\n+        it('should handle branch operations');\n+    });\n+    \n+    describe('Linear Integration', () => {\n+        it('should update tickets with detailed context');\n+        it('should create sub-tickets from analysis');\n+        it('should track time and progress');\n+    });\n+    \n+    describe('Documentation Generation', () => {\n+        it('should generate accurate Mermaid diagrams');\n+        it('should create comprehensive API docs');\n+        it('should produce helpful ADRs');\n+    });\n+});\n+```\n+\n+## Configuration and Extensibility\n+\n+### Plugin Architecture\n+\n+The system will support custom workflows through a plugin system:\n+\n+```javascript\n+class CustomWorkflow extends BaseWorkflow {\n+    constructor(config) {\n+        super(config);\n+        this.name = 'custom-workflow';\n+        this.triggers = ['custom-trigger'];\n+    }\n+    \n+    async execute(context, options) {\n+        // Custom workflow implementation\n+    }\n+}\n+\n+// Registration\n+codescribe.registerWorkflow(new CustomWorkflow(config));\n+```\n+\n+### Configuration Management\n+\n+```javascript\n+const defaultConfig = {\n+    workflows: {\n+        github: { enabled: true, templates: 'default' },\n+        linear: { enabled: true, autoTransition: true },\n+        documentation: { enabled: true, formats: ['mermaid', 'markdown'] },\n+        quality: { enabled: true, thresholds: { complexity: 10 } }\n+    },\n+    ai: {\n+        provider: 'gemini',\n+        model: 'gemini-1.5-flash',\n+        fallback: 'gpt-3.5-turbo'\n+    },\n+    notifications: {\n+        slack: { enabled: false },\n+        email: { enabled: false },\n+        teams: { enabled: false }\n+    }\n+};\n+```\n\\ No newline at end of file\ndiff --git a/.kiro/specs/enhanced-codescribe-workflows/requirements.md b/.kiro/specs/enhanced-codescribe-workflows/requirements.md\nnew file mode 100644\nindex 0000000..9e850da\n--- /dev/null\n+++ b/.kiro/specs/enhanced-codescribe-workflows/requirements.md\n@@ -0,0 +1,61 @@\n+# Requirements Document\n+\n+## Introduction\n+\n+This feature enhances the existing CodeScribe agent to become a comprehensive workflow orchestration tool for professional software engineers. The enhanced system will expand beyond basic PR creation and Linear updates to include advanced GitHub workflows, intelligent code analysis, visual documentation generation, enhanced Linear integration, and automated development lifecycle management.\n+\n+## Requirements\n+\n+### Requirement 1\n+\n+**User Story:** As a software engineer, I want CodeScribe to intelligently analyze my code changes and suggest appropriate commit messages, PR templates, and workflow actions, so that I can maintain consistent and professional development practices.\n+\n+#### Acceptance Criteria\n+\n+1. WHEN a user runs CodeScribe THEN the system SHALL analyze git diff content and suggest conventional commit messages\n+2. WHEN code changes include breaking changes THEN the system SHALL automatically flag them and suggest appropriate versioning\n+3. WHEN code changes include new dependencies THEN the system SHALL analyze security implications and suggest review requirements\n+4. IF code changes affect multiple modules THEN the system SHALL suggest splitting into multiple PRs\n+5. I want the ability/command to possibly undo/cancel Pull Requests if I don't like them upon further review. (revert back), (and change Linear Status Accordingly)\n+\n+### Requirement 2\n+\n+**User Story:** As a software engineer, I want CodeScribe to automate common GitHub workflows like issue creation, branch management, and release preparation, so that I can focus on coding rather than administrative tasks.\n+\n+#### Acceptance Criteria\n+\n+1. WHEN CodeScribe detects bug patterns in code THEN the system SHALL automatically create GitHub issues with detailed descriptions\n+2. WHEN a feature branch is complete THEN the system SHALL offer to create release notes and version tags\n+3. WHEN merge conflicts are detected THEN the system SHALL provide intelligent resolution suggestions\n+4. IF a PR has been approved THEN the system SHALL offer to automatically merge and clean up branches\n+\n+### Requirement 3\n+\n+**User Story:** As a software engineer, I want CodeScribe to generate visual documentation like flowcharts and architecture diagrams from my code, so that I can maintain up-to-date project documentation automatically.\n+\n+#### Acceptance Criteria\n+\n+1. WHEN CodeScribe analyzes code changes THEN the system SHALL generate Mermaid diagrams for new functions or classes\n+2. WHEN system architecture changes are detected THEN the system SHALL update existing architecture diagrams\n+3. WHEN API endpoints are modified THEN the system SHALL generate updated API flow diagrams\n+4. IF database schema changes are detected THEN the system SHALL create entity relationship diagrams\n+\n+### Requirement 4\n+\n+**User Story:** As a software engineer, I want enhanced Linear integration that can manage ticket workflows, time tracking, and project planning, so that I can keep stakeholders informed without manual updates.\n+\n+#### Acceptance Criteria\n+\n+1. WHEN work begins on a ticket THEN the system SHALL automatically transition ticket status and start time tracking\n+2. WHEN code review feedback is received THEN the system SHALL update Linear with review status and estimated completion time\n+3. WHEN blockers are detected in code THEN the system SHALL create sub-tickets and notify relevant team members\n+4. IF a ticket scope changes significantly THEN the system SHALL suggest ticket splitting and stakeholder notification\n+\n+### Requirement 5\n+\n+**User Story:** As a software engineer, I want CodeScribe to help with code quality and technical debt management, so that I can maintain high code standards and address issues proactively.\n+\n+#### Acceptance Criteria\n+\n+1. WHEN CodeScribe analyzes code THEN the system SHALL identify potential technical debt and suggest refactoring opportunities\n+2. WHEN code complexity exceeds thresholds THEN the system SHALL suggest breaking down functions or classes\n\\ No newline at end of file\ndiff --git a/.kiro/specs/enhanced-codescribe-workflows/tasks.md b/.kiro/specs/enhanced-codescribe-workflows/tasks.md\nnew file mode 100644\nindex 0000000..85a42f3\n--- /dev/null\n+++ b/.kiro/specs/enhanced-codescribe-workflows/tasks.md\n@@ -0,0 +1,250 @@\n+# Implementation Plan\n+\n+- [x] 1. Refactor existing codebase into modular architecture\n+\n+\n+\n+\n+\n+  - Extract current functionality into separate modules following the new architecture\n+  - Create base classes and interfaces for the plugin system\n+  - Implement configuration management system with default settings\n+  - _Requirements: 1.1, 1.2, 1.3, 1.4_\n+\n+- [x] 2. Implement enhanced context analyzer\n+\n+\n+\n+\n+\n+- [x] 2.1 Create advanced git context gathering\n+\n+\n+  - Extend current git analysis to include branch history, merge base analysis, and conflict detection\n+  - Add commit message analysis and conventional commit validation\n+  - Implement branch naming convention validation.\n+  - _Requirements: 1.1, 1.2_\n+\n+- [x] 2.2 Build comprehensive code analysis engine\n+\n+\n+  - Implement AST parsing for JavaScript/TypeScript to analyze code structure and complexity\n+  - Add dependency analysis to detect new, updated, or removed dependencies\n+  - Create security vulnerability scanning using known vulnerability databases\n+  - _Requirements: 1.3, 5.1, 5.3_\n+\n+- [x] 2.3 Implement project structure analysis\n+\n+\n+  - Analyze project configuration files (package.json, tsconfig.json, etc.)\n+  - Detect project type and framework to customize workflow suggestions\n+  - Implement test coverage analysis and reporting\n+  - _Requirements: 5.4, 2.1_\n+\n+\n+\n+- [x] 3.  Implement the ability to commit well on your own branch of course through a script or command here for the user using this tool to make workflows easier, cleaner and more well done. This all needs to be effectively tracked obviously in Github and in Linear properly for pushes and changes to the repository (on any branch)\n+\n+\n+\n+- [x] 3.1 Can you also remove anything related to grep as it errored out please ('grep' is not recognized as an internal or external command, operable program or batch file.)\n+\n+\n+\n+\n+- [ ] 4. Enhance CodeScribe workflows with comprehensive tracking and detailed reporting\n+- [ ] 4.1 Implement enhanced commit message generation with detailed context\n+  - Create AI-powered commit message generation that includes design decisions and rationale\n+  - Add code change impact analysis to commit messages (performance, security, maintainability)\n+  - Implement commit message templates for different change types (feature, bugfix, refactor, etc.)\n+  - Generate commit messages that explain the \"why\" behind changes, not just the \"what\"\n+  - _Requirements: 1.1, 1.2, 2.1, 2.2_\n+\n+- [ ] 4.2 Build comprehensive GitHub tracking and reporting system\n+  - Create detailed PR descriptions with architectural decisions and trade-offs\n+  - Implement automatic code review context generation for reviewers\n+  - Add impact analysis reports for each PR (affected systems, potential risks, testing strategy)\n+  - Generate technical documentation updates as part of PR creation\n+  - Create automated PR status updates with development progress and blockers\n+  - _Requirements: 1.1, 2.1, 2.2, 3.1_\n+\n+- [ ] 4.3 Enhance Linear integration with detailed work tracking\n+  - Implement comprehensive work log generation for Linear tickets\n+  - Add detailed progress updates with time estimates and completion percentages\n+  - Create technical decision documentation directly in Linear comments\n+  - Generate work breakdown structures for complex features\n+  - Implement automatic ticket updates with code quality metrics and technical debt analysis\n+  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n+\n+- [ ] 4.4 Create intelligent push and deployment tracking\n+  - Implement pre-push validation with comprehensive code analysis reports\n+  - Add deployment impact analysis and risk assessment\n+  - Create automated rollback plans and deployment documentation\n+  - Generate post-deployment monitoring and validation checklists\n+  - Implement cross-platform deployment tracking with environment-specific considerations\n+  - _Requirements: 2.1, 2.2, 2.3, 2.4_\n+\n+- [ ] 4.5 Build advanced workflow orchestration with decision logging\n+  - Create workflow execution logs with detailed decision trees and reasoning\n+  - Implement workflow performance analytics and optimization suggestions\n+  - Add workflow customization based on project patterns and team preferences\n+  - Generate workflow execution reports for team retrospectives and process improvement\n+  - Create workflow templates for different project types and development methodologies\n+  - _Requirements: 1.1, 1.2, 1.3, 1.4_\n+\n+- [ ] 4.6 Implement comprehensive change documentation system\n+  - Create automatic architecture decision records (ADRs) for significant changes\n+  - Generate migration guides and breaking change documentation\n+  - Implement code change impact visualization with dependency graphs\n+  - Add technical debt tracking and remediation planning\n+  - Create knowledge base updates with searchable technical documentation\n+  - _Requirements: 3.1, 3.2, 3.3, 6.1_\n+\n+- [ ] 4.7 Build intelligent notification and communication system\n+  - Create context-aware notifications for stakeholders based on change impact\n+  - Implement smart escalation for high-risk changes or blocked work\n+  - Add team communication templates for different types of updates\n+  - Generate executive summaries for management visibility\n+  - Create automated status reports for project stakeholders\n+  - _Requirements: 4.2, 4.4, 6.2, 6.4_\n+\n+- [ ] 4.8 Enhance cross-platform workflow reliability\n+  - Implement robust error handling and recovery mechanisms for all workflows\n+  - Add comprehensive logging and debugging capabilities\n+  - Create workflow validation and testing frameworks\n+  - Implement graceful degradation when external services are unavailable\n+  - Add workflow performance monitoring and optimization\n+  - _Requirements: 1.3, 1.4, 2.3, 2.4_\n+\n+- [ ] 5. Create workflow orchestrator foundation\n+- [ ] 5.1 Build base workflow system\n+  - Create BaseWorkflow abstract class with common functionality\n+  - Implement WorkflowOrchestrator class with plugin registration and execution\n+  - Add workflow dependency management and execution ordering\n+  - _Requirements: 2.1, 2.2, 2.3, 2.4_\n+\n+- [ ] 5.2 Implement workflow selection logic\n+  - Create intelligent workflow selection based on code changes and context\n+  - Add user preference integration for workflow customization\n+  - Implement conditional workflow execution based on project configuration\n+  - _Requirements: 1.1, 1.4_\n+\n+- [ ] 6. Enhance GitHub integration workflows\n+- [ ] 6.1 Extend PR creation with advanced features\n+  - Add PR template selection based on change type and project configuration\n+  - Implement automatic reviewer assignment based on code ownership and expertise\n+  - Add automatic label assignment based on code analysis results\n+  - _Requirements: 1.1, 2.1, 2.2_\n+\n+- [ ] 6.2 Implement automated issue management\n+  - Create GitHub issues automatically when bugs or technical debt are detected\n+  - Add issue templates for different types of problems (bugs, security, performance)\n+  - Implement issue linking to related PRs and commits\n+  - _Requirements: 2.1, 5.1, 5.3_\n+\n+- [ ] 6.3 Build branch management automation\n+  - Implement automatic branch cleanup after PR merge\n+  - Add branch protection rule management and validation\n+  - Create merge strategy recommendations based on change type\n+  - _Requirements: 2.2, 2.4_\n+\n+- [ ] 6.4 Create release management workflows\n+  - Implement automatic release note generation from commits and PRs\n+  - Add semantic versioning suggestions based on change analysis\n+  - Create changelog generation and maintenance\n+  - _Requirements: 2.2, 1.2_\n+\n+- [ ] 7. Enhance Linear integration workflows\n+- [ ] 7.1 Implement advanced ticket management\n+  - Add automatic ticket status transitions based on development progress\n+  - Implement time tracking integration with development activities\n+  - Create ticket scope change detection and notification system\n+  - _Requirements: 4.1, 4.2, 4.4_\n+\n+- [ ] 7.2 Build sub-ticket creation system\n+  - Automatically create sub-tickets when complex changes are detected\n+  - Add task breakdown suggestions based on code analysis\n+  - Implement blocker detection and automatic sub-ticket creation\n+  - _Requirements: 4.3, 4.4_\n+\n+- [ ] 7.3 Create team communication enhancements\n+  - Add stakeholder notification system for significant changes\n+  - Implement project status reporting automation\n+  - Create team member assignment suggestions based on expertise\n+  - _Requirements: 4.2, 4.4, 6.2, 6.4_\n+\n+- [ ] 8. Implement documentation generation system\n+- [ ] 8.1 Create Mermaid diagram generator\n+  - Build flowchart generation from function and class analysis\n+  - Implement sequence diagram creation for API interactions\n+  - Add architecture diagram generation from project structure analysis\n+  - _Requirements: 3.1, 3.2, 3.3_\n+\n+- [ ] 8.2 Build API documentation automation\n+  - Generate OpenAPI specifications from code analysis\n+  - Create API endpoint documentation from route analysis\n+  - Implement API change detection and documentation updates\n+  - _Requirements: 3.3_\n+\n+- [ ] 8.3 Implement ADR generation system\n+  - Create Architecture Decision Record templates from significant changes\n+  - Add decision context analysis and recommendation generation\n+  - Implement ADR linking and cross-referencing system\n+  - _Requirements: 6.1_\n+\n+- [ ] 8.4 Create knowledge sharing documentation\n+  - Generate onboarding documentation from recent project changes\n+  - Create technical blog post drafts for complex implementations\n+  - Implement migration guide generation for breaking changes\n+  - _Requirements: 6.2, 6.3, 6.4_\n+\n+- [ ] 9. Build code quality management system\n+- [ ] 9.1 Implement technical debt detection\n+  - Create code complexity analysis and threshold monitoring\n+  - Add technical debt scoring and prioritization system\n+  - Implement refactoring opportunity identification and suggestions\n+  - _Requirements: 5.1, 5.2_\n+\n+- [ ] 9.2 Create security analysis integration\n+  - Implement vulnerability scanning and reporting\n+  - Add security best practice validation\n+  - Create security issue prioritization and ticket creation\n+  - _Requirements: 5.3, 1.3_\n+\n+- [ ] 9.3 Build test coverage monitoring\n+  - Implement test coverage analysis and reporting\n+  - Add test case suggestion generation based on code changes\n+  - Create test quality assessment and improvement recommendations\n+  - _Requirements: 5.4_\n+\n+- [ ] 9.4 Build specialized AI prompts\n+  - Create task-specific prompts for different types of analysis\n+  - Implement prompt optimization based on code context\n+  - Add AI response validation and quality scoring\n+  - _Requirements: 1.1, 3.1, 5.1_\n+\n+- [ ] 10. Create comprehensive CLI interface\n+- [ ] 10.1 Build enhanced command structure\n+  - Implement subcommands for different workflow types\n+  - Add interactive mode for guided workflow execution\n+  - Create help system with context-aware suggestions\n+  - _Requirements: 1.1, 2.1, 2.2, 2.3, 2.4_\n+\n+- [ ] 10.2 Implement progress reporting and logging\n+  - Add detailed progress reporting for long-running workflows\n+  - Create comprehensive logging system with different verbosity levels\n+  - Implement workflow execution history and replay functionality\n+  - _Requirements: 1.1, 1.2, 1.3, 1.4_\n+\n+- [ ] 11. Create documentation and examples\n+- [ ] 11.1 Write comprehensive user documentation\n+  - Create getting started guide with common workflow examples\n+  - Add configuration reference documentation\n+  - Implement plugin development guide with examples\n+  - _Requirements: All requirements_\n+\n+- [ ] 11.2 Build example configurations and workflows\n+  - Create example configurations for different project types\n+  - Add sample custom workflows for common use cases\n+  - Implement demo repository with full workflow examples\n+  - _Requirements: All requirements_\n\\ No newline at end of file\ndiff --git a/README.md b/README.md\nindex b896429..f7335ad 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,24 +1,130 @@\n-# Warp Linear Agent\n+# CodeScribe - Enhanced Workflow Orchestration Tool\n \n-A CodeScribe agent that automates PR creation and Linear ticket updates.\n+A comprehensive workflow orchestration platform for professional software engineers that automates GitHub operations, Linear ticket management, and intelligent commit creation.\n \n ## Features\n-- Analyzes git diffs with AI\n-- Creates draft PRs automatically\n-- Updates Linear tickets\n \n-## Usage\n+### Core Workflows\n+- **Intelligent Commit Creation**: Auto-generates conventional commit messages with GitHub and Linear tracking\n+- **GitHub Integration**: Automated PR creation, issue management, and branch operations\n+- **Linear Integration**: Ticket updates, progress tracking, and team communication\n+- **AI-Powered Analysis**: Code analysis, security scanning, and quality assessment\n \n-1. Stage your changes: `git add .`\n-2. Run the agent: `node run-agent.js`\n-3. Check your PR and Linear ticket!\n+### Commit Workflow\n+- **Smart Message Generation**: Analyzes code changes to create meaningful commit messages\n+- **Conventional Commits**: Follows industry-standard commit message format\n+- **Cross-Platform**: Works on Windows, macOS, and Linux\n+- **Flexible Staging**: Multiple options for staging files\n+- **Automatic Tracking**: Updates GitHub and Linear with commit information\n \n-## Technology & Tools \n-- Linear \n-- Gemini API\n-- Warp\n-- JavaScript \n+## Quick Start\n \n-ggvvgvvgs\n-## New Feature\n-## Final Testing\n+### Installation\n+```bash\n+npm install\n+```\n+\n+### Environment Setup\n+Create a `.env` file with your API keys:\n+```env\n+GITHUB_TOKEN=your_github_token\n+LINEAR_API_KEY=your_linear_api_key\n+GEMINI_API_KEY=your_gemini_api_key\n+```\n+\n+### Basic Usage\n+\n+#### Create Intelligent Commits\n+```bash\n+# Auto-generate commit message and track in GitHub/Linear\n+node codescribe.js commit\n+\n+# Custom commit message\n+node codescribe.js commit -m \"Fix authentication bug\"\n+\n+# Stage all files and commit\n+node codescribe.js commit --all\n+```\n+\n+#### Create/Update Pull Requests\n+```bash\n+# Standard PR workflow\n+node codescribe.js\n+\n+# GitHub operations only\n+node codescribe.js github-only\n+\n+# Linear operations only\n+node codescribe.js linear-only\n+```\n+\n+#### Standalone Commit Tool\n+```bash\n+# Direct commit script\n+node commit.js\n+\n+# With options\n+node commit.js -m \"Add new feature\" --all --no-push\n+```\n+\n+## Commands\n+\n+| Command | Description |\n+|---------|-------------|\n+| `codescribe` | Default PR creation and Linear update workflow |\n+| `codescribe commit` | Intelligent commit with tracking |\n+| `codescribe github-only` | GitHub operations only |\n+| `codescribe linear-only` | Linear operations only |\n+| `node commit.js` | Standalone commit tool |\n+\n+## Commit Options\n+\n+| Option | Short | Description |\n+|--------|-------|-------------|\n+| `--message` | `-m` | Custom commit message |\n+| `--all` | `-a` | Stage all changes |\n+| `--add-modified` | | Stage only modified files |\n+| `--no-push` | | Skip pushing to remote |\n+| `--force` | | Force commit even with no changes |\n+\n+## Documentation\n+\n+- [Commit Workflow Guide](docs/COMMIT_WORKFLOW.md) - Detailed guide for the commit functionality\n+- [Configuration](docs/CONFIGURATION.md) - Configuration options and setup\n+- [API Reference](docs/API.md) - Developer API documentation\n+\n+## Architecture\n+\n+The system uses a modular architecture with:\n+- **Core Engine**: Central orchestrator for workflow execution\n+- **Context Analyzer**: Enhanced code and git analysis\n+- **Workflow Orchestrator**: Plugin-based workflow management\n+- **AI Analysis Engine**: Intelligent code analysis and suggestions\n+\n+## Technology Stack\n+\n+- **Node.js**: Runtime environment\n+- **GitHub API**: Repository and PR management\n+- **Linear API**: Project management integration\n+- **Google Gemini**: AI-powered code analysis\n+- **Git**: Version control integration\n+- **Babel**: Code parsing and AST analysis\n+\n+## Contributing\n+\n+1. Fork the repository\n+2. Create a feature branch: `git checkout -b feature/new-feature`\n+3. Make your changes and commit: `node commit.js -m \"Add new feature\"`\n+4. Push to your branch: `git push origin feature/new-feature`\n+5. Create a Pull Request\n+\n+## License\n+\n+MIT License - see [LICENSE](LICENSE) file for details.\n+\n+## Support\n+\n+For issues and questions:\n+- Create an issue on GitHub\n+- Check the documentation in the `docs/` directory\n+- Review the help commands: `node codescribe.js --help`\ndiff --git a/codescribe.js b/codescribe.js\nindex accda34..ddff89f 100644\n--- a/codescribe.js\n+++ b/codescribe.js\n@@ -2,271 +2,22 @@\n \n require('dotenv').config();\n \n-// Import necessary libraries\n-const { execSync } = require('child_process'); // To run shell commands\n-const axios = require('axios'); // To make HTTP requests to the Linear Agent API\n-const { Octokit } = require('@octokit/rest'); // Official client for the GitHub API\n-const { GoogleGenerativeAI } = require('@google/generative-ai'); // Official client for the Gemini API\n-const chalk = require('chalk'); // A library to add color and style to terminal output\n-\n-// --- Initialize API Clients ---\n-// These objects will be our interface to the external services.\n-const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });\n-const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n+// Import the new modular architecture\n+const CodeScribeCore = require('./src/core/CodeScribeCore');\n+const chalk = require('chalk');\n \n /**\n- * The main function that performs the entire agentic workflow, from gathering\n- * local context to updating cloud services.\n+ * The main function that performs the entire agentic workflow using the new modular architecture\n  */\n-async function runDraftAgent() {\n-    console.log(chalk.cyan.bold('🚀 Starting CodeScribe Agent...'));\n-\n+async function runDraftAgent(command = 'default', options = {}) {\n     try {\n-        // --- 1. Context Gathering: What have I been working on? ---\n-        console.log(chalk.blue('   - Gathering local git context...'));\n-        const branchName = execSync('git rev-parse --abbrev-ref HEAD').toString().trim();\n-\n-        // Check if we have unpushed commits\n-        try {\n-            const unpushedCommits = execSync(`git log origin/${branchName}..HEAD --oneline`).toString().trim();\n-            if (unpushedCommits) {\n-                console.log(chalk.yellow('   - Found unpushed commits, pushing to remote...'));\n-                execSync(`git push origin ${branchName}`);\n-                console.log(chalk.green('   - Pushed latest commits to remote'));\n-            }\n-        } catch (pushError) {\n-            // Branch might not exist on remote yet\n-            console.log(chalk.yellow('   - Branch not on remote, pushing for first time...'));\n-            try {\n-                execSync(`git push -u origin ${branchName}`);\n-                console.log(chalk.green('   - Pushed branch to remote'));\n-            } catch (firstPushError) {\n-                console.log(chalk.red('   - Warning: Could not push to remote, continuing anyway...'));\n-            }\n-        }\n-\n-        // This is your improved diff command, which is great!\n-        const diffContent = execSync('git diff origin/main...HEAD').toString().trim();\n-        const remoteUrl = execSync('git config --get remote.origin.url').toString().trim();\n-\n-        if (!diffContent) {\n-            throw new Error('No new commits found on this branch compared to \"origin/main\". Please commit your changes.');\n-        }\n-\n-        console.log(chalk.blue(`   - Found ${diffContent.split('\\n').length} lines of changes`));\n-\n-        // --- 2. Ticket ID Extraction: What is this work for? ---\n-        console.log(chalk.blue(`   - Parsing branch name \"${branchName}\"...`));\n-        const ticketIdMatch = branchName.match(/([A-Z]+-\\d+)/);\n-        if (!ticketIdMatch) {\n-            throw new Error(`Could not find a Linear ticket ID (e.g., TIX-123) in branch \"${branchName}\".`);\n-        }\n-        const linearTicketId = ticketIdMatch[0];\n-        console.log(chalk.green(`   - Found Linear Ticket: ${linearTicketId}`));\n-\n-        // --- 3. AI Analysis: What should I say about this work? ---\n-        console.log(chalk.blue('   - Sending code changes to AI for analysis...'));\n-        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n-        const prompt = `Analyze the following git diff and generate a clean JSON object with three keys: \"title\" (a conventional commit-style PR title), \"body\" (a detailed PR description in Markdown format), and \"summary\" (a one-sentence summary for a project manager). Do not add any text before or after the JSON object. Diff:\\n\\n${diffContent}`;\n-\n-        let aiResults;\n-        let retryCount = 0;\n-        const maxRetries = 3;\n-\n-        while (retryCount < maxRetries) {\n-            try {\n-                const result = await model.generateContent(prompt);\n-                const jsonString = result.response.text().replace(/```json\\n|```/g, '').trim();\n-                aiResults = JSON.parse(jsonString);\n-                console.log(chalk.green('   - AI analysis complete.'));\n-                break;\n-            } catch (aiError) {\n-                retryCount++;\n-                if (aiError.message.includes('overloaded') || aiError.message.includes('503')) {\n-                    if (retryCount < maxRetries) {\n-                        const waitTime = retryCount * 2; // 2, 4, 6 seconds\n-                        console.log(chalk.yellow(`   - AI service overloaded, retrying in ${waitTime}s... (${retryCount}/${maxRetries})`));\n-                        await new Promise(resolve => setTimeout(resolve, waitTime * 1000));\n-                        continue;\n-                    }\n-                }\n-\n-                if (retryCount >= maxRetries) {\n-                    console.log(chalk.red('   - AI service unavailable, using fallback analysis...'));\n-                    // Fallback: create basic PR info from branch name and diff stats\n-                    const diffStats = execSync('git diff --stat origin/main...HEAD').toString().trim();\n-                    aiResults = {\n-                        title: `feat: ${linearTicketId} - Update implementation`,\n-                        body: `## Changes\\n\\nThis PR addresses ticket ${linearTicketId}.\\n\\n### Diff Summary\\n\\`\\`\\`\\n${diffStats}\\n\\`\\`\\`\\n\\n### Files Changed\\n${diffContent.split('\\n').filter(line => line.startsWith('diff --git')).map(line => line.replace('diff --git a/', '- ')).join('\\n')}`,\n-                        summary: `Updated implementation for ${linearTicketId} with code changes across multiple files.`\n-                    };\n-                    console.log(chalk.yellow('   - Using fallback PR content'));\n-                    break;\n-                } else {\n-                    throw aiError;\n-                }\n-            }\n-        }\n-\n-        // --- 4. GitHub Action: Let me create or update the PR for you. ---\n-        console.log(chalk.blue('   - Checking for existing pull request on GitHub...'));\n-        const repoInfoMatch = remoteUrl.match(/github\\.com[/:]([\\w-]+)\\/([\\w-]+)/);\n-        if (!repoInfoMatch) {\n-            throw new Error('Could not parse GitHub owner and repo from remote URL.');\n-        }\n-        const owner = repoInfoMatch[1];\n-        const repo = repoInfoMatch[2];\n-\n-        // Check if PR already exists for this branch\n-        let pr;\n-        let isUpdate = false;\n-        try {\n-            const existingPRs = await octokit.pulls.list({\n-                owner,\n-                repo,\n-                head: `${owner}:${branchName}`,\n-                state: 'open'\n-            });\n-\n-            if (existingPRs.data.length > 0) {\n-                const existingPR = existingPRs.data[0];\n-                isUpdate = true;\n-\n-                // Check if title or body has changed\n-                const titleChanged = existingPR.title !== aiResults.title;\n-                const bodyChanged = existingPR.body !== aiResults.body;\n-\n-                if (titleChanged || bodyChanged) {\n-                    console.log(chalk.yellow(`   - Found existing PR #${existingPR.number}, updating with latest changes...`));\n-                    if (titleChanged) console.log(chalk.yellow(`     • Title updated`));\n-                    if (bodyChanged) console.log(chalk.yellow(`     • Description updated with latest code analysis`));\n-                } else {\n-                    console.log(chalk.blue(`   - Found existing PR #${existingPR.number}, no changes needed to title/description`));\n-                }\n-\n-                // Always update to ensure we have the latest commit references\n-                pr = await octokit.pulls.update({\n-                    owner,\n-                    repo,\n-                    pull_number: existingPR.number,\n-                    title: aiResults.title,\n-                    body: aiResults.body,\n-                });\n-                console.log(chalk.green(`   - Updated existing PR: ${pr.data.html_url}`));\n-            } else {\n-                // Create new PR\n-                console.log(chalk.blue('   - No existing PR found, creating new draft PR...'));\n-                pr = await octokit.pulls.create({\n-                    owner,\n-                    repo,\n-                    title: aiResults.title,\n-                    body: aiResults.body,\n-                    head: branchName,\n-                    base: 'main',\n-                    draft: true,\n-                });\n-                console.log(chalk.green(`   - Created new Draft PR: ${pr.data.html_url}`));\n-            }\n-        } catch (createError) {\n-            if (createError.status === 422 && createError.message.includes('pull request already exists')) {\n-                // Fallback: try to find and update the existing PR\n-                console.log(chalk.yellow('   - Handling edge case: PR exists but not found in initial search...'));\n-                const existingPRs = await octokit.pulls.list({\n-                    owner,\n-                    repo,\n-                    head: `${owner}:${branchName}`,\n-                    state: 'open'\n-                });\n-\n-                if (existingPRs.data.length > 0) {\n-                    isUpdate = true;\n-                    pr = await octokit.pulls.update({\n-                        owner,\n-                        repo,\n-                        pull_number: existingPRs.data[0].number,\n-                        title: aiResults.title,\n-                        body: aiResults.body,\n-                    });\n-                    console.log(chalk.green(`   - Updated existing PR: ${pr.data.html_url}`));\n-                } else {\n-                    throw createError;\n-                }\n-            } else {\n-                throw createError;\n-            }\n-        }\n-\n-        // --- 5. Linear Action: Let me update the team. ---\n-        console.log(chalk.blue(`   - Adding comment to Linear ticket ${linearTicketId}...`));\n-\n-        // First, get the issue ID from the identifier\n-        const issueQuery = `\n-            query {\n-                issues(first: 50) {\n-                    nodes {\n-                        id\n-                        identifier\n-                        title\n-                    }\n-                }\n-            }\n-        `;\n-\n-        const issueResponse = await axios.post('https://api.linear.app/graphql', {\n-            query: issueQuery\n-        }, {\n-            headers: {\n-                'Authorization': `${process.env.LINEAR_API_KEY}`,\n-                'Content-Type': 'application/json',\n-            }\n-        });\n-\n-        const issues = issueResponse.data.data.issues.nodes;\n-        const issue = issues.find(issue => issue.identifier === linearTicketId);\n-        if (!issue) {\n-            throw new Error(`Could not find Linear issue with identifier ${linearTicketId}`);\n-        }\n-\n-        // Add a comment to the issue\n-        const commentMutation = `\n-            mutation($input: CommentCreateInput!) {\n-                commentCreate(input: $input) {\n-                    success\n-                    comment {\n-                        id\n-                    }\n-                }\n-            }\n-        `;\n-\n-        const commentBody = `🚀 **Pull Request ${isUpdate ? 'Updated' : 'Created'}**\n-\n-${aiResults.summary}\n-\n-**PR Details:**\n-- Status: ${isUpdate ? 'Updated' : 'Draft'} PR #${pr.data.number}\n-- URL: ${pr.data.html_url}\n-- Title: ${aiResults.title}\n-${isUpdate ? '- ✨ Updated with latest code changes and AI analysis' : ''}`;\n-\n-        await axios.post('https://api.linear.app/graphql', {\n-            query: commentMutation,\n-            variables: {\n-                input: {\n-                    issueId: issue.id,\n-                    body: commentBody\n-                }\n-            }\n-        }, {\n-            headers: {\n-                'Authorization': `${process.env.LINEAR_API_KEY}`,\n-                'Content-Type': 'application/json',\n-            }\n-        });\n-\n-        console.log(chalk.green('   - Linear ticket updated with Agent Action.'));\n-        console.log(chalk.green.bold('\\n✅ Agent finished successfully!'));\n-\n+        // Initialize the core engine with default configuration\n+        const codeScribe = new CodeScribeCore();\n+        \n+        // Execute the specified workflow\n+        const results = await codeScribe.execute(command, options);\n+        \n+        return results;\n     } catch (error) {\n         console.error(chalk.red.bold('\\n❌ Agent failed:'), error.message);\n         if (error.response) {\n@@ -288,8 +39,67 @@ process.on('uncaughtException', (error) => {\n     process.exit(1);\n });\n \n+// --- Command Line Interface ---\n+const args = process.argv.slice(2);\n+const command = args[0] || 'default';\n+\n+// Parse command line options\n+const options = {};\n+for (let i = 1; i < args.length; i++) {\n+    const arg = args[i];\n+    if (arg.startsWith('--')) {\n+        const key = arg.slice(2);\n+        if (args[i + 1] && !args[i + 1].startsWith('--')) {\n+            options[key] = args[i + 1];\n+            i++; // Skip next argument as it's the value\n+        } else {\n+            options[key] = true;\n+        }\n+    } else if (arg.startsWith('-') && arg.length === 2) {\n+        const key = arg.slice(1);\n+        if (args[i + 1] && !args[i + 1].startsWith('-')) {\n+            options[key] = args[i + 1];\n+            i++; // Skip next argument as it's the value\n+        } else {\n+            options[key] = true;\n+        }\n+    }\n+}\n+\n+// Handle help command\n+if (command === '--help' || command === '-h') {\n+    console.log(chalk.cyan.bold('CodeScribe - Enhanced Workflow Orchestration Tool'));\n+    console.log('');\n+    console.log(chalk.yellow('Usage:'));\n+    console.log('  codescribe [command] [options]');\n+    console.log('');\n+    console.log(chalk.yellow('Commands:'));\n+    console.log('  default, pr     Create/update PR and update Linear ticket (default)');\n+    console.log('  commit          Create intelligent commit with GitHub and Linear tracking');\n+    console.log('  github-only     Only perform GitHub operations');\n+    console.log('  linear-only     Only perform Linear operations');\n+    console.log('  --help, -h      Show this help message');\n+    console.log('');\n+    console.log(chalk.yellow('Commit Command Options:'));\n+    console.log('  --message, -m   Custom commit message');\n+    console.log('  --all, -a       Stage all changes (new and modified files)');\n+    console.log('  --add-modified  Stage only modified files');\n+    console.log('  --no-push       Skip pushing to remote');\n+    console.log('  --force         Force commit even if no changes detected');\n+    console.log('');\n+    console.log(chalk.yellow('Examples:'));\n+    console.log('  codescribe                           # Run default workflow');\n+    console.log('  codescribe pr                        # Same as default');\n+    console.log('  codescribe commit                    # Create intelligent commit');\n+    console.log('  codescribe commit -m \"Fix bug\"       # Commit with custom message');\n+    console.log('  codescribe commit --all --no-push    # Stage all, commit, but don\\'t push');\n+    console.log('  codescribe github-only               # Only create/update GitHub PR');\n+    console.log('  codescribe linear-only               # Only update Linear ticket');\n+    process.exit(0);\n+}\n+\n // --- Execute the main function when the script is run ---\n-runDraftAgent().catch((error) => {\n+runDraftAgent(command, options).catch((error) => {\n     console.error(chalk.red.bold('\\n❌ Agent failed:'), error.message);\n     process.exit(1);\n });\n\\ No newline at end of file\ndiff --git a/commit.js b/commit.js\nnew file mode 100644\nindex 0000000..24276cc\n--- /dev/null\n+++ b/commit.js\n@@ -0,0 +1,105 @@\n+#!/usr/bin/env node\n+\n+require('dotenv').config();\n+\n+// Import the commit workflow functionality\n+const CodeScribeCore = require('./src/core/CodeScribeCore');\n+const chalk = require('chalk');\n+\n+/**\n+ * Standalone commit script for easy access to commit functionality\n+ */\n+async function runCommitWorkflow() {\n+    try {\n+        console.log(chalk.cyan.bold('💾 CodeScribe Commit Tool'));\n+        \n+        // Parse command line arguments\n+        const args = process.argv.slice(2);\n+        const options = {};\n+        \n+        // Parse options\n+        for (let i = 0; i < args.length; i++) {\n+            const arg = args[i];\n+            if (arg === '--message' || arg === '-m') {\n+                options.message = args[i + 1];\n+                i++; // Skip next argument\n+            } else if (arg === '--all' || arg === '-a') {\n+                options.addAll = true;\n+            } else if (arg === '--add-modified') {\n+                options.addModified = true;\n+            } else if (arg === '--no-push') {\n+                options.push = false;\n+            } else if (arg === '--force') {\n+                options.force = true;\n+            } else if (arg === '--help' || arg === '-h') {\n+                showHelp();\n+                return;\n+            }\n+        }\n+        \n+        // Initialize the core engine\n+        const codeScribe = new CodeScribeCore();\n+        \n+        // Execute commit workflow\n+        const results = await codeScribe.execute('commit', options);\n+        \n+        if (results.commit?.skipped) {\n+            console.log(chalk.yellow('⏭️  Commit skipped: ' + (results.commit.reason || 'No changes detected')));\n+        } else {\n+            console.log(chalk.green.bold('✅ Commit completed successfully!'));\n+            if (results.commit?.commit) {\n+                console.log(chalk.blue(`   📝 Commit: ${results.commit.commit.shortHash}`));\n+                console.log(chalk.blue(`   💬 Message: ${results.commit.commit.message}`));\n+            }\n+            if (results.commit?.push?.success) {\n+                console.log(chalk.green(`   🚀 Pushed to remote: ${results.commit.push.branch}`));\n+            }\n+            if (results.commit?.linear?.success) {\n+                console.log(chalk.green(`   📋 Linear ticket updated: ${results.commit.linear.ticketId}`));\n+            }\n+        }\n+        \n+    } catch (error) {\n+        console.error(chalk.red.bold('\\n❌ Commit failed:'), error.message);\n+        process.exit(1);\n+    }\n+}\n+\n+function showHelp() {\n+    console.log(chalk.cyan.bold('CodeScribe Commit Tool'));\n+    console.log('');\n+    console.log(chalk.yellow('Usage:'));\n+    console.log('  node commit.js [options]');\n+    console.log('');\n+    console.log(chalk.yellow('Options:'));\n+    console.log('  --message, -m   Custom commit message');\n+    console.log('  --all, -a       Stage all changes (new and modified files)');\n+    console.log('  --add-modified  Stage only modified files');\n+    console.log('  --no-push       Skip pushing to remote');\n+    console.log('  --force         Force commit even if no changes detected');\n+    console.log('  --help, -h      Show this help message');\n+    console.log('');\n+    console.log(chalk.yellow('Examples:'));\n+    console.log('  node commit.js                           # Auto-generate commit message');\n+    console.log('  node commit.js -m \"Fix critical bug\"     # Custom commit message');\n+    console.log('  node commit.js --all --no-push          # Stage all, commit, but don\\'t push');\n+    console.log('  node commit.js --force                   # Force commit even with no changes');\n+}\n+\n+// --- Graceful exit handling ---\n+process.on('SIGINT', () => {\n+    console.log(chalk.yellow('\\n🛑 Commit interrupted by user'));\n+    process.exit(0);\n+});\n+\n+process.on('uncaughtException', (error) => {\n+    console.error(chalk.red.bold('\\n❌ Unexpected error:'), error.message);\n+    process.exit(1);\n+});\n+\n+// --- Execute when run directly ---\n+if (require.main === module) {\n+    runCommitWorkflow();\n+}\n+\n+module.exports = runCommitWorkflow;\n\\ No newline at end of file\ndiff --git a/docs/COMMIT_WORKFLOW.md b/docs/COMMIT_WORKFLOW.md\nnew file mode 100644\nindex 0000000..433837b\n--- /dev/null\n+++ b/docs/COMMIT_WORKFLOW.md\n@@ -0,0 +1,302 @@\n+# CodeScribe Commit Workflow\n+\n+The CodeScribe Commit Workflow provides intelligent commit creation with automatic GitHub and Linear tracking. This workflow analyzes your code changes, generates meaningful commit messages, and keeps your project management tools updated.\n+\n+## Features\n+\n+- **Intelligent Commit Messages**: Automatically generates conventional commit messages based on code analysis\n+- **GitHub Integration**: Tracks commits in GitHub with proper linking\n+- **Linear Integration**: Updates Linear tickets with commit information\n+- **Cross-Platform**: Works on Windows, macOS, and Linux\n+- **Flexible Staging**: Options for staging all files, modified files only, or custom staging\n+- **Push Management**: Automatic pushing to remote with upstream handling\n+\n+## Usage\n+\n+### Via Main CLI\n+\n+```bash\n+# Basic commit with auto-generated message\n+codescribe commit\n+\n+# Commit with custom message\n+codescribe commit --message \"Fix critical authentication bug\"\n+codescribe commit -m \"Add user profile feature\"\n+\n+# Stage all files and commit\n+codescribe commit --all\n+\n+# Commit without pushing to remote\n+codescribe commit --no-push\n+\n+# Force commit even if no changes detected\n+codescribe commit --force\n+```\n+\n+### Via Standalone Script\n+\n+```bash\n+# Basic commit\n+node commit.js\n+\n+# Custom message\n+node commit.js -m \"Update API endpoints\"\n+\n+# Stage all and skip push\n+node commit.js --all --no-push\n+\n+# Show help\n+node commit.js --help\n+```\n+\n+## Command Options\n+\n+| Option | Short | Description |\n+|--------|-------|-------------|\n+| `--message` | `-m` | Custom commit message |\n+| `--all` | `-a` | Stage all changes (new and modified files) |\n+| `--add-modified` | | Stage only modified files |\n+| `--no-push` | | Skip pushing to remote |\n+| `--force` | | Force commit even if no changes detected |\n+| `--help` | `-h` | Show help message |\n+\n+## Intelligent Message Generation\n+\n+The commit workflow analyzes your changes and generates appropriate commit messages using:\n+\n+### Conventional Commits Format\n+\n+Messages follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:\n+\n+```\n+<type>[optional scope]: <description>\n+\n+[optional body]\n+\n+[optional footer(s)]\n+```\n+\n+### Commit Types\n+\n+- `feat`: New features\n+- `fix`: Bug fixes\n+- `docs`: Documentation changes\n+- `style`: Code style changes (formatting, etc.)\n+- `refactor`: Code refactoring\n+- `test`: Test additions or modifications\n+- `chore`: Maintenance tasks, dependency updates\n+\n+### Scope Detection\n+\n+The workflow automatically detects scope based on:\n+- Directory structure\n+- File types modified\n+- Common patterns (api, ui, auth, db, etc.)\n+\n+### Breaking Changes\n+\n+Breaking changes are automatically detected and marked with `!`:\n+```\n+feat(api)!: redesign authentication endpoints\n+```\n+\n+## GitHub Integration\n+\n+When integrated with GitHub, the commit workflow:\n+\n+1. **Tracks Commits**: All commits are properly tracked in GitHub\n+2. **Links to Issues**: Automatically links commits to related issues\n+3. **Branch Management**: Handles branch creation and upstream setting\n+4. **Remote Pushing**: Automatically pushes commits to remote repository\n+\n+## Linear Integration\n+\n+When a Linear ticket ID is detected in the branch name or context:\n+\n+1. **Ticket Updates**: Adds commit information to Linear ticket comments\n+2. **Progress Tracking**: Updates ticket with development progress\n+3. **Commit Linking**: Provides direct links to GitHub commits\n+4. **Team Visibility**: Keeps stakeholders informed of development activity\n+\n+### Linear Comment Format\n+\n+```markdown\n+💾 **New Commit**\n+\n+**Commit:** `abc1234`\n+**Message:** feat(auth): add two-factor authentication\n+**Branch:** feat/AUTH-123-2fa-implementation\n+**GitHub:** [View Commit](https://github.com/owner/repo/commit/abc1234)\n+\n+*Committed by CodeScribe Agent*\n+```\n+\n+## Code Analysis\n+\n+The workflow performs comprehensive code analysis to generate intelligent commit messages:\n+\n+### File Categorization\n+- **Code files**: `.js`, `.ts`, `.jsx`, `.tsx`, etc.\n+- **Test files**: `.test.js`, `.spec.ts`, `__tests__/`\n+- **Documentation**: `README.md`, `.md` files\n+- **Configuration**: `.json`, `.yml`, `.yaml` files\n+- **Styles**: `.css`, `.scss`, `.less` files\n+- **Dependencies**: `package.json`, `package-lock.json`\n+\n+### Change Detection\n+- New files vs. modified files\n+- Breaking changes detection\n+- Dependency updates\n+- Security-related changes\n+- Performance improvements\n+\n+### Complexity Analysis\n+- Code complexity scoring\n+- Function and class analysis\n+- Nesting depth analysis\n+- Maintainability metrics\n+\n+## Error Handling\n+\n+The commit workflow includes robust error handling:\n+\n+### Git Errors\n+- Repository state validation\n+- Merge conflict detection\n+- Remote connectivity issues\n+- Permission problems\n+\n+### Staging Errors\n+- File access issues\n+- Large file warnings\n+- Binary file handling\n+\n+### Push Errors\n+- Network connectivity\n+- Authentication failures\n+- Branch protection rules\n+- Upstream configuration\n+\n+## Configuration\n+\n+The commit workflow can be configured through the CodeScribe configuration:\n+\n+```json\n+{\n+  \"workflows\": {\n+    \"commit\": {\n+      \"enabled\": true,\n+      \"conventionalCommits\": true,\n+      \"autoStage\": \"modified\",\n+      \"autoPush\": true,\n+      \"requireMessage\": false\n+    }\n+  }\n+}\n+```\n+\n+### Configuration Options\n+\n+- `enabled`: Enable/disable the commit workflow\n+- `conventionalCommits`: Use conventional commit format\n+- `autoStage`: Default staging behavior (`all`, `modified`, `none`)\n+- `autoPush`: Automatically push commits to remote\n+- `requireMessage`: Require manual commit message\n+\n+## Examples\n+\n+### Basic Development Workflow\n+\n+```bash\n+# Make code changes\n+# ... edit files ...\n+\n+# Commit with intelligent message generation\n+codescribe commit\n+\n+# Output:\n+# 💾 CodeScribe Commit Tool\n+# 🚀 Starting CodeScribe Agent...\n+#    - Gathering context...\n+#    - Executing commit workflow...\n+#    - Creating commit with message: \"feat(auth): add user authentication system\"\n+#    - Pushing to remote branch: feat/AUTH-123-user-auth\n+#    - Linear ticket AUTH-123 updated with commit info\n+# ✅ Commit completed successfully!\n+#    📝 Commit: a1b2c3d\n+#    💬 Message: feat(auth): add user authentication system\n+#    🚀 Pushed to remote: feat/AUTH-123-user-auth\n+#    📋 Linear ticket updated: AUTH-123\n+```\n+\n+### Bug Fix Workflow\n+\n+```bash\n+# Fix a bug\n+# ... edit files ...\n+\n+# Commit with custom message\n+codescribe commit -m \"Fix null pointer exception in user service\"\n+\n+# Output shows conventional commit format:\n+# fix(service): Fix null pointer exception in user service\n+```\n+\n+### Documentation Update\n+\n+```bash\n+# Update documentation\n+# ... edit README.md ...\n+\n+# Auto-detected as documentation change\n+codescribe commit\n+\n+# Output:\n+# docs: Update README with new installation instructions\n+```\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+1. **No changes detected**\n+   - Use `--force` to commit anyway\n+   - Check if files are properly staged\n+   - Verify you're in the correct directory\n+\n+2. **Push failures**\n+   - Check network connectivity\n+   - Verify GitHub authentication\n+   - Use `--no-push` to commit without pushing\n+\n+3. **Linear integration not working**\n+   - Verify `LINEAR_API_KEY` environment variable\n+   - Check if ticket ID is properly detected\n+   - Ensure Linear workspace access\n+\n+4. **Message generation issues**\n+   - Use `--message` to provide custom message\n+   - Check if code analysis is working properly\n+   - Verify file permissions\n+\n+### Debug Mode\n+\n+Enable debug logging by setting environment variable:\n+```bash\n+DEBUG=codescribe:* codescribe commit\n+```\n+\n+## Best Practices\n+\n+1. **Regular Commits**: Make small, focused commits frequently\n+2. **Meaningful Messages**: Let the AI generate messages or provide clear custom ones\n+3. **Branch Naming**: Use descriptive branch names with ticket IDs\n+4. **Code Review**: Use commits as part of your code review process\n+5. **Integration**: Leverage GitHub and Linear integration for team visibility\n+\n+## Security Considerations\n+\n+- Commit messages are analyzed locally before creation\n+- No sensitive information is sent to external services during analysis\n+- GitHub and Linear integration uses secure API tokens\n+- All network requests use HTTPS encryption\n\\ No newline at end of file\ndiff --git a/package-lock.json b/package-lock.json\nindex 70b1aeb..8db37fd 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -9,14 +9,140 @@\n       \"version\": \"1.0.0\",\n       \"license\": \"ISC\",\n       \"dependencies\": {\n+        \"@babel/parser\": \"^7.28.0\",\n+        \"@babel/traverse\": \"^7.28.0\",\n+        \"@babel/types\": \"^7.28.1\",\n         \"@google/generative-ai\": \"^0.24.1\",\n         \"@linear/sdk\": \"^52.0.0\",\n         \"@octokit/rest\": \"^22.0.0\",\n+        \"acorn\": \"^8.15.0\",\n+        \"audit-ci\": \"^7.1.0\",\n         \"axios\": \"^1.10.0\",\n         \"chalk\": \"^4.1.2\",\n         \"commander\": \"^14.0.0\",\n         \"dotenv\": \"^17.2.0\",\n-        \"express\": \"^5.1.0\"\n+        \"express\": \"^5.1.0\",\n+        \"semver\": \"^7.7.2\"\n+      },\n+      \"bin\": {\n+        \"codescribe\": \"codescribe.js\"\n+      }\n+    },\n+    \"node_modules/@babel/code-frame\": {\n+      \"version\": \"7.27.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz\",\n+      \"integrity\": \"sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/helper-validator-identifier\": \"^7.27.1\",\n+        \"js-tokens\": \"^4.0.0\",\n+        \"picocolors\": \"^1.1.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/generator\": {\n+      \"version\": \"7.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz\",\n+      \"integrity\": \"sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/parser\": \"^7.28.0\",\n+        \"@babel/types\": \"^7.28.0\",\n+        \"@jridgewell/gen-mapping\": \"^0.3.12\",\n+        \"@jridgewell/trace-mapping\": \"^0.3.28\",\n+        \"jsesc\": \"^3.0.2\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/helper-globals\": {\n+      \"version\": \"7.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz\",\n+      \"integrity\": \"sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/helper-string-parser\": {\n+      \"version\": \"7.27.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz\",\n+      \"integrity\": \"sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/helper-validator-identifier\": {\n+      \"version\": \"7.27.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz\",\n+      \"integrity\": \"sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/parser\": {\n+      \"version\": \"7.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz\",\n+      \"integrity\": \"sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/types\": \"^7.28.0\"\n+      },\n+      \"bin\": {\n+        \"parser\": \"bin/babel-parser.js\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.0.0\"\n+      }\n+    },\n+    \"node_modules/@babel/template\": {\n+      \"version\": \"7.27.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz\",\n+      \"integrity\": \"sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/code-frame\": \"^7.27.1\",\n+        \"@babel/parser\": \"^7.27.2\",\n+        \"@babel/types\": \"^7.27.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/traverse\": {\n+      \"version\": \"7.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz\",\n+      \"integrity\": \"sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/code-frame\": \"^7.27.1\",\n+        \"@babel/generator\": \"^7.28.0\",\n+        \"@babel/helper-globals\": \"^7.28.0\",\n+        \"@babel/parser\": \"^7.28.0\",\n+        \"@babel/template\": \"^7.27.2\",\n+        \"@babel/types\": \"^7.28.0\",\n+        \"debug\": \"^4.3.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n+      }\n+    },\n+    \"node_modules/@babel/types\": {\n+      \"version\": \"7.28.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz\",\n+      \"integrity\": \"sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@babel/helper-string-parser\": \"^7.27.1\",\n+        \"@babel/helper-validator-identifier\": \"^7.27.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6.9.0\"\n       }\n     },\n     \"node_modules/@google/generative-ai\": {\n@@ -37,6 +163,41 @@\n         \"graphql\": \"^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0\"\n       }\n     },\n+    \"node_modules/@jridgewell/gen-mapping\": {\n+      \"version\": \"0.3.12\",\n+      \"resolved\": \"https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz\",\n+      \"integrity\": \"sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@jridgewell/sourcemap-codec\": \"^1.5.0\",\n+        \"@jridgewell/trace-mapping\": \"^0.3.24\"\n+      }\n+    },\n+    \"node_modules/@jridgewell/resolve-uri\": {\n+      \"version\": \"3.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz\",\n+      \"integrity\": \"sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6.0.0\"\n+      }\n+    },\n+    \"node_modules/@jridgewell/sourcemap-codec\": {\n+      \"version\": \"1.5.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz\",\n+      \"integrity\": \"sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==\",\n+      \"license\": \"MIT\"\n+    },\n+    \"node_modules/@jridgewell/trace-mapping\": {\n+      \"version\": \"0.3.29\",\n+      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz\",\n+      \"integrity\": \"sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"@jridgewell/resolve-uri\": \"^3.1.0\",\n+        \"@jridgewell/sourcemap-codec\": \"^1.4.14\"\n+      }\n+    },\n     \"node_modules/@linear/sdk\": {\n       \"version\": \"52.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/@linear/sdk/-/sdk-52.0.0.tgz\",\n@@ -240,6 +401,27 @@\n         \"node\": \">= 0.6\"\n       }\n     },\n+    \"node_modules/acorn\": {\n+      \"version\": \"8.15.0\",\n+      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz\",\n+      \"integrity\": \"sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==\",\n+      \"license\": \"MIT\",\n+      \"bin\": {\n+        \"acorn\": \"bin/acorn\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=0.4.0\"\n+      }\n+    },\n+    \"node_modules/ansi-regex\": {\n+      \"version\": \"5.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n+      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n     \"node_modules/ansi-styles\": {\n       \"version\": \"4.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n@@ -261,6 +443,29 @@\n       \"integrity\": \"sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/audit-ci\": {\n+      \"version\": \"7.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/audit-ci/-/audit-ci-7.1.0.tgz\",\n+      \"integrity\": \"sha512-PjjEejlST57S/aDbeWLic0glJ8CNl/ekY3kfGFPMrPkmuaYaDKcMH0F9x9yS9Vp6URhuefSCubl/G0Y2r6oP0g==\",\n+      \"license\": \"Apache-2.0\",\n+      \"dependencies\": {\n+        \"cross-spawn\": \"^7.0.3\",\n+        \"escape-string-regexp\": \"^4.0.0\",\n+        \"event-stream\": \"4.0.1\",\n+        \"jju\": \"^1.4.0\",\n+        \"jsonstream-next\": \"^3.0.0\",\n+        \"readline-transform\": \"1.0.0\",\n+        \"semver\": \"^7.0.0\",\n+        \"tslib\": \"^2.0.0\",\n+        \"yargs\": \"^17.0.0\"\n+      },\n+      \"bin\": {\n+        \"audit-ci\": \"dist/bin.js\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=16\"\n+      }\n+    },\n     \"node_modules/axios\": {\n       \"version\": \"1.10.0\",\n       \"resolved\": \"https://registry.npmjs.org/axios/-/axios-1.10.0.tgz\",\n@@ -352,6 +557,20 @@\n         \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n       }\n     },\n+    \"node_modules/cliui\": {\n+      \"version\": \"8.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz\",\n+      \"integrity\": \"sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==\",\n+      \"license\": \"ISC\",\n+      \"dependencies\": {\n+        \"string-width\": \"^4.2.0\",\n+        \"strip-ansi\": \"^6.0.1\",\n+        \"wrap-ansi\": \"^7.0.0\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=12\"\n+      }\n+    },\n     \"node_modules/color-convert\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n@@ -430,6 +649,20 @@\n         \"node\": \">=6.6.0\"\n       }\n     },\n+    \"node_modules/cross-spawn\": {\n+      \"version\": \"7.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz\",\n+      \"integrity\": \"sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"path-key\": \"^3.1.0\",\n+        \"shebang-command\": \"^2.0.0\",\n+        \"which\": \"^2.0.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">= 8\"\n+      }\n+    },\n     \"node_modules/debug\": {\n       \"version\": \"4.4.1\",\n       \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.4.1.tgz\",\n@@ -491,12 +724,24 @@\n         \"node\": \">= 0.4\"\n       }\n     },\n+    \"node_modules/duplexer\": {\n+      \"version\": \"0.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz\",\n+      \"integrity\": \"sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==\",\n+      \"license\": \"MIT\"\n+    },\n     \"node_modules/ee-first\": {\n       \"version\": \"1.1.1\",\n       \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\n       \"integrity\": \"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/emoji-regex\": {\n+      \"version\": \"8.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n+      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\",\n+      \"license\": \"MIT\"\n+    },\n     \"node_modules/encodeurl\": {\n       \"version\": \"2.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz\",\n@@ -551,12 +796,33 @@\n         \"node\": \">= 0.4\"\n       }\n     },\n+    \"node_modules/escalade\": {\n+      \"version\": \"3.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz\",\n+      \"integrity\": \"sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6\"\n+      }\n+    },\n     \"node_modules/escape-html\": {\n       \"version\": \"1.0.3\",\n       \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\n       \"integrity\": \"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/escape-string-regexp\": {\n+      \"version\": \"4.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz\",\n+      \"integrity\": \"sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=10\"\n+      },\n+      \"funding\": {\n+        \"url\": \"https://github.com/sponsors/sindresorhus\"\n+      }\n+    },\n     \"node_modules/etag\": {\n       \"version\": \"1.8.1\",\n       \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\n@@ -566,6 +832,21 @@\n         \"node\": \">= 0.6\"\n       }\n     },\n+    \"node_modules/event-stream\": {\n+      \"version\": \"4.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/event-stream/-/event-stream-4.0.1.tgz\",\n+      \"integrity\": \"sha512-qACXdu/9VHPBzcyhdOWR5/IahhGMf0roTeZJfzz077GwylcDd90yOHLouhmv7GJ5XzPi6ekaQWd8AvPP2nOvpA==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"duplexer\": \"^0.1.1\",\n+        \"from\": \"^0.1.7\",\n+        \"map-stream\": \"0.0.7\",\n+        \"pause-stream\": \"^0.0.11\",\n+        \"split\": \"^1.0.1\",\n+        \"stream-combiner\": \"^0.2.2\",\n+        \"through\": \"^2.3.8\"\n+      }\n+    },\n     \"node_modules/express\": {\n       \"version\": \"5.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/express/-/express-5.1.0.tgz\",\n@@ -716,6 +997,12 @@\n         \"node\": \">= 0.8\"\n       }\n     },\n+    \"node_modules/from\": {\n+      \"version\": \"0.1.7\",\n+      \"resolved\": \"https://registry.npmjs.org/from/-/from-0.1.7.tgz\",\n+      \"integrity\": \"sha512-twe20eF1OxVxp/ML/kq2p1uc6KvFK/+vs8WjEbeKmV2He22MKm7YF2ANIt+EOqhJ5L3K/SuuPhk0hWQDjOM23g==\",\n+      \"license\": \"MIT\"\n+    },\n     \"node_modules/function-bind\": {\n       \"version\": \"1.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\n@@ -725,6 +1012,15 @@\n         \"url\": \"https://github.com/sponsors/ljharb\"\n       }\n     },\n+    \"node_modules/get-caller-file\": {\n+      \"version\": \"2.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\n+      \"integrity\": \"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\",\n+      \"license\": \"ISC\",\n+      \"engines\": {\n+        \"node\": \"6.* || 8.* || >= 10.*\"\n+      }\n+    },\n     \"node_modules/get-intrinsic\": {\n       \"version\": \"1.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz\",\n@@ -883,12 +1179,27 @@\n         \"node\": \">= 0.10\"\n       }\n     },\n+    \"node_modules/is-fullwidth-code-point\": {\n+      \"version\": \"3.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n+      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n     \"node_modules/is-promise\": {\n       \"version\": \"4.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz\",\n       \"integrity\": \"sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/isexe\": {\n+      \"version\": \"2.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n+      \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n+      \"license\": \"ISC\"\n+    },\n     \"node_modules/isomorphic-unfetch\": {\n       \"version\": \"3.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/isomorphic-unfetch/-/isomorphic-unfetch-3.1.0.tgz\",\n@@ -899,6 +1210,61 @@\n         \"unfetch\": \"^4.2.0\"\n       }\n     },\n+    \"node_modules/jju\": {\n+      \"version\": \"1.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jju/-/jju-1.4.0.tgz\",\n+      \"integrity\": \"sha512-8wb9Yw966OSxApiCt0K3yNJL8pnNeIv+OEq2YMidz4FKP6nonSRoOXc80iXY4JaN2FC11B9qsNmDsm+ZOfMROA==\",\n+      \"license\": \"MIT\"\n+    },\n+    \"node_modules/js-tokens\": {\n+      \"version\": \"4.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\n+      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\n+      \"license\": \"MIT\"\n+    },\n+    \"node_modules/jsesc\": {\n+      \"version\": \"3.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz\",\n+      \"integrity\": \"sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==\",\n+      \"license\": \"MIT\",\n+      \"bin\": {\n+        \"jsesc\": \"bin/jsesc\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=6\"\n+      }\n+    },\n+    \"node_modules/jsonparse\": {\n+      \"version\": \"1.3.1\",\n+      \"resolved\": \"https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz\",\n+      \"integrity\": \"sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==\",\n+      \"engines\": [\n+        \"node >= 0.2.0\"\n+      ],\n+      \"license\": \"MIT\"\n+    },\n+    \"node_modules/jsonstream-next\": {\n+      \"version\": \"3.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jsonstream-next/-/jsonstream-next-3.0.0.tgz\",\n+      \"integrity\": \"sha512-aAi6oPhdt7BKyQn1SrIIGZBt0ukKuOUE1qV6kJ3GgioSOYzsRc8z9Hfr1BVmacA/jLe9nARfmgMGgn68BqIAgg==\",\n+      \"license\": \"(MIT OR Apache-2.0)\",\n+      \"dependencies\": {\n+        \"jsonparse\": \"^1.2.0\",\n+        \"through2\": \"^4.0.2\"\n+      },\n+      \"bin\": {\n+        \"jsonstream-next\": \"bin.js\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=10\"\n+      }\n+    },\n+    \"node_modules/map-stream\": {\n+      \"version\": \"0.0.7\",\n+      \"resolved\": \"https://registry.npmjs.org/map-stream/-/map-stream-0.0.7.tgz\",\n+      \"integrity\": \"sha512-C0X0KQmGm3N2ftbTGBhSyuydQ+vV1LC3f3zPvT3RXHXNZrvfPZcoXp/N5DOa8vedX/rTMm2CjTtivFg2STJMRQ==\",\n+      \"license\": \"MIT\"\n+    },\n     \"node_modules/math-intrinsics\": {\n       \"version\": \"1.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz\",\n@@ -1027,6 +1393,15 @@\n         \"node\": \">= 0.8\"\n       }\n     },\n+    \"node_modules/path-key\": {\n+      \"version\": \"3.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n+      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n     \"node_modules/path-to-regexp\": {\n       \"version\": \"8.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.2.0.tgz\",\n@@ -1036,6 +1411,24 @@\n         \"node\": \">=16\"\n       }\n     },\n+    \"node_modules/pause-stream\": {\n+      \"version\": \"0.0.11\",\n+      \"resolved\": \"https://registry.npmjs.org/pause-stream/-/pause-stream-0.0.11.tgz\",\n+      \"integrity\": \"sha512-e3FBlXLmN/D1S+zHzanP4E/4Z60oFAa3O051qt1pxa7DEJWKAyil6upYVXCWadEnuoqa4Pkc9oUx9zsxYeRv8A==\",\n+      \"license\": [\n+        \"MIT\",\n+        \"Apache2\"\n+      ],\n+      \"dependencies\": {\n+        \"through\": \"~2.3\"\n+      }\n+    },\n+    \"node_modules/picocolors\": {\n+      \"version\": \"1.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\n+      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\",\n+      \"license\": \"ISC\"\n+    },\n     \"node_modules/proxy-addr\": {\n       \"version\": \"2.0.7\",\n       \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\n@@ -1094,6 +1487,38 @@\n         \"node\": \">= 0.8\"\n       }\n     },\n+    \"node_modules/readable-stream\": {\n+      \"version\": \"3.6.2\",\n+      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\n+      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"inherits\": \"^2.0.3\",\n+        \"string_decoder\": \"^1.1.1\",\n+        \"util-deprecate\": \"^1.0.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">= 6\"\n+      }\n+    },\n+    \"node_modules/readline-transform\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/readline-transform/-/readline-transform-1.0.0.tgz\",\n+      \"integrity\": \"sha512-7KA6+N9IGat52d83dvxnApAWN+MtVb1MiVuMR/cf1O4kYsJG+g/Aav0AHcHKsb6StinayfPLne0+fMX2sOzAKg==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=6\"\n+      }\n+    },\n+    \"node_modules/require-directory\": {\n+      \"version\": \"2.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\n+      \"integrity\": \"sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=0.10.0\"\n+      }\n+    },\n     \"node_modules/router\": {\n       \"version\": \"2.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/router/-/router-2.2.0.tgz\",\n@@ -1136,6 +1561,18 @@\n       \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/semver\": {\n+      \"version\": \"7.7.2\",\n+      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.7.2.tgz\",\n+      \"integrity\": \"sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==\",\n+      \"license\": \"ISC\",\n+      \"bin\": {\n+        \"semver\": \"bin/semver.js\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=10\"\n+      }\n+    },\n     \"node_modules/send\": {\n       \"version\": \"1.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/send/-/send-1.2.0.tgz\",\n@@ -1200,6 +1637,27 @@\n       \"integrity\": \"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\",\n       \"license\": \"ISC\"\n     },\n+    \"node_modules/shebang-command\": {\n+      \"version\": \"2.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n+      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"shebang-regex\": \"^3.0.0\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n+    \"node_modules/shebang-regex\": {\n+      \"version\": \"3.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n+      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n+      \"license\": \"MIT\",\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n     \"node_modules/side-channel\": {\n       \"version\": \"1.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz\",\n@@ -1272,6 +1730,18 @@\n         \"url\": \"https://github.com/sponsors/ljharb\"\n       }\n     },\n+    \"node_modules/split\": {\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/split/-/split-1.0.1.tgz\",\n+      \"integrity\": \"sha512-mTyOoPbrivtXnwnIxZRFYRrPNtEFKlpB2fvjSnCQUiAA6qAZzqwna5envK4uk6OIeP17CsdF3rSBGYVBsU0Tkg==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"through\": \"2\"\n+      },\n+      \"engines\": {\n+        \"node\": \"*\"\n+      }\n+    },\n     \"node_modules/statuses\": {\n       \"version\": \"2.0.2\",\n       \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-2.0.2.tgz\",\n@@ -1281,6 +1751,51 @@\n         \"node\": \">= 0.8\"\n       }\n     },\n+    \"node_modules/stream-combiner\": {\n+      \"version\": \"0.2.2\",\n+      \"resolved\": \"https://registry.npmjs.org/stream-combiner/-/stream-combiner-0.2.2.tgz\",\n+      \"integrity\": \"sha512-6yHMqgLYDzQDcAkL+tjJDC5nSNuNIx0vZtRZeiPh7Saef7VHX9H5Ijn9l2VIol2zaNYlYEX6KyuT/237A58qEQ==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"duplexer\": \"~0.1.1\",\n+        \"through\": \"~2.3.4\"\n+      }\n+    },\n+    \"node_modules/string_decoder\": {\n+      \"version\": \"1.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz\",\n+      \"integrity\": \"sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"safe-buffer\": \"~5.2.0\"\n+      }\n+    },\n+    \"node_modules/string-width\": {\n+      \"version\": \"4.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\n+      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"emoji-regex\": \"^8.0.0\",\n+        \"is-fullwidth-code-point\": \"^3.0.0\",\n+        \"strip-ansi\": \"^6.0.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n+    \"node_modules/strip-ansi\": {\n+      \"version\": \"6.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n+      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"ansi-regex\": \"^5.0.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=8\"\n+      }\n+    },\n     \"node_modules/supports-color\": {\n       \"version\": \"7.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n@@ -1293,6 +1808,21 @@\n         \"node\": \">=8\"\n       }\n     },\n+    \"node_modules/through\": {\n+      \"version\": \"2.3.8\",\n+      \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\",\n+      \"integrity\": \"sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==\",\n+      \"license\": \"MIT\"\n+    },\n+    \"node_modules/through2\": {\n+      \"version\": \"4.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/through2/-/through2-4.0.2.tgz\",\n+      \"integrity\": \"sha512-iOqSav00cVxEEICeD7TjLB1sueEL+81Wpzp2bY17uZjZN0pWZPuo4suZ/61VujxmqSGFfgOcNuTZ85QJwNZQpw==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"readable-stream\": \"3\"\n+      }\n+    },\n     \"node_modules/toidentifier\": {\n       \"version\": \"1.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz\",\n@@ -1308,6 +1838,12 @@\n       \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\",\n       \"license\": \"MIT\"\n     },\n+    \"node_modules/tslib\": {\n+      \"version\": \"2.8.1\",\n+      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz\",\n+      \"integrity\": \"sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==\",\n+      \"license\": \"0BSD\"\n+    },\n     \"node_modules/type-is\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz\",\n@@ -1364,6 +1900,12 @@\n         \"node\": \">= 0.8\"\n       }\n     },\n+    \"node_modules/util-deprecate\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\n+      \"integrity\": \"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\",\n+      \"license\": \"MIT\"\n+    },\n     \"node_modules/vary\": {\n       \"version\": \"1.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\n@@ -1389,11 +1931,79 @@\n         \"webidl-conversions\": \"^3.0.0\"\n       }\n     },\n+    \"node_modules/which\": {\n+      \"version\": \"2.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n+      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n+      \"license\": \"ISC\",\n+      \"dependencies\": {\n+        \"isexe\": \"^2.0.0\"\n+      },\n+      \"bin\": {\n+        \"node-which\": \"bin/node-which\"\n+      },\n+      \"engines\": {\n+        \"node\": \">= 8\"\n+      }\n+    },\n+    \"node_modules/wrap-ansi\": {\n+      \"version\": \"7.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\n+      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"ansi-styles\": \"^4.0.0\",\n+        \"string-width\": \"^4.1.0\",\n+        \"strip-ansi\": \"^6.0.0\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=10\"\n+      },\n+      \"funding\": {\n+        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n+      }\n+    },\n     \"node_modules/wrappy\": {\n       \"version\": \"1.0.2\",\n       \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n       \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\n       \"license\": \"ISC\"\n+    },\n+    \"node_modules/y18n\": {\n+      \"version\": \"5.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\n+      \"integrity\": \"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\",\n+      \"license\": \"ISC\",\n+      \"engines\": {\n+        \"node\": \">=10\"\n+      }\n+    },\n+    \"node_modules/yargs\": {\n+      \"version\": \"17.7.2\",\n+      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz\",\n+      \"integrity\": \"sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==\",\n+      \"license\": \"MIT\",\n+      \"dependencies\": {\n+        \"cliui\": \"^8.0.1\",\n+        \"escalade\": \"^3.1.1\",\n+        \"get-caller-file\": \"^2.0.5\",\n+        \"require-directory\": \"^2.1.1\",\n+        \"string-width\": \"^4.2.3\",\n+        \"y18n\": \"^5.0.5\",\n+        \"yargs-parser\": \"^21.1.1\"\n+      },\n+      \"engines\": {\n+        \"node\": \">=12\"\n+      }\n+    },\n+    \"node_modules/yargs-parser\": {\n+      \"version\": \"21.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz\",\n+      \"integrity\": \"sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==\",\n+      \"license\": \"ISC\",\n+      \"engines\": {\n+        \"node\": \">=12\"\n+      }\n     }\n   }\n }\ndiff --git a/package.json b/package.json\nindex 6a6c124..884c3c8 100644\n--- a/package.json\n+++ b/package.json\n@@ -22,13 +22,19 @@\n   },\n   \"homepage\": \"https://github.com/ManagementMO/CodeScribe#readme\",\n   \"dependencies\": {\n+    \"@babel/parser\": \"^7.28.0\",\n+    \"@babel/traverse\": \"^7.28.0\",\n+    \"@babel/types\": \"^7.28.1\",\n     \"@google/generative-ai\": \"^0.24.1\",\n     \"@linear/sdk\": \"^52.0.0\",\n     \"@octokit/rest\": \"^22.0.0\",\n+    \"acorn\": \"^8.15.0\",\n+    \"audit-ci\": \"^7.1.0\",\n     \"axios\": \"^1.10.0\",\n     \"chalk\": \"^4.1.2\",\n     \"commander\": \"^14.0.0\",\n     \"dotenv\": \"^17.2.0\",\n-    \"express\": \"^5.1.0\"\n+    \"express\": \"^5.1.0\",\n+    \"semver\": \"^7.7.2\"\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/README.md b/src/README.md\nnew file mode 100644\nindex 0000000..bcb01ad\n--- /dev/null\n+++ b/src/README.md\n@@ -0,0 +1,162 @@\n+# CodeScribe Modular Architecture\n+\n+This directory contains the refactored modular architecture for CodeScribe, transforming it from a monolithic script into a comprehensive workflow orchestration platform.\n+\n+## Architecture Overview\n+\n+```\n+src/\n+├── core/\n+│   └── CodeScribeCore.js          # Central orchestrator\n+├── context/\n+│   └── ContextAnalyzer.js         # Enhanced context gathering\n+├── workflows/\n+│   ├── BaseWorkflow.js            # Base class for all workflows\n+│   ├── WorkflowOrchestrator.js    # Plugin-based workflow management\n+│   ├── github/\n+│   │   └── GitHubWorkflow.js      # GitHub operations\n+│   └── linear/\n+│       └── LinearWorkflow.js      # Linear ticket management\n+├── ai/\n+│   └── AIAnalysisEngine.js        # AI integration and analysis\n+└── config/\n+    └── ConfigurationManager.js    # Configuration management\n+```\n+\n+## Key Components\n+\n+### Core Engine (`CodeScribeCore.js`)\n+- Central orchestrator that manages workflow execution\n+- Coordinates between all components\n+- Provides plugin registration interface\n+- Handles error management and logging\n+\n+### Context Analyzer (`ContextAnalyzer.js`)\n+- Enhanced version of original context gathering\n+- Extracts git information, branch details, and diff content\n+- Handles unpushed commits automatically\n+- Parses Linear ticket IDs from branch names\n+- Extensible for future context sources\n+\n+### Workflow Orchestrator (`WorkflowOrchestrator.js`)\n+- Plugin-based system for managing different workflow types\n+- Intelligent workflow selection based on commands and context\n+- Dependency management between workflows\n+- Parallel and sequential execution support\n+\n+### Base Workflow (`BaseWorkflow.js`)\n+- Abstract base class for all workflow implementations\n+- Provides common functionality and interfaces\n+- Error handling and retry logic\n+- Configuration management per workflow\n+- Logging and cleanup utilities\n+\n+### GitHub Workflow (`GitHubWorkflow.js`)\n+- Handles all GitHub-related operations\n+- PR creation and updates with intelligent change detection\n+- Repository parsing and validation\n+- Fallback content generation when AI is unavailable\n+\n+### Linear Workflow (`LinearWorkflow.js`)\n+- Manages Linear ticket updates and comments\n+- GraphQL API integration\n+- Issue lookup by identifier\n+- Comment generation based on GitHub results\n+\n+### AI Analysis Engine (`AIAnalysisEngine.js`)\n+- Enhanced AI integration with retry logic\n+- Multiple model support (currently Gemini)\n+- Specialized prompts for different analysis types\n+- Fallback content generation\n+- Extensible for future AI providers\n+\n+### Configuration Manager (`ConfigurationManager.js`)\n+- Hierarchical configuration system\n+- File-based configuration support (.codescribe.json)\n+- Environment variable integration\n+- Default configuration with user overrides\n+- Configuration validation\n+\n+## Usage\n+\n+### Basic Usage\n+```bash\n+# Run default workflow (GitHub + Linear)\n+codescribe\n+\n+# GitHub operations only\n+codescribe github-only\n+\n+# Linear operations only  \n+codescribe linear-only\n+\n+# Show help\n+codescribe --help\n+```\n+\n+### Configuration\n+Create a `.codescribe.json` file in your project root:\n+\n+```json\n+{\n+  \"workflows\": {\n+    \"github\": { \"enabled\": true, \"createDraft\": true },\n+    \"linear\": { \"enabled\": true, \"addComments\": true }\n+  },\n+  \"ai\": {\n+    \"model\": \"gemini-1.5-flash\",\n+    \"maxRetries\": 3\n+  }\n+}\n+```\n+\n+### Plugin Development\n+Extend the system with custom workflows:\n+\n+```javascript\n+const BaseWorkflow = require('./src/workflows/BaseWorkflow');\n+\n+class CustomWorkflow extends BaseWorkflow {\n+    constructor(config) {\n+        super(config, 'custom');\n+    }\n+    \n+    async execute(context, options) {\n+        // Custom workflow implementation\n+    }\n+}\n+\n+// Register with core engine\n+codeScribe.registerWorkflow(new CustomWorkflow(config));\n+```\n+\n+## Migration from Original\n+\n+The refactored architecture maintains full backward compatibility while providing:\n+\n+1. **Modularity**: Each component has a single responsibility\n+2. **Extensibility**: Easy to add new workflows and integrations\n+3. **Configuration**: Flexible configuration system\n+4. **Error Handling**: Improved error recovery and reporting\n+5. **Testing**: Each component can be tested independently\n+6. **Maintainability**: Clear separation of concerns\n+\n+## Future Enhancements\n+\n+The modular architecture enables easy addition of:\n+- Documentation generation workflows\n+- Code quality analysis\n+- Security scanning\n+- Custom notification systems\n+- Additional AI providers\n+- Advanced GitHub automations\n+- Enhanced Linear integrations\n+\n+## Environment Variables\n+\n+Required environment variables:\n+- `GITHUB_TOKEN`: GitHub personal access token\n+- `LINEAR_API_KEY`: Linear API key\n+- `GEMINI_API_KEY`: Google Gemini API key\n+\n+Optional configuration can override these through the configuration file.\n\\ No newline at end of file\ndiff --git a/src/ai/AIAnalysisEngine.js b/src/ai/AIAnalysisEngine.js\nnew file mode 100644\nindex 0000000..5421a33\n--- /dev/null\n+++ b/src/ai/AIAnalysisEngine.js\n@@ -0,0 +1,165 @@\n+const { GoogleGenerativeAI } = require('@google/generative-ai');\n+const chalk = require('chalk');\n+\n+/**\n+ * AI Analysis Engine - Enhanced AI integration with multiple models and specialized prompts\n+ */\n+class AIAnalysisEngine {\n+    constructor(config) {\n+        this.config = config;\n+        this.genAI = new GoogleGenerativeAI(\n+            process.env.GEMINI_API_KEY || config.get('ai.gemini.apiKey')\n+        );\n+        this.defaultModel = config.get('ai.model', 'gemini-1.5-flash');\n+        this.maxRetries = config.get('ai.maxRetries', 3);\n+    }\n+\n+    /**\n+     * Analyze code changes and generate PR content\n+     * @param {Object} context - Current execution context\n+     * @returns {Promise<Object>} AI analysis results\n+     */\n+    async analyzePRContent(context) {\n+        console.log(chalk.blue('   - Sending code changes to AI for analysis...'));\n+\n+        const prompt = this.buildPRAnalysisPrompt(context.git.diff);\n+        \n+        try {\n+            const result = await this.generateWithRetry(prompt);\n+            console.log(chalk.green('   - AI analysis complete.'));\n+            return result;\n+        } catch (error) {\n+            console.log(chalk.red('   - AI service unavailable, using fallback analysis...'));\n+            return this.generateFallbackPRContent(context);\n+        }\n+    }\n+\n+    /**\n+     * Build prompt for PR content analysis\n+     * @param {string} diffContent - Git diff content\n+     * @returns {string} Formatted prompt\n+     */\n+    buildPRAnalysisPrompt(diffContent) {\n+        return `Analyze the following git diff and generate a clean JSON object with three keys: \"title\" (a conventional commit-style PR title), \"body\" (a detailed PR description in Markdown format), and \"summary\" (a one-sentence summary for a project manager). Do not add any text before or after the JSON object. Diff:\\n\\n${diffContent}`;\n+    }\n+\n+    /**\n+     * Generate content with retry logic\n+     * @param {string} prompt - The prompt to send to AI\n+     * @param {string} modelName - Model to use (optional)\n+     * @returns {Promise<Object>} Generated content\n+     */\n+    async generateWithRetry(prompt, modelName = this.defaultModel) {\n+        const model = this.genAI.getGenerativeModel({ model: modelName });\n+        let lastError;\n+\n+        for (let retryCount = 0; retryCount < this.maxRetries; retryCount++) {\n+            try {\n+                const result = await model.generateContent(prompt);\n+                const jsonString = result.response.text().replace(/```json\\n|```/g, '').trim();\n+                return JSON.parse(jsonString);\n+            } catch (error) {\n+                lastError = error;\n+                \n+                if (error.message.includes('overloaded') || error.message.includes('503')) {\n+                    if (retryCount < this.maxRetries - 1) {\n+                        const waitTime = (retryCount + 1) * 2; // 2, 4, 6 seconds\n+                        console.log(chalk.yellow(`   - AI service overloaded, retrying in ${waitTime}s... (${retryCount + 1}/${this.maxRetries})`));\n+                        await this.sleep(waitTime * 1000);\n+                        continue;\n+                    }\n+                }\n+                \n+                // If it's not a retryable error, break out of the loop\n+                if (retryCount >= this.maxRetries - 1) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        throw lastError;\n+    }\n+\n+    /**\n+     * Generate fallback PR content when AI is unavailable\n+     * @param {Object} context - Current execution context\n+     * @returns {Object} Fallback PR content\n+     */\n+    generateFallbackPRContent(context) {\n+        const ticketId = context.linear?.ticketId || 'UNKNOWN';\n+        const diffStats = context.git?.diffStats || '';\n+        const diff = context.git?.diff || '';\n+\n+        const filesChanged = diff.split('\\n')\n+            .filter(line => line.startsWith('diff --git'))\n+            .map(line => line.replace('diff --git a/', '- '))\n+            .join('\\n');\n+\n+        return {\n+            title: `feat: ${ticketId} - Update implementation`,\n+            body: `## Changes\\n\\nThis PR addresses ticket ${ticketId}.\\n\\n### Diff Summary\\n\\`\\`\\`\\n${diffStats}\\n\\`\\`\\`\\n\\n### Files Changed\\n${filesChanged}`,\n+            summary: `Updated implementation for ${ticketId} with code changes across multiple files.`\n+        };\n+    }\n+\n+    /**\n+     * Analyze code quality and complexity\n+     * @param {Object} context - Current execution context\n+     * @returns {Promise<Object>} Code quality analysis\n+     */\n+    async analyzeCodeQuality(context) {\n+        // Placeholder for future implementation\n+        return {\n+            complexity: 'medium',\n+            maintainability: 'good',\n+            testability: 'good',\n+            suggestions: []\n+        };\n+    }\n+\n+    /**\n+     * Analyze security implications of code changes\n+     * @param {Object} context - Current execution context\n+     * @returns {Promise<Object>} Security analysis\n+     */\n+    async analyzeSecurityImplications(context) {\n+        // Placeholder for future implementation\n+        return {\n+            vulnerabilities: [],\n+            recommendations: []\n+        };\n+    }\n+\n+    /**\n+     * Generate documentation from code changes\n+     * @param {Object} context - Current execution context\n+     * @returns {Promise<Object>} Documentation suggestions\n+     */\n+    async generateDocumentation(context) {\n+        // Placeholder for future implementation\n+        return {\n+            missing: [],\n+            outdated: [],\n+            suggestions: []\n+        };\n+    }\n+\n+    /**\n+     * Sleep utility for retry delays\n+     * @param {number} ms - Milliseconds to sleep\n+     * @returns {Promise} Promise that resolves after delay\n+     */\n+    sleep(ms) {\n+        return new Promise(resolve => setTimeout(resolve, ms));\n+    }\n+\n+    /**\n+     * Check if AI service is available\n+     * @returns {boolean} Whether AI service is configured\n+     */\n+    isAvailable() {\n+        return !!(process.env.GEMINI_API_KEY || this.config.get('ai.gemini.apiKey'));\n+    }\n+}\n+\n+module.exports = AIAnalysisEngine;\n\\ No newline at end of file\ndiff --git a/src/config/ConfigurationManager.js b/src/config/ConfigurationManager.js\nnew file mode 100644\nindex 0000000..a2eb69d\n--- /dev/null\n+++ b/src/config/ConfigurationManager.js\n@@ -0,0 +1,254 @@\n+const fs = require('fs');\n+const path = require('path');\n+\n+/**\n+ * Configuration Manager - Handles user preferences, project settings, and workflow configurations\n+ */\n+class ConfigurationManager {\n+    constructor(initialConfig = {}) {\n+        this.config = this.mergeWithDefaults(initialConfig);\n+        this.configPath = this.findConfigFile();\n+        \n+        // Load configuration from file if it exists\n+        if (this.configPath) {\n+            this.loadFromFile();\n+        }\n+    }\n+\n+    /**\n+     * Get default configuration\n+     * @returns {Object} Default configuration object\n+     */\n+    getDefaults() {\n+        return {\n+            workflows: {\n+                github: { \n+                    enabled: true, \n+                    templates: 'default',\n+                    createDraft: true,\n+                    autoAssignReviewers: false\n+                },\n+                linear: { \n+                    enabled: true, \n+                    autoTransition: true,\n+                    addComments: true,\n+                    trackTime: false\n+                },\n+                documentation: { \n+                    enabled: false, \n+                    formats: ['mermaid', 'markdown'],\n+                    autoGenerate: false\n+                },\n+                quality: { \n+                    enabled: false, \n+                    thresholds: { \n+                        complexity: 10,\n+                        maintainability: 70\n+                    }\n+                }\n+            },\n+            ai: {\n+                provider: 'gemini',\n+                model: 'gemini-1.5-flash',\n+                maxRetries: 3,\n+                fallback: true\n+            },\n+            notifications: {\n+                slack: { enabled: false },\n+                email: { enabled: false },\n+                teams: { enabled: false }\n+            },\n+            git: {\n+                autoPush: true,\n+                defaultBranch: 'main',\n+                conventionalCommits: true\n+            },\n+            logging: {\n+                level: 'info',\n+                file: false,\n+                console: true\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Merge user config with defaults\n+     * @param {Object} userConfig - User-provided configuration\n+     * @returns {Object} Merged configuration\n+     */\n+    mergeWithDefaults(userConfig) {\n+        return this.deepMerge(this.getDefaults(), userConfig);\n+    }\n+\n+    /**\n+     * Deep merge two objects\n+     * @param {Object} target - Target object\n+     * @param {Object} source - Source object\n+     * @returns {Object} Merged object\n+     */\n+    deepMerge(target, source) {\n+        const result = { ...target };\n+        \n+        for (const key in source) {\n+            if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n+                result[key] = this.deepMerge(result[key] || {}, source[key]);\n+            } else {\n+                result[key] = source[key];\n+            }\n+        }\n+        \n+        return result;\n+    }\n+\n+    /**\n+     * Find configuration file in current directory or parent directories\n+     * @returns {string|null} Path to configuration file or null if not found\n+     */\n+    findConfigFile() {\n+        const configNames = [\n+            '.codescribe.json',\n+            '.codescribe.js',\n+            'codescribe.config.json',\n+            'codescribe.config.js'\n+        ];\n+\n+        let currentDir = process.cwd();\n+        \n+        while (currentDir !== path.dirname(currentDir)) {\n+            for (const configName of configNames) {\n+                const configPath = path.join(currentDir, configName);\n+                if (fs.existsSync(configPath)) {\n+                    return configPath;\n+                }\n+            }\n+            currentDir = path.dirname(currentDir);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Load configuration from file\n+     */\n+    loadFromFile() {\n+        try {\n+            if (this.configPath.endsWith('.js')) {\n+                // Clear require cache to allow reloading\n+                delete require.cache[require.resolve(this.configPath)];\n+                const fileConfig = require(this.configPath);\n+                this.config = this.mergeWithDefaults(fileConfig);\n+            } else {\n+                const fileContent = fs.readFileSync(this.configPath, 'utf8');\n+                const fileConfig = JSON.parse(fileContent);\n+                this.config = this.mergeWithDefaults(fileConfig);\n+            }\n+        } catch (error) {\n+            console.warn(`Warning: Could not load configuration from ${this.configPath}: ${error.message}`);\n+        }\n+    }\n+\n+    /**\n+     * Get configuration value by path\n+     * @param {string} path - Dot-separated path to configuration value\n+     * @param {*} defaultValue - Default value if path not found\n+     * @returns {*} Configuration value\n+     */\n+    get(path, defaultValue = undefined) {\n+        const keys = path.split('.');\n+        let current = this.config;\n+        \n+        for (const key of keys) {\n+            if (current && typeof current === 'object' && key in current) {\n+                current = current[key];\n+            } else {\n+                return defaultValue;\n+            }\n+        }\n+        \n+        return current;\n+    }\n+\n+    /**\n+     * Set configuration value by path\n+     * @param {string} path - Dot-separated path to configuration value\n+     * @param {*} value - Value to set\n+     */\n+    set(path, value) {\n+        const keys = path.split('.');\n+        let current = this.config;\n+        \n+        for (let i = 0; i < keys.length - 1; i++) {\n+            const key = keys[i];\n+            if (!(key in current) || typeof current[key] !== 'object') {\n+                current[key] = {};\n+            }\n+            current = current[key];\n+        }\n+        \n+        current[keys[keys.length - 1]] = value;\n+    }\n+\n+    /**\n+     * Update configuration with new values\n+     * @param {Object} updates - Configuration updates\n+     */\n+    update(updates) {\n+        this.config = this.deepMerge(this.config, updates);\n+    }\n+\n+    /**\n+     * Get all configuration\n+     * @returns {Object} Complete configuration object\n+     */\n+    getAll() {\n+        return { ...this.config };\n+    }\n+\n+    /**\n+     * Save configuration to file\n+     * @param {string} filePath - Optional file path (uses current config path if not provided)\n+     */\n+    saveToFile(filePath = null) {\n+        const targetPath = filePath || this.configPath || path.join(process.cwd(), '.codescribe.json');\n+        \n+        try {\n+            const configContent = JSON.stringify(this.config, null, 2);\n+            fs.writeFileSync(targetPath, configContent, 'utf8');\n+            this.configPath = targetPath;\n+        } catch (error) {\n+            throw new Error(`Could not save configuration to ${targetPath}: ${error.message}`);\n+        }\n+    }\n+\n+    /**\n+     * Reset configuration to defaults\n+     */\n+    reset() {\n+        this.config = this.getDefaults();\n+    }\n+\n+    /**\n+     * Validate configuration\n+     * @returns {Array} Array of validation errors (empty if valid)\n+     */\n+    validate() {\n+        const errors = [];\n+        \n+        // Validate required fields based on enabled workflows\n+        if (this.get('workflows.github.enabled') && !process.env.GITHUB_TOKEN && !this.get('github.token')) {\n+            errors.push('GitHub workflow is enabled but no GitHub token is configured');\n+        }\n+        \n+        if (this.get('workflows.linear.enabled') && !process.env.LINEAR_API_KEY && !this.get('linear.apiKey')) {\n+            errors.push('Linear workflow is enabled but no Linear API key is configured');\n+        }\n+        \n+        if (this.get('ai.provider') === 'gemini' && !process.env.GEMINI_API_KEY && !this.get('ai.gemini.apiKey')) {\n+            errors.push('Gemini AI provider is configured but no API key is available');\n+        }\n+        \n+        return errors;\n+    }\n+}\n+\n+module.exports = ConfigurationManager;\n\\ No newline at end of file\ndiff --git a/src/context/ContextAnalyzer.js b/src/context/ContextAnalyzer.js\nnew file mode 100644\nindex 0000000..2a1aa36\n--- /dev/null\n+++ b/src/context/ContextAnalyzer.js\n@@ -0,0 +1,1893 @@\n+const { execSync } = require('child_process');\n+const chalk = require('chalk');\n+\n+/**\n+ * Context Analyzer - Enhanced version of current context gathering with deeper code analysis\n+ */\n+class ContextAnalyzer {\n+    constructor(config) {\n+        this.config = config;\n+    }\n+\n+    /**\n+     * Gather comprehensive context from various sources\n+     * @returns {Promise<Object>} Complete context object\n+     */\n+    async gather() {\n+        const gitContext = await this.gatherGitContext();\n+        \n+        const context = {\n+            git: gitContext,\n+            code: await this.analyzeCodeChanges(),\n+            project: await this.analyzeProjectStructure(),\n+            linear: this.gatherLinearContext(gitContext.branch)\n+        };\n+\n+        return context;\n+    }\n+\n+    /**\n+     * Gather Git-related context information with enhanced analysis\n+     * @returns {Promise<Object>} Git context\n+     */\n+    async gatherGitContext() {\n+        console.log(chalk.blue('   - Gathering enhanced git context...'));\n+        \n+        try {\n+            const branchName = execSync('git rev-parse --abbrev-ref HEAD').toString().trim();\n+            const remoteUrl = execSync('git config --get remote.origin.url').toString().trim();\n+            \n+            // Handle unpushed commits\n+            await this.handleUnpushedCommits(branchName);\n+            \n+            const diffContent = execSync('git diff origin/main...HEAD').toString().trim();\n+            \n+            if (!diffContent) {\n+                throw new Error('No new commits found on this branch compared to \"origin/main\". Please commit your changes.');\n+            }\n+\n+            console.log(chalk.blue(`   - Found ${diffContent.split('\\n').length} lines of changes`));\n+\n+            // Enhanced git context gathering\n+            const branchHistory = await this.getBranchHistory(branchName);\n+            const mergeBaseAnalysis = await this.analyzeMergeBase(branchName);\n+            const conflictDetection = await this.detectConflicts(branchName);\n+            const commitAnalysis = await this.analyzeCommitMessages(branchName);\n+            const branchValidation = this.validateBranchNaming(branchName);\n+\n+            return {\n+                branch: branchName,\n+                remoteUrl,\n+                diff: diffContent,\n+                diffStats: execSync('git diff --stat origin/main...HEAD').toString().trim(),\n+                commits: this.getRecentCommits(branchName),\n+                branchHistory,\n+                mergeBaseAnalysis,\n+                conflictDetection,\n+                commitAnalysis,\n+                branchValidation\n+            };\n+        } catch (error) {\n+            throw new Error(`Git context gathering failed: ${error.message}`);\n+        }\n+    }\n+\n+    /**\n+     * Handle unpushed commits by pushing them to remote\n+     * @param {string} branchName - Current branch name\n+     */\n+    async handleUnpushedCommits(branchName) {\n+        try {\n+            const unpushedCommits = execSync(`git log origin/${branchName}..HEAD --oneline`).toString().trim();\n+            if (unpushedCommits) {\n+                console.log(chalk.yellow('   - Found unpushed commits, pushing to remote...'));\n+                execSync(`git push origin ${branchName}`);\n+                console.log(chalk.green('   - Pushed latest commits to remote'));\n+            }\n+        } catch (pushError) {\n+            // Branch might not exist on remote yet\n+            console.log(chalk.yellow('   - Branch not on remote, pushing for first time...'));\n+            try {\n+                execSync(`git push -u origin ${branchName}`);\n+                console.log(chalk.green('   - Pushed branch to remote'));\n+            } catch (firstPushError) {\n+                console.log(chalk.red('   - Warning: Could not push to remote, continuing anyway...'));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get recent commits for the current branch\n+     * @param {string} branchName - Current branch name\n+     * @returns {Array} Array of commit objects\n+     */\n+    getRecentCommits(branchName) {\n+        try {\n+            const commitLog = execSync(`git log origin/main..${branchName} --oneline --no-merges`).toString().trim();\n+            if (!commitLog) return [];\n+            \n+            return commitLog.split('\\n').map(line => {\n+                const [hash, ...messageParts] = line.split(' ');\n+                return {\n+                    hash: hash,\n+                    message: messageParts.join(' ')\n+                };\n+            });\n+        } catch (error) {\n+            return [];\n+        }\n+    }\n+\n+    /**\n+     * Analyze code changes in the current diff with comprehensive analysis\n+     * @returns {Promise<Object>} Code analysis results\n+     */\n+    async analyzeCodeChanges() {\n+        console.log(chalk.blue('   - Analyzing code changes...'));\n+        \n+        try {\n+            const diffContent = execSync('git diff origin/main...HEAD').toString();\n+            const changedFiles = this.getChangedFiles();\n+            \n+            const analysis = {\n+                hasChanges: diffContent.length > 0,\n+                changedFiles,\n+                complexity: await this.analyzeCodeComplexity(changedFiles),\n+                security: await this.performSecurityAnalysis(changedFiles),\n+                dependencies: await this.analyzeDependencyChanges(),\n+                ast: await this.performASTAnalysis(changedFiles),\n+                metrics: this.calculateCodeMetrics(diffContent)\n+            };\n+            \n+            return analysis;\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Code analysis failed:', error.message));\n+            return {\n+                hasChanges: true,\n+                error: error.message,\n+                complexity: { score: 0, level: 'unknown' },\n+                security: { vulnerabilities: [] },\n+                dependencies: [],\n+                ast: {},\n+                metrics: {}\n+            };\n+        }\n+    }\n+\n+    /**\n+     * Get list of changed files from git diff\n+     * @returns {Array} Array of changed file objects\n+     */\n+    getChangedFiles() {\n+        try {\n+            const diffOutput = execSync('git diff --name-status origin/main...HEAD').toString().trim();\n+            if (!diffOutput) return [];\n+            \n+            return diffOutput.split('\\n').map(line => {\n+                const [status, ...pathParts] = line.split('\\t');\n+                const path = pathParts.join('\\t');\n+                return {\n+                    path,\n+                    status: this.mapGitStatus(status),\n+                    extension: path.split('.').pop(),\n+                    isJavaScript: /\\.(js|jsx|ts|tsx|mjs|cjs)$/.test(path),\n+                    isConfig: /\\.(json|yaml|yml|toml|ini)$/.test(path),\n+                    isTest: /\\.(test|spec)\\.(js|jsx|ts|tsx)$/.test(path)\n+                };\n+            });\n+        } catch (error) {\n+            return [];\n+        }\n+    }\n+\n+    /**\n+     * Map git status codes to readable names\n+     * @param {string} status - Git status code\n+     * @returns {string} Readable status\n+     */\n+    mapGitStatus(status) {\n+        const statusMap = {\n+            'A': 'added',\n+            'M': 'modified',\n+            'D': 'deleted',\n+            'R': 'renamed',\n+            'C': 'copied',\n+            'U': 'unmerged'\n+        };\n+        return statusMap[status] || status;\n+    }\n+\n+    /**\n+     * Analyze code complexity using AST parsing\n+     * @param {Array} changedFiles - Array of changed files\n+     * @returns {Promise<Object>} Complexity analysis\n+     */\n+    async analyzeCodeComplexity(changedFiles) {\n+        const fs = require('fs');\n+        const parser = require('@babel/parser');\n+        const traverse = require('@babel/traverse').default;\n+        \n+        const complexity = {\n+            totalScore: 0,\n+            averageScore: 0,\n+            level: 'low',\n+            files: [],\n+            issues: []\n+        };\n+        \n+        const jsFiles = changedFiles.filter(f => f.isJavaScript && f.status !== 'deleted');\n+        \n+        for (const file of jsFiles) {\n+            try {\n+                if (!fs.existsSync(file.path)) continue;\n+                \n+                const content = fs.readFileSync(file.path, 'utf8');\n+                const fileComplexity = await this.analyzeFileComplexity(file.path, content);\n+                \n+                complexity.files.push(fileComplexity);\n+                complexity.totalScore += fileComplexity.score;\n+                \n+                if (fileComplexity.score > 10) {\n+                    complexity.issues.push({\n+                        file: file.path,\n+                        type: 'high_complexity',\n+                        score: fileComplexity.score,\n+                        message: `High complexity score: ${fileComplexity.score}`\n+                    });\n+                }\n+            } catch (error) {\n+                complexity.issues.push({\n+                    file: file.path,\n+                    type: 'parse_error',\n+                    message: `Could not parse file: ${error.message}`\n+                });\n+            }\n+        }\n+        \n+        if (jsFiles.length > 0) {\n+            complexity.averageScore = complexity.totalScore / jsFiles.length;\n+            complexity.level = this.getComplexityLevel(complexity.averageScore);\n+        }\n+        \n+        return complexity;\n+    }\n+\n+    /**\n+     * Analyze complexity of a single file\n+     * @param {string} filePath - Path to the file\n+     * @param {string} content - File content\n+     * @returns {Promise<Object>} File complexity analysis\n+     */\n+    async analyzeFileComplexity(filePath, content) {\n+        const parser = require('@babel/parser');\n+        const traverse = require('@babel/traverse').default;\n+        \n+        let complexity = {\n+            file: filePath,\n+            score: 0,\n+            functions: 0,\n+            classes: 0,\n+            conditionals: 0,\n+            loops: 0,\n+            depth: 0,\n+            lines: content.split('\\n').length\n+        };\n+        \n+        try {\n+            const ast = parser.parse(content, {\n+                sourceType: 'module',\n+                allowImportExportEverywhere: true,\n+                allowReturnOutsideFunction: true,\n+                plugins: [\n+                    'jsx',\n+                    'typescript',\n+                    'decorators-legacy',\n+                    'classProperties',\n+                    'objectRestSpread',\n+                    'asyncGenerators',\n+                    'functionBind',\n+                    'exportDefaultFrom',\n+                    'exportNamespaceFrom',\n+                    'dynamicImport',\n+                    'nullishCoalescingOperator',\n+                    'optionalChaining'\n+                ]\n+            });\n+            \n+            let currentDepth = 0;\n+            let maxDepth = 0;\n+            \n+            traverse(ast, {\n+                enter(path) {\n+                    currentDepth++;\n+                    maxDepth = Math.max(maxDepth, currentDepth);\n+                },\n+                exit() {\n+                    currentDepth--;\n+                },\n+                FunctionDeclaration() { complexity.functions++; complexity.score += 1; },\n+                FunctionExpression() { complexity.functions++; complexity.score += 1; },\n+                ArrowFunctionExpression() { complexity.functions++; complexity.score += 1; },\n+                ClassDeclaration() { complexity.classes++; complexity.score += 2; },\n+                IfStatement() { complexity.conditionals++; complexity.score += 1; },\n+                ConditionalExpression() { complexity.conditionals++; complexity.score += 1; },\n+                SwitchStatement() { complexity.conditionals++; complexity.score += 1; },\n+                ForStatement() { complexity.loops++; complexity.score += 2; },\n+                WhileStatement() { complexity.loops++; complexity.score += 2; },\n+                DoWhileStatement() { complexity.loops++; complexity.score += 2; },\n+                ForInStatement() { complexity.loops++; complexity.score += 2; },\n+                ForOfStatement() { complexity.loops++; complexity.score += 2; }\n+            });\n+            \n+            complexity.depth = maxDepth;\n+            complexity.score += Math.floor(maxDepth / 5); // Add complexity for deep nesting\n+            \n+        } catch (error) {\n+            // If parsing fails, estimate complexity from basic metrics\n+            complexity.score = Math.floor(complexity.lines / 20);\n+        }\n+        \n+        return complexity;\n+    }\n+\n+    /**\n+     * Get complexity level from score\n+     * @param {number} score - Complexity score\n+     * @returns {string} Complexity level\n+     */\n+    getComplexityLevel(score) {\n+        if (score <= 5) return 'low';\n+        if (score <= 10) return 'medium';\n+        if (score <= 20) return 'high';\n+        return 'very_high';\n+    }\n+\n+    /**\n+     * Perform security analysis on changed files\n+     * @param {Array} changedFiles - Array of changed files\n+     * @returns {Promise<Object>} Security analysis results\n+     */\n+    async performSecurityAnalysis(changedFiles) {\n+        console.log(chalk.blue('   - Performing security analysis...'));\n+        \n+        const security = {\n+            vulnerabilities: [],\n+            warnings: [],\n+            riskLevel: 'low',\n+            issues: []\n+        };\n+        \n+        // Check for common security patterns in code\n+        for (const file of changedFiles) {\n+            if (file.isJavaScript && file.status !== 'deleted') {\n+                const fileVulns = await this.scanFileForVulnerabilities(file.path);\n+                security.vulnerabilities.push(...fileVulns);\n+            }\n+        }\n+        \n+        // Check dependency vulnerabilities\n+        const depVulns = await this.scanDependencyVulnerabilities();\n+        security.vulnerabilities.push(...depVulns);\n+        \n+        // Assess overall risk level\n+        security.riskLevel = this.assessSecurityRisk(security.vulnerabilities);\n+        \n+        return security;\n+    }\n+\n+    /**\n+     * Scan a file for security vulnerabilities\n+     * @param {string} filePath - Path to the file\n+     * @returns {Promise<Array>} Array of vulnerabilities found\n+     */\n+    async scanFileForVulnerabilities(filePath) {\n+        const fs = require('fs');\n+        const vulnerabilities = [];\n+        \n+        try {\n+            if (!fs.existsSync(filePath)) return [];\n+            \n+            const content = fs.readFileSync(filePath, 'utf8');\n+            \n+            // Common security patterns to check\n+            const securityPatterns = [\n+                {\n+                    pattern: /eval\\s*\\(/g,\n+                    type: 'code_injection',\n+                    severity: 'high',\n+                    message: 'Use of eval() can lead to code injection'\n+                },\n+                {\n+                    pattern: /innerHTML\\s*=/g,\n+                    type: 'xss',\n+                    severity: 'medium',\n+                    message: 'innerHTML assignment can lead to XSS'\n+                },\n+                {\n+                    pattern: /document\\.write\\s*\\(/g,\n+                    type: 'xss',\n+                    severity: 'medium',\n+                    message: 'document.write can lead to XSS'\n+                },\n+                {\n+                    pattern: /password\\s*[:=]\\s*['\"]/gi,\n+                    type: 'hardcoded_secret',\n+                    severity: 'high',\n+                    message: 'Hardcoded password detected'\n+                },\n+                {\n+                    pattern: /api[_-]?key\\s*[:=]\\s*['\"]/gi,\n+                    type: 'hardcoded_secret',\n+                    severity: 'high',\n+                    message: 'Hardcoded API key detected'\n+                },\n+                {\n+                    pattern: /token\\s*[:=]\\s*['\"]/gi,\n+                    type: 'hardcoded_secret',\n+                    severity: 'medium',\n+                    message: 'Hardcoded token detected'\n+                },\n+                {\n+                    pattern: /Math\\.random\\(\\)/g,\n+                    type: 'weak_random',\n+                    severity: 'low',\n+                    message: 'Math.random() is not cryptographically secure'\n+                }\n+            ];\n+            \n+            for (const { pattern, type, severity, message } of securityPatterns) {\n+                const matches = content.matchAll(pattern);\n+                for (const match of matches) {\n+                    const lineNumber = content.substring(0, match.index).split('\\n').length;\n+                    vulnerabilities.push({\n+                        file: filePath,\n+                        type,\n+                        severity,\n+                        message,\n+                        line: lineNumber,\n+                        code: match[0]\n+                    });\n+                }\n+            }\n+            \n+        } catch (error) {\n+            // Ignore file read errors\n+        }\n+        \n+        return vulnerabilities;\n+    }\n+\n+    /**\n+     * Scan for dependency vulnerabilities\n+     * @returns {Promise<Array>} Array of dependency vulnerabilities\n+     */\n+    async scanDependencyVulnerabilities() {\n+        const vulnerabilities = [];\n+        \n+        try {\n+            // Run npm audit to check for known vulnerabilities\n+            const auditOutput = execSync('npm audit --json', { stdio: 'pipe' }).toString();\n+            const auditData = JSON.parse(auditOutput);\n+            \n+            if (auditData.vulnerabilities) {\n+                for (const [packageName, vulnData] of Object.entries(auditData.vulnerabilities)) {\n+                    vulnerabilities.push({\n+                        type: 'dependency_vulnerability',\n+                        package: packageName,\n+                        severity: vulnData.severity,\n+                        message: `Vulnerability in ${packageName}: ${vulnData.title || 'Unknown issue'}`,\n+                        via: vulnData.via\n+                    });\n+                }\n+            }\n+        } catch (error) {\n+            // npm audit might fail if no package-lock.json or other issues\n+            // This is not critical, so we continue\n+        }\n+        \n+        return vulnerabilities;\n+    }\n+\n+    /**\n+     * Assess overall security risk level\n+     * @param {Array} vulnerabilities - Array of vulnerabilities\n+     * @returns {string} Risk level\n+     */\n+    assessSecurityRisk(vulnerabilities) {\n+        const highSeverity = vulnerabilities.filter(v => v.severity === 'high').length;\n+        const mediumSeverity = vulnerabilities.filter(v => v.severity === 'medium').length;\n+        \n+        if (highSeverity > 0) return 'high';\n+        if (mediumSeverity > 2) return 'medium';\n+        if (vulnerabilities.length > 0) return 'low';\n+        return 'none';\n+    }\n+\n+    /**\n+     * Analyze dependency changes\n+     * @returns {Promise<Object>} Dependency analysis results\n+     */\n+    async analyzeDependencyChanges() {\n+        console.log(chalk.blue('   - Analyzing dependency changes...'));\n+        \n+        const fs = require('fs');\n+        const semver = require('semver');\n+        \n+        const analysis = {\n+            added: [],\n+            updated: [],\n+            removed: [],\n+            devDependencies: [],\n+            securityUpdates: [],\n+            breakingChanges: []\n+        };\n+        \n+        try {\n+            // Check if package.json was modified\n+            const packageJsonDiff = execSync('git diff origin/main...HEAD -- package.json').toString();\n+            \n+            if (packageJsonDiff) {\n+                const changes = this.parsePackageJsonDiff(packageJsonDiff);\n+                analysis.added = changes.added;\n+                analysis.updated = changes.updated;\n+                analysis.removed = changes.removed;\n+                analysis.devDependencies = changes.devDependencies;\n+                \n+                // Analyze version changes for breaking changes\n+                for (const update of changes.updated) {\n+                    if (semver.major(update.newVersion) > semver.major(update.oldVersion)) {\n+                        analysis.breakingChanges.push({\n+                            package: update.package,\n+                            oldVersion: update.oldVersion,\n+                            newVersion: update.newVersion,\n+                            type: 'major_version_bump'\n+                        });\n+                    }\n+                }\n+            }\n+            \n+        } catch (error) {\n+            // If we can't analyze package.json changes, that's okay\n+        }\n+        \n+        return analysis;\n+    }\n+\n+    /**\n+     * Parse package.json diff to extract dependency changes\n+     * @param {string} diff - Git diff content for package.json\n+     * @returns {Object} Parsed dependency changes\n+     */\n+    parsePackageJsonDiff(diff) {\n+        const changes = {\n+            added: [],\n+            updated: [],\n+            removed: [],\n+            devDependencies: []\n+        };\n+        \n+        const lines = diff.split('\\n');\n+        \n+        for (let i = 0; i < lines.length; i++) {\n+            const line = lines[i];\n+            \n+            if (line.startsWith('+') && line.includes(':') && line.includes('\"')) {\n+                const match = line.match(/\\+\\s*\"([^\"]+)\":\\s*\"([^\"]+)\"/);\n+                if (match) {\n+                    const [, packageName, version] = match;\n+                    changes.added.push({ package: packageName, version });\n+                }\n+            } else if (line.startsWith('-') && line.includes(':') && line.includes('\"')) {\n+                const match = line.match(/-\\s*\"([^\"]+)\":\\s*\"([^\"]+)\"/);\n+                if (match) {\n+                    const [, packageName, version] = match;\n+                    // Check if this is an update (next line is addition of same package)\n+                    const nextLine = lines[i + 1];\n+                    if (nextLine && nextLine.startsWith('+')) {\n+                        const nextMatch = nextLine.match(/\\+\\s*\"([^\"]+)\":\\s*\"([^\"]+)\"/);\n+                        if (nextMatch && nextMatch[1] === packageName) {\n+                            changes.updated.push({\n+                                package: packageName,\n+                                oldVersion: version,\n+                                newVersion: nextMatch[2]\n+                            });\n+                            i++; // Skip next line as we've processed it\n+                            continue;\n+                        }\n+                    }\n+                    changes.removed.push({ package: packageName, version });\n+                }\n+            }\n+        }\n+        \n+        return changes;\n+    }\n+\n+    /**\n+     * Perform AST analysis on changed JavaScript/TypeScript files\n+     * @param {Array} changedFiles - Array of changed files\n+     * @returns {Promise<Object>} AST analysis results\n+     */\n+    async performASTAnalysis(changedFiles) {\n+        const fs = require('fs');\n+        const parser = require('@babel/parser');\n+        const traverse = require('@babel/traverse').default;\n+        \n+        const analysis = {\n+            totalFiles: 0,\n+            parsedFiles: 0,\n+            functions: [],\n+            classes: [],\n+            imports: [],\n+            exports: [],\n+            issues: []\n+        };\n+        \n+        const jsFiles = changedFiles.filter(f => f.isJavaScript && f.status !== 'deleted');\n+        analysis.totalFiles = jsFiles.length;\n+        \n+        for (const file of jsFiles) {\n+            try {\n+                if (!fs.existsSync(file.path)) continue;\n+                \n+                const content = fs.readFileSync(file.path, 'utf8');\n+                const fileAnalysis = await this.analyzeFileAST(file.path, content);\n+                \n+                analysis.functions.push(...fileAnalysis.functions);\n+                analysis.classes.push(...fileAnalysis.classes);\n+                analysis.imports.push(...fileAnalysis.imports);\n+                analysis.exports.push(...fileAnalysis.exports);\n+                analysis.parsedFiles++;\n+                \n+            } catch (error) {\n+                analysis.issues.push({\n+                    file: file.path,\n+                    type: 'ast_parse_error',\n+                    message: error.message\n+                });\n+            }\n+        }\n+        \n+        return analysis;\n+    }\n+\n+    /**\n+     * Analyze AST of a single file\n+     * @param {string} filePath - Path to the file\n+     * @param {string} content - File content\n+     * @returns {Promise<Object>} File AST analysis\n+     */\n+    async analyzeFileAST(filePath, content) {\n+        const parser = require('@babel/parser');\n+        const traverse = require('@babel/traverse').default;\n+        \n+        const analysis = {\n+            functions: [],\n+            classes: [],\n+            imports: [],\n+            exports: []\n+        };\n+        \n+        const ast = parser.parse(content, {\n+            sourceType: 'module',\n+            allowImportExportEverywhere: true,\n+            allowReturnOutsideFunction: true,\n+            plugins: [\n+                'jsx',\n+                'typescript',\n+                'decorators-legacy',\n+                'classProperties',\n+                'objectRestSpread',\n+                'asyncGenerators',\n+                'functionBind',\n+                'exportDefaultFrom',\n+                'exportNamespaceFrom',\n+                'dynamicImport',\n+                'nullishCoalescingOperator',\n+                'optionalChaining'\n+            ]\n+        });\n+        \n+        traverse(ast, {\n+            FunctionDeclaration(path) {\n+                analysis.functions.push({\n+                    file: filePath,\n+                    name: path.node.id ? path.node.id.name : 'anonymous',\n+                    type: 'function',\n+                    async: path.node.async,\n+                    params: path.node.params.length,\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            },\n+            FunctionExpression(path) {\n+                analysis.functions.push({\n+                    file: filePath,\n+                    name: 'anonymous',\n+                    type: 'function_expression',\n+                    async: path.node.async,\n+                    params: path.node.params.length,\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            },\n+            ArrowFunctionExpression(path) {\n+                analysis.functions.push({\n+                    file: filePath,\n+                    name: 'arrow_function',\n+                    type: 'arrow_function',\n+                    async: path.node.async,\n+                    params: path.node.params.length,\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            },\n+            ClassDeclaration(path) {\n+                analysis.classes.push({\n+                    file: filePath,\n+                    name: path.node.id ? path.node.id.name : 'anonymous',\n+                    superClass: path.node.superClass ? path.node.superClass.name : null,\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            },\n+            ImportDeclaration(path) {\n+                analysis.imports.push({\n+                    file: filePath,\n+                    source: path.node.source.value,\n+                    specifiers: path.node.specifiers.map(spec => ({\n+                        type: spec.type,\n+                        local: spec.local.name,\n+                        imported: spec.imported ? spec.imported.name : null\n+                    })),\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            },\n+            ExportDeclaration(path) {\n+                analysis.exports.push({\n+                    file: filePath,\n+                    type: path.node.type,\n+                    line: path.node.loc ? path.node.loc.start.line : null\n+                });\n+            }\n+        });\n+        \n+        return analysis;\n+    }\n+\n+    /**\n+     * Calculate basic code metrics from diff content\n+     * @param {string} diffContent - Git diff content\n+     * @returns {Object} Code metrics\n+     */\n+    calculateCodeMetrics(diffContent) {\n+        const lines = diffContent.split('\\n');\n+        const metrics = {\n+            totalLines: lines.length,\n+            addedLines: 0,\n+            removedLines: 0,\n+            modifiedFiles: 0,\n+            addedFiles: 0,\n+            removedFiles: 0\n+        };\n+        \n+        for (const line of lines) {\n+            if (line.startsWith('+') && !line.startsWith('+++')) {\n+                metrics.addedLines++;\n+            } else if (line.startsWith('-') && !line.startsWith('---')) {\n+                metrics.removedLines++;\n+            } else if (line.startsWith('diff --git')) {\n+                metrics.modifiedFiles++;\n+            }\n+        }\n+        \n+        return metrics;\n+    }\n+\n+    /**\n+     * Analyze project structure and configuration with comprehensive analysis\n+     * @returns {Promise<Object>} Project analysis results\n+     */\n+    async analyzeProjectStructure() {\n+        console.log(chalk.blue('   - Analyzing project structure...'));\n+        \n+        try {\n+            const structure = await this.analyzeDirectoryStructure();\n+            const configuration = await this.analyzeConfigurationFiles();\n+            const projectType = await this.detectProjectType(configuration);\n+            const framework = await this.detectFramework(configuration);\n+            const testCoverage = await this.analyzeTestCoverage();\n+            const buildSystem = await this.analyzeBuildSystem(configuration);\n+            \n+            return {\n+                structure,\n+                configuration,\n+                projectType,\n+                framework,\n+                testCoverage,\n+                buildSystem,\n+                metadata: {\n+                    hasTests: structure.testFiles > 0,\n+                    hasDocumentation: structure.documentationFiles > 0,\n+                    hasCI: structure.ciFiles > 0,\n+                    packageManager: this.detectPackageManager(),\n+                    nodeVersion: this.detectNodeVersion(configuration)\n+                }\n+            };\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Project structure analysis failed:', error.message));\n+            return {\n+                error: error.message,\n+                structure: {},\n+                configuration: {},\n+                metadata: {}\n+            };\n+        }\n+    }\n+\n+    /**\n+     * Analyze directory structure and file organization\n+     * @returns {Promise<Object>} Directory structure analysis\n+     */\n+    async analyzeDirectoryStructure() {\n+        const fs = require('fs');\n+        const path = require('path');\n+        \n+        const structure = {\n+            totalFiles: 0,\n+            directories: [],\n+            fileTypes: {},\n+            testFiles: 0,\n+            documentationFiles: 0,\n+            configFiles: 0,\n+            ciFiles: 0,\n+            sourceFiles: 0,\n+            depth: 0\n+        };\n+        \n+        const analyzeDirectory = (dirPath, currentDepth = 0) => {\n+            if (currentDepth > 10) return; // Prevent infinite recursion\n+            \n+            structure.depth = Math.max(structure.depth, currentDepth);\n+            \n+            try {\n+                const items = fs.readdirSync(dirPath);\n+                \n+                for (const item of items) {\n+                    const fullPath = path.join(dirPath, item);\n+                    const relativePath = path.relative('.', fullPath);\n+                    \n+                    // Skip node_modules and other common ignore patterns\n+                    if (this.shouldSkipPath(relativePath)) continue;\n+                    \n+                    const stats = fs.statSync(fullPath);\n+                    \n+                    if (stats.isDirectory()) {\n+                        structure.directories.push({\n+                            path: relativePath,\n+                            depth: currentDepth\n+                        });\n+                        analyzeDirectory(fullPath, currentDepth + 1);\n+                    } else {\n+                        structure.totalFiles++;\n+                        \n+                        const ext = path.extname(item);\n+                        structure.fileTypes[ext] = (structure.fileTypes[ext] || 0) + 1;\n+                        \n+                        // Categorize files\n+                        if (this.isTestFile(relativePath)) {\n+                            structure.testFiles++;\n+                        } else if (this.isDocumentationFile(relativePath)) {\n+                            structure.documentationFiles++;\n+                        } else if (this.isConfigFile(relativePath)) {\n+                            structure.configFiles++;\n+                        } else if (this.isCIFile(relativePath)) {\n+                            structure.ciFiles++;\n+                        } else if (this.isSourceFile(relativePath)) {\n+                            structure.sourceFiles++;\n+                        }\n+                    }\n+                }\n+            } catch (error) {\n+                // Skip directories we can't read\n+            }\n+        };\n+        \n+        analyzeDirectory('.');\n+        return structure;\n+    }\n+\n+    /**\n+     * Check if a path should be skipped during analysis\n+     * @param {string} path - File or directory path\n+     * @returns {boolean} Whether to skip this path\n+     */\n+    shouldSkipPath(path) {\n+        const skipPatterns = [\n+            'node_modules',\n+            '.git',\n+            '.next',\n+            '.nuxt',\n+            'dist',\n+            'build',\n+            'coverage',\n+            '.nyc_output',\n+            '.cache',\n+            'tmp',\n+            'temp'\n+        ];\n+        \n+        return skipPatterns.some(pattern => path.includes(pattern));\n+    }\n+\n+    /**\n+     * Check if a file is a test file\n+     * @param {string} filePath - File path\n+     * @returns {boolean} Whether it's a test file\n+     */\n+    isTestFile(filePath) {\n+        return /\\.(test|spec)\\.(js|jsx|ts|tsx|mjs)$/.test(filePath) ||\n+               filePath.includes('__tests__') ||\n+               filePath.includes('/test/') ||\n+               filePath.includes('/tests/');\n+    }\n+\n+    /**\n+     * Check if a file is a documentation file\n+     * @param {string} filePath - File path\n+     * @returns {boolean} Whether it's a documentation file\n+     */\n+    isDocumentationFile(filePath) {\n+        return /\\.(md|txt|rst|adoc)$/i.test(filePath) ||\n+               filePath.toLowerCase().includes('readme') ||\n+               filePath.toLowerCase().includes('changelog') ||\n+               filePath.includes('/docs/');\n+    }\n+\n+    /**\n+     * Check if a file is a configuration file\n+     * @param {string} filePath - File path\n+     * @returns {boolean} Whether it's a configuration file\n+     */\n+    isConfigFile(filePath) {\n+        const configPatterns = [\n+            /\\.(json|yaml|yml|toml|ini|conf)$/,\n+            /^\\..*rc$/,\n+            /^\\..*ignore$/,\n+            /package\\.json$/,\n+            /tsconfig\\.json$/,\n+            /webpack\\.config\\./,\n+            /babel\\.config\\./,\n+            /jest\\.config\\./,\n+            /eslint\\.config\\./\n+        ];\n+        \n+        return configPatterns.some(pattern => pattern.test(filePath));\n+    }\n+\n+    /**\n+     * Check if a file is a CI/CD file\n+     * @param {string} filePath - File path\n+     * @returns {boolean} Whether it's a CI/CD file\n+     */\n+    isCIFile(filePath) {\n+        return filePath.includes('.github/workflows') ||\n+               filePath.includes('.gitlab-ci') ||\n+               filePath.includes('Jenkinsfile') ||\n+               filePath.includes('.travis.yml') ||\n+               filePath.includes('azure-pipelines') ||\n+               filePath.includes('.circleci');\n+    }\n+\n+    /**\n+     * Check if a file is a source code file\n+     * @param {string} filePath - File path\n+     * @returns {boolean} Whether it's a source file\n+     */\n+    isSourceFile(filePath) {\n+        return /\\.(js|jsx|ts|tsx|mjs|cjs|vue|svelte|py|java|go|rs|cpp|c|h)$/.test(filePath) &&\n+               !this.isTestFile(filePath);\n+    }\n+\n+    /**\n+     * Analyze configuration files in the project\n+     * @returns {Promise<Object>} Configuration analysis\n+     */\n+    async analyzeConfigurationFiles() {\n+        const fs = require('fs');\n+        const configuration = {\n+            packageJson: null,\n+            tsconfig: null,\n+            eslint: null,\n+            prettier: null,\n+            jest: null,\n+            webpack: null,\n+            babel: null,\n+            vite: null,\n+            nextConfig: null,\n+            tailwind: null,\n+            docker: null\n+        };\n+        \n+        // Analyze package.json\n+        if (fs.existsSync('package.json')) {\n+            try {\n+                configuration.packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n+            } catch (error) {\n+                configuration.packageJson = { error: 'Invalid JSON' };\n+            }\n+        }\n+        \n+        // Analyze TypeScript config\n+        const tsconfigFiles = ['tsconfig.json', 'tsconfig.build.json', 'tsconfig.app.json'];\n+        for (const file of tsconfigFiles) {\n+            if (fs.existsSync(file)) {\n+                try {\n+                    configuration.tsconfig = JSON.parse(fs.readFileSync(file, 'utf8'));\n+                    break;\n+                } catch (error) {\n+                    configuration.tsconfig = { error: 'Invalid JSON' };\n+                }\n+            }\n+        }\n+        \n+        // Analyze ESLint config\n+        const eslintFiles = ['.eslintrc.json', '.eslintrc.js', '.eslintrc.yml', 'eslint.config.js'];\n+        for (const file of eslintFiles) {\n+            if (fs.existsSync(file)) {\n+                configuration.eslint = { configFile: file, exists: true };\n+                break;\n+            }\n+        }\n+        \n+        // Analyze Prettier config\n+        const prettierFiles = ['.prettierrc', '.prettierrc.json', '.prettierrc.js', 'prettier.config.js'];\n+        for (const file of prettierFiles) {\n+            if (fs.existsSync(file)) {\n+                configuration.prettier = { configFile: file, exists: true };\n+                break;\n+            }\n+        }\n+        \n+        // Analyze Jest config\n+        const jestFiles = ['jest.config.js', 'jest.config.json', 'jest.config.ts'];\n+        for (const file of jestFiles) {\n+            if (fs.existsSync(file)) {\n+                configuration.jest = { configFile: file, exists: true };\n+                break;\n+            }\n+        }\n+        \n+        // Check for other common config files\n+        if (fs.existsSync('webpack.config.js')) {\n+            configuration.webpack = { exists: true };\n+        }\n+        \n+        if (fs.existsSync('babel.config.js') || fs.existsSync('.babelrc')) {\n+            configuration.babel = { exists: true };\n+        }\n+        \n+        if (fs.existsSync('vite.config.js') || fs.existsSync('vite.config.ts')) {\n+            configuration.vite = { exists: true };\n+        }\n+        \n+        if (fs.existsSync('next.config.js')) {\n+            configuration.nextConfig = { exists: true };\n+        }\n+        \n+        if (fs.existsSync('tailwind.config.js')) {\n+            configuration.tailwind = { exists: true };\n+        }\n+        \n+        if (fs.existsSync('Dockerfile') || fs.existsSync('docker-compose.yml')) {\n+            configuration.docker = { exists: true };\n+        }\n+        \n+        return configuration;\n+    }\n+\n+    /**\n+     * Detect project type based on configuration and structure\n+     * @param {Object} configuration - Configuration analysis\n+     * @returns {Promise<Object>} Project type detection\n+     */\n+    async detectProjectType(configuration) {\n+        const projectType = {\n+            primary: 'unknown',\n+            secondary: [],\n+            confidence: 0,\n+            indicators: []\n+        };\n+        \n+        const pkg = configuration.packageJson;\n+        if (!pkg) return projectType;\n+        \n+        // Check for specific project types\n+        const typeIndicators = [\n+            {\n+                type: 'react-app',\n+                indicators: ['react', 'react-dom', 'react-scripts'],\n+                confidence: 0.9\n+            },\n+            {\n+                type: 'next-app',\n+                indicators: ['next'],\n+                confidence: 0.95\n+            },\n+            {\n+                type: 'vue-app',\n+                indicators: ['vue', '@vue/cli-service'],\n+                confidence: 0.9\n+            },\n+            {\n+                type: 'angular-app',\n+                indicators: ['@angular/core', '@angular/cli'],\n+                confidence: 0.9\n+            },\n+            {\n+                type: 'express-api',\n+                indicators: ['express', 'cors', 'helmet'],\n+                confidence: 0.8\n+            },\n+            {\n+                type: 'fastify-api',\n+                indicators: ['fastify'],\n+                confidence: 0.9\n+            },\n+            {\n+                type: 'node-cli',\n+                indicators: ['commander', 'yargs', 'inquirer'],\n+                confidence: 0.7\n+            },\n+            {\n+                type: 'electron-app',\n+                indicators: ['electron'],\n+                confidence: 0.95\n+            },\n+            {\n+                type: 'react-native',\n+                indicators: ['react-native', '@react-native-community'],\n+                confidence: 0.9\n+            },\n+            {\n+                type: 'library',\n+                indicators: ['rollup', 'microbundle', 'tsdx'],\n+                confidence: 0.8\n+            }\n+        ];\n+        \n+        const allDeps = {\n+            ...pkg.dependencies,\n+            ...pkg.devDependencies,\n+            ...pkg.peerDependencies\n+        };\n+        \n+        for (const { type, indicators, confidence } of typeIndicators) {\n+            const matches = indicators.filter(indicator => \n+                Object.keys(allDeps).some(dep => dep.includes(indicator))\n+            );\n+            \n+            if (matches.length > 0) {\n+                const matchConfidence = (matches.length / indicators.length) * confidence;\n+                \n+                if (matchConfidence > projectType.confidence) {\n+                    projectType.primary = type;\n+                    projectType.confidence = matchConfidence;\n+                }\n+                \n+                projectType.secondary.push({\n+                    type,\n+                    confidence: matchConfidence,\n+                    matches\n+                });\n+                \n+                projectType.indicators.push(...matches);\n+            }\n+        }\n+        \n+        // Check for TypeScript\n+        if (configuration.tsconfig || allDeps.typescript) {\n+            projectType.secondary.push({\n+                type: 'typescript',\n+                confidence: 0.9,\n+                matches: ['typescript']\n+            });\n+        }\n+        \n+        return projectType;\n+    }\n+\n+    /**\n+     * Detect framework and tools used in the project\n+     * @param {Object} configuration - Configuration analysis\n+     * @returns {Promise<Object>} Framework detection\n+     */\n+    async detectFramework(configuration) {\n+        const framework = {\n+            frontend: [],\n+            backend: [],\n+            testing: [],\n+            build: [],\n+            styling: [],\n+            database: []\n+        };\n+        \n+        const pkg = configuration.packageJson;\n+        if (!pkg) return framework;\n+        \n+        const allDeps = {\n+            ...pkg.dependencies,\n+            ...pkg.devDependencies\n+        };\n+        \n+        // Frontend frameworks\n+        const frontendFrameworks = [\n+            { name: 'React', indicators: ['react', 'react-dom'] },\n+            { name: 'Vue', indicators: ['vue'] },\n+            { name: 'Angular', indicators: ['@angular/core'] },\n+            { name: 'Svelte', indicators: ['svelte'] },\n+            { name: 'Next.js', indicators: ['next'] },\n+            { name: 'Nuxt.js', indicators: ['nuxt'] },\n+            { name: 'Gatsby', indicators: ['gatsby'] }\n+        ];\n+        \n+        // Backend frameworks\n+        const backendFrameworks = [\n+            { name: 'Express', indicators: ['express'] },\n+            { name: 'Fastify', indicators: ['fastify'] },\n+            { name: 'Koa', indicators: ['koa'] },\n+            { name: 'NestJS', indicators: ['@nestjs/core'] },\n+            { name: 'Hapi', indicators: ['@hapi/hapi'] }\n+        ];\n+        \n+        // Testing frameworks\n+        const testingFrameworks = [\n+            { name: 'Jest', indicators: ['jest'] },\n+            { name: 'Mocha', indicators: ['mocha'] },\n+            { name: 'Vitest', indicators: ['vitest'] },\n+            { name: 'Cypress', indicators: ['cypress'] },\n+            { name: 'Playwright', indicators: ['@playwright/test'] },\n+            { name: 'Testing Library', indicators: ['@testing-library/react', '@testing-library/vue'] }\n+        ];\n+        \n+        // Build tools\n+        const buildTools = [\n+            { name: 'Webpack', indicators: ['webpack'] },\n+            { name: 'Vite', indicators: ['vite'] },\n+            { name: 'Rollup', indicators: ['rollup'] },\n+            { name: 'Parcel', indicators: ['parcel'] },\n+            { name: 'esbuild', indicators: ['esbuild'] }\n+        ];\n+        \n+        // Styling frameworks\n+        const stylingFrameworks = [\n+            { name: 'Tailwind CSS', indicators: ['tailwindcss'] },\n+            { name: 'Bootstrap', indicators: ['bootstrap'] },\n+            { name: 'Material-UI', indicators: ['@mui/material', '@material-ui/core'] },\n+            { name: 'Ant Design', indicators: ['antd'] },\n+            { name: 'Styled Components', indicators: ['styled-components'] },\n+            { name: 'Emotion', indicators: ['@emotion/react'] }\n+        ];\n+        \n+        // Database libraries\n+        const databaseLibs = [\n+            { name: 'Mongoose', indicators: ['mongoose'] },\n+            { name: 'Prisma', indicators: ['prisma', '@prisma/client'] },\n+            { name: 'TypeORM', indicators: ['typeorm'] },\n+            { name: 'Sequelize', indicators: ['sequelize'] },\n+            { name: 'Knex', indicators: ['knex'] }\n+        ];\n+        \n+        const detectFrameworks = (frameworks, category) => {\n+            for (const { name, indicators } of frameworks) {\n+                const found = indicators.some(indicator => allDeps[indicator]);\n+                if (found) {\n+                    framework[category].push(name);\n+                }\n+            }\n+        };\n+        \n+        detectFrameworks(frontendFrameworks, 'frontend');\n+        detectFrameworks(backendFrameworks, 'backend');\n+        detectFrameworks(testingFrameworks, 'testing');\n+        detectFrameworks(buildTools, 'build');\n+        detectFrameworks(stylingFrameworks, 'styling');\n+        detectFrameworks(databaseLibs, 'database');\n+        \n+        return framework;\n+    }\n+\n+    /**\n+     * Analyze test coverage and testing setup\n+     * @returns {Promise<Object>} Test coverage analysis\n+     */\n+    async analyzeTestCoverage() {\n+        console.log(chalk.blue('   - Analyzing test coverage...'));\n+        \n+        const fs = require('fs');\n+        const coverage = {\n+            hasTests: false,\n+            testFiles: 0,\n+            coverageReports: [],\n+            testFrameworks: [],\n+            coverageThreshold: null,\n+            lastCoverageRun: null,\n+            summary: null\n+        };\n+        \n+        // Count test files using Node.js (cross-platform)\n+        try {\n+            coverage.testFiles = this.countTestFilesManually();\n+            coverage.hasTests = coverage.testFiles > 0;\n+        } catch (error) {\n+            coverage.testFiles = 0;\n+            coverage.hasTests = false;\n+        }\n+        \n+        // Check for coverage reports\n+        const coverageFiles = [\n+            'coverage/lcov-report/index.html',\n+            'coverage/index.html',\n+            'coverage.json',\n+            '.nyc_output'\n+        ];\n+        \n+        for (const file of coverageFiles) {\n+            if (fs.existsSync(file)) {\n+                coverage.coverageReports.push(file);\n+                \n+                // Try to get last modified time\n+                try {\n+                    const stats = fs.statSync(file);\n+                    if (!coverage.lastCoverageRun || stats.mtime > coverage.lastCoverageRun) {\n+                        coverage.lastCoverageRun = stats.mtime;\n+                    }\n+                } catch (error) {\n+                    // Ignore stat errors\n+                }\n+            }\n+        }\n+        \n+        // Try to read coverage summary\n+        if (fs.existsSync('coverage/coverage-summary.json')) {\n+            try {\n+                const summaryData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));\n+                coverage.summary = summaryData.total;\n+            } catch (error) {\n+                // Ignore JSON parse errors\n+            }\n+        }\n+        \n+        // Check package.json for test scripts and coverage config\n+        try {\n+            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n+            \n+            if (pkg.scripts) {\n+                if (pkg.scripts.test) coverage.testFrameworks.push('npm test');\n+                if (pkg.scripts['test:coverage']) coverage.testFrameworks.push('coverage script');\n+            }\n+            \n+            if (pkg.jest && pkg.jest.coverageThreshold) {\n+                coverage.coverageThreshold = pkg.jest.coverageThreshold;\n+            }\n+        } catch (error) {\n+            // Ignore package.json read errors\n+        }\n+        \n+        return coverage;\n+    }\n+\n+    /**\n+     * Manually count test files as fallback\n+     * @returns {number} Number of test files\n+     */\n+    countTestFilesManually() {\n+        const fs = require('fs');\n+        const path = require('path');\n+        let count = 0;\n+        \n+        const countInDirectory = (dirPath) => {\n+            try {\n+                const items = fs.readdirSync(dirPath);\n+                \n+                for (const item of items) {\n+                    const fullPath = path.join(dirPath, item);\n+                    \n+                    if (this.shouldSkipPath(fullPath)) continue;\n+                    \n+                    const stats = fs.statSync(fullPath);\n+                    \n+                    if (stats.isDirectory()) {\n+                        countInDirectory(fullPath);\n+                    } else if (this.isTestFile(fullPath)) {\n+                        count++;\n+                    }\n+                }\n+            } catch (error) {\n+                // Skip directories we can't read\n+            }\n+        };\n+        \n+        countInDirectory('.');\n+        return count;\n+    }\n+\n+    /**\n+     * Analyze build system and tooling\n+     * @param {Object} configuration - Configuration analysis\n+     * @returns {Promise<Object>} Build system analysis\n+     */\n+    async analyzeBuildSystem(configuration) {\n+        const buildSystem = {\n+            bundler: null,\n+            taskRunner: null,\n+            packageManager: this.detectPackageManager(),\n+            scripts: [],\n+            buildOutput: null,\n+            hasCI: false\n+        };\n+        \n+        const pkg = configuration.packageJson;\n+        if (pkg && pkg.scripts) {\n+            buildSystem.scripts = Object.keys(pkg.scripts);\n+        }\n+        \n+        // Detect bundler\n+        if (configuration.webpack) buildSystem.bundler = 'webpack';\n+        else if (configuration.vite) buildSystem.bundler = 'vite';\n+        else if (pkg && pkg.devDependencies) {\n+            if (pkg.devDependencies.rollup) buildSystem.bundler = 'rollup';\n+            else if (pkg.devDependencies.parcel) buildSystem.bundler = 'parcel';\n+            else if (pkg.devDependencies.esbuild) buildSystem.bundler = 'esbuild';\n+        }\n+        \n+        // Detect task runner\n+        if (pkg && pkg.scripts) {\n+            if (pkg.scripts.build) buildSystem.taskRunner = 'npm scripts';\n+        }\n+        \n+        // Check for build output directories\n+        const fs = require('fs');\n+        const buildDirs = ['dist', 'build', '.next', 'out'];\n+        for (const dir of buildDirs) {\n+            if (fs.existsSync(dir)) {\n+                buildSystem.buildOutput = dir;\n+                break;\n+            }\n+        }\n+        \n+        // Check for CI configuration\n+        const ciFiles = ['.github/workflows', '.gitlab-ci.yml', 'Jenkinsfile', '.travis.yml'];\n+        buildSystem.hasCI = ciFiles.some(file => fs.existsSync(file));\n+        \n+        return buildSystem;\n+    }\n+\n+    /**\n+     * Detect package manager used in the project\n+     * @returns {string} Package manager name\n+     */\n+    detectPackageManager() {\n+        const fs = require('fs');\n+        \n+        if (fs.existsSync('yarn.lock')) return 'yarn';\n+        if (fs.existsSync('pnpm-lock.yaml')) return 'pnpm';\n+        if (fs.existsSync('package-lock.json')) return 'npm';\n+        if (fs.existsSync('bun.lockb')) return 'bun';\n+        \n+        return 'unknown';\n+    }\n+\n+    /**\n+     * Detect Node.js version requirements\n+     * @param {Object} configuration - Configuration analysis\n+     * @returns {string|null} Node version requirement\n+     */\n+    detectNodeVersion(configuration) {\n+        const pkg = configuration.packageJson;\n+        \n+        if (pkg && pkg.engines && pkg.engines.node) {\n+            return pkg.engines.node;\n+        }\n+        \n+        // Check .nvmrc\n+        const fs = require('fs');\n+        if (fs.existsSync('.nvmrc')) {\n+            try {\n+                return fs.readFileSync('.nvmrc', 'utf8').trim();\n+            } catch (error) {\n+                return null;\n+            }\n+        }\n+        \n+        return null;\n+    }\n+\n+    /**\n+     * Get comprehensive branch history including creation, merges, and divergence\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Object>} Branch history analysis\n+     */\n+    async getBranchHistory(branchName) {\n+        try {\n+            console.log(chalk.blue('   - Analyzing branch history...'));\n+            \n+            // Get branch creation point\n+            const creationPoint = execSync(`git merge-base origin/main ${branchName}`).toString().trim();\n+            const creationDate = execSync(`git show -s --format=%ci ${creationPoint}`).toString().trim();\n+            \n+            // Get all commits on this branch\n+            const branchCommits = execSync(`git log ${creationPoint}..${branchName} --oneline --no-merges`).toString().trim();\n+            const commitCount = branchCommits ? branchCommits.split('\\n').length : 0;\n+            \n+            // Check for merge commits\n+            const mergeCommits = execSync(`git log ${creationPoint}..${branchName} --merges --oneline`).toString().trim();\n+            const mergeCount = mergeCommits ? mergeCommits.split('\\n').length : 0;\n+            \n+            // Get branch age in days\n+            const ageInDays = Math.floor((Date.now() - new Date(creationDate).getTime()) / (1000 * 60 * 60 * 24));\n+            \n+            return {\n+                creationPoint,\n+                creationDate,\n+                commitCount,\n+                mergeCount,\n+                ageInDays,\n+                commits: branchCommits ? branchCommits.split('\\n').map(line => {\n+                    const [hash, ...messageParts] = line.split(' ');\n+                    return { hash, message: messageParts.join(' ') };\n+                }) : []\n+            };\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Could not analyze branch history'));\n+            return { error: error.message };\n+        }\n+    }\n+\n+    /**\n+     * Analyze merge base and divergence from main branch\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Object>} Merge base analysis\n+     */\n+    async analyzeMergeBase(branchName) {\n+        try {\n+            console.log(chalk.blue('   - Analyzing merge base...'));\n+            \n+            const mergeBase = execSync(`git merge-base origin/main ${branchName}`).toString().trim();\n+            const mainHead = execSync('git rev-parse origin/main').toString().trim();\n+            \n+            // Count commits ahead and behind\n+            const aheadCount = execSync(`git rev-list --count ${mergeBase}..${branchName}`).toString().trim();\n+            const behindCount = execSync(`git rev-list --count ${mergeBase}..origin/main`).toString().trim();\n+            \n+            // Check if merge base is up to date\n+            const isUpToDate = mergeBase === mainHead;\n+            \n+            // Get commits that would be merged\n+            const commitsToMerge = execSync(`git log ${mergeBase}..${branchName} --oneline --no-merges`).toString().trim();\n+            \n+            return {\n+                mergeBase,\n+                mainHead,\n+                aheadCount: parseInt(aheadCount),\n+                behindCount: parseInt(behindCount),\n+                isUpToDate,\n+                needsRebase: parseInt(behindCount) > 0,\n+                commitsToMerge: commitsToMerge ? commitsToMerge.split('\\n').length : 0\n+            };\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Could not analyze merge base'));\n+            return { error: error.message };\n+        }\n+    }\n+\n+    /**\n+     * Detect potential merge conflicts\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Object>} Conflict detection results\n+     */\n+    async detectConflicts(branchName) {\n+        try {\n+            console.log(chalk.blue('   - Detecting potential conflicts...'));\n+            \n+            // Check current merge conflicts\n+            let hasActiveConflicts = false;\n+            try {\n+                execSync('git diff --name-only --diff-filter=U', { stdio: 'pipe' });\n+            } catch (error) {\n+                const conflictFiles = error.stdout ? error.stdout.toString().trim() : '';\n+                hasActiveConflicts = conflictFiles.length > 0;\n+            }\n+            \n+            // Simulate merge to detect potential conflicts\n+            let potentialConflicts = [];\n+            try {\n+                // Create a temporary branch to test merge\n+                const tempBranch = `temp-merge-test-${Date.now()}`;\n+                execSync(`git checkout -b ${tempBranch} origin/main`, { stdio: 'pipe' });\n+                \n+                try {\n+                    execSync(`git merge --no-commit --no-ff ${branchName}`, { stdio: 'pipe' });\n+                    // If merge succeeds, no conflicts\n+                    execSync('git merge --abort', { stdio: 'pipe' });\n+                } catch (mergeError) {\n+                    // Merge failed, likely due to conflicts\n+                    const conflictOutput = mergeError.stderr ? mergeError.stderr.toString() : '';\n+                    if (conflictOutput.includes('CONFLICT')) {\n+                        potentialConflicts = this.parseConflictOutput(conflictOutput);\n+                    }\n+                    try {\n+                        execSync('git merge --abort', { stdio: 'pipe' });\n+                    } catch (abortError) {\n+                        // Ignore abort errors\n+                    }\n+                }\n+                \n+                // Switch back and delete temp branch\n+                execSync(`git checkout ${branchName}`, { stdio: 'pipe' });\n+                execSync(`git branch -D ${tempBranch}`, { stdio: 'pipe' });\n+                \n+            } catch (error) {\n+                // If we can't create temp branch, fall back to file-based analysis\n+                potentialConflicts = await this.analyzeFileConflicts(branchName);\n+            }\n+            \n+            return {\n+                hasActiveConflicts,\n+                potentialConflicts,\n+                conflictCount: potentialConflicts.length,\n+                riskLevel: this.assessConflictRisk(potentialConflicts.length)\n+            };\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Could not detect conflicts'));\n+            return { error: error.message };\n+        }\n+    }\n+\n+    /**\n+     * Parse conflict output from git merge\n+     * @param {string} conflictOutput - Git merge conflict output\n+     * @returns {Array} Array of conflict information\n+     */\n+    parseConflictOutput(conflictOutput) {\n+        const conflicts = [];\n+        const lines = conflictOutput.split('\\n');\n+        \n+        for (const line of lines) {\n+            if (line.includes('CONFLICT')) {\n+                const match = line.match(/CONFLICT \\((.+?)\\): (.+)/);\n+                if (match) {\n+                    conflicts.push({\n+                        type: match[1],\n+                        file: match[2],\n+                        description: line\n+                    });\n+                }\n+            }\n+        }\n+        \n+        return conflicts;\n+    }\n+\n+    /**\n+     * Analyze potential file conflicts based on changed files\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Array>} Array of potential conflicts\n+     */\n+    async analyzeFileConflicts(branchName) {\n+        try {\n+            // Get files changed in this branch\n+            const branchFiles = execSync(`git diff --name-only origin/main...${branchName}`).toString().trim().split('\\n').filter(f => f);\n+            \n+            // Get files changed in main since branch creation\n+            const mergeBase = execSync(`git merge-base origin/main ${branchName}`).toString().trim();\n+            const mainFiles = execSync(`git diff --name-only ${mergeBase}..origin/main`).toString().trim().split('\\n').filter(f => f);\n+            \n+            // Find overlapping files\n+            const overlappingFiles = branchFiles.filter(file => mainFiles.includes(file));\n+            \n+            return overlappingFiles.map(file => ({\n+                type: 'content',\n+                file,\n+                description: `File modified in both branches: ${file}`\n+            }));\n+        } catch (error) {\n+            return [];\n+        }\n+    }\n+\n+    /**\n+     * Assess conflict risk level\n+     * @param {number} conflictCount - Number of potential conflicts\n+     * @returns {string} Risk level\n+     */\n+    assessConflictRisk(conflictCount) {\n+        if (conflictCount === 0) return 'low';\n+        if (conflictCount <= 2) return 'medium';\n+        return 'high';\n+    }\n+\n+    /**\n+     * Analyze commit messages for conventional commit compliance and quality\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Object>} Commit message analysis\n+     */\n+    async analyzeCommitMessages(branchName) {\n+        try {\n+            console.log(chalk.blue('   - Analyzing commit messages...'));\n+            \n+            const commits = this.getRecentCommits(branchName);\n+            const analysis = {\n+                totalCommits: commits.length,\n+                conventionalCommits: 0,\n+                nonConventionalCommits: 0,\n+                commitTypes: {},\n+                issues: [],\n+                suggestions: []\n+            };\n+            \n+            const conventionalPattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\\(.+\\))?: .+/;\n+            const breakingChangePattern = /BREAKING CHANGE:|!/;\n+            \n+            for (const commit of commits) {\n+                const message = commit.message;\n+                \n+                if (conventionalPattern.test(message)) {\n+                    analysis.conventionalCommits++;\n+                    \n+                    // Extract commit type\n+                    const typeMatch = message.match(/^([^(:]+)/);\n+                    if (typeMatch) {\n+                        const type = typeMatch[1];\n+                        analysis.commitTypes[type] = (analysis.commitTypes[type] || 0) + 1;\n+                    }\n+                    \n+                    // Check for breaking changes\n+                    if (breakingChangePattern.test(message)) {\n+                        analysis.issues.push({\n+                            commit: commit.hash,\n+                            type: 'breaking_change',\n+                            message: 'Breaking change detected'\n+                        });\n+                    }\n+                } else {\n+                    analysis.nonConventionalCommits++;\n+                    analysis.issues.push({\n+                        commit: commit.hash,\n+                        type: 'non_conventional',\n+                        message: `Non-conventional commit: \"${message}\"`\n+                    });\n+                }\n+                \n+                // Check for common issues\n+                if (message.length < 10) {\n+                    analysis.issues.push({\n+                        commit: commit.hash,\n+                        type: 'too_short',\n+                        message: 'Commit message too short'\n+                    });\n+                }\n+                \n+                if (message.length > 72) {\n+                    analysis.issues.push({\n+                        commit: commit.hash,\n+                        type: 'too_long',\n+                        message: 'Commit message too long'\n+                    });\n+                }\n+            }\n+            \n+            // Generate suggestions\n+            if (analysis.nonConventionalCommits > 0) {\n+                analysis.suggestions.push('Consider using conventional commit format (feat:, fix:, docs:, etc.)');\n+            }\n+            \n+            if (analysis.issues.some(i => i.type === 'breaking_change')) {\n+                analysis.suggestions.push('Breaking changes detected - ensure proper versioning and documentation');\n+            }\n+            \n+            return analysis;\n+        } catch (error) {\n+            console.log(chalk.yellow('   - Warning: Could not analyze commit messages'));\n+            return { error: error.message };\n+        }\n+    }\n+\n+    /**\n+     * Validate branch naming conventions\n+     * @param {string} branchName - Current branch name\n+     * @returns {Object} Branch naming validation results\n+     */\n+    validateBranchNaming(branchName) {\n+        console.log(chalk.blue('   - Validating branch naming...'));\n+        \n+        const validation = {\n+            branchName,\n+            isValid: true,\n+            issues: [],\n+            suggestions: [],\n+            conventions: {\n+                hasTicketId: false,\n+                hasType: false,\n+                hasDescription: false,\n+                followsKebabCase: false\n+            }\n+        };\n+        \n+        // Check for ticket ID (Linear format)\n+        const ticketPattern = /[A-Z]+-\\d+/;\n+        if (ticketPattern.test(branchName)) {\n+            validation.conventions.hasTicketId = true;\n+        } else {\n+            validation.issues.push('Missing ticket ID (e.g., TIX-123)');\n+            validation.suggestions.push('Include Linear ticket ID in branch name');\n+            validation.isValid = false;\n+        }\n+        \n+        // Check for branch type prefix\n+        const typePattern = /^(feature|feat|fix|hotfix|bugfix|chore|docs|refactor|test)[\\/-]/i;\n+        if (typePattern.test(branchName)) {\n+            validation.conventions.hasType = true;\n+        } else {\n+            validation.issues.push('Missing branch type prefix');\n+            validation.suggestions.push('Use prefixes like feature/, fix/, hotfix/, etc.');\n+        }\n+        \n+        // Check for descriptive name\n+        const parts = branchName.split(/[\\/-]/);\n+        const hasDescription = parts.some(part => part.length > 3 && !/^[A-Z]+-\\d+$/.test(part));\n+        if (hasDescription) {\n+            validation.conventions.hasDescription = true;\n+        } else {\n+            validation.issues.push('Missing descriptive name');\n+            validation.suggestions.push('Add descriptive words about the change');\n+        }\n+        \n+        // Check for kebab-case\n+        const kebabPattern = /^[a-z0-9-\\/]+$/;\n+        if (kebabPattern.test(branchName.toLowerCase())) {\n+            validation.conventions.followsKebabCase = true;\n+        } else {\n+            validation.issues.push('Not in kebab-case format');\n+            validation.suggestions.push('Use lowercase letters, numbers, and hyphens only');\n+        }\n+        \n+        // Check length\n+        if (branchName.length > 50) {\n+            validation.issues.push('Branch name too long');\n+            validation.suggestions.push('Keep branch names under 50 characters');\n+            validation.isValid = false;\n+        }\n+        \n+        // Check for invalid characters\n+        const invalidChars = branchName.match(/[^a-zA-Z0-9\\-\\/]/g);\n+        if (invalidChars) {\n+            validation.issues.push(`Invalid characters: ${invalidChars.join(', ')}`);\n+            validation.suggestions.push('Use only letters, numbers, hyphens, and forward slashes');\n+            validation.isValid = false;\n+        }\n+        \n+        return validation;\n+    }\n+\n+    /**\n+     * Gather Linear ticket context from branch name\n+     * @param {string} branchName - Current branch name\n+     * @returns {Object} Linear context\n+     */\n+    gatherLinearContext(branchName) {\n+        console.log(chalk.blue(`   - Parsing branch name \"${branchName}\"...`));\n+        const ticketIdMatch = branchName.match(/([A-Z]+-\\d+)/);\n+        \n+        if (!ticketIdMatch) {\n+            throw new Error(`Could not find a Linear ticket ID (e.g., TIX-123) in branch \"${branchName}\".`);\n+        }\n+        \n+        const linearTicketId = ticketIdMatch[0];\n+        console.log(chalk.green(`   - Found Linear Ticket: ${linearTicketId}`));\n+\n+        return {\n+            ticketId: linearTicketId,\n+            ticketData: null, // Will be populated by Linear workflow\n+            projectData: null\n+        };\n+    }\n+}\n+\n+module.exports = ContextAnalyzer;\n\\ No newline at end of file\ndiff --git a/src/core/CodeScribeCore.js b/src/core/CodeScribeCore.js\nnew file mode 100644\nindex 0000000..196b42d\n--- /dev/null\n+++ b/src/core/CodeScribeCore.js\n@@ -0,0 +1,82 @@\n+const ContextAnalyzer = require('../context/ContextAnalyzer');\n+const WorkflowOrchestrator = require('../workflows/WorkflowOrchestrator');\n+const AIAnalysisEngine = require('../ai/AIAnalysisEngine');\n+const ConfigurationManager = require('../config/ConfigurationManager');\n+const chalk = require('chalk');\n+\n+/**\n+ * Core Engine - Central orchestrator that manages workflow execution \n+ * and coordinates between components\n+ */\n+class CodeScribeCore {\n+    constructor(config = {}) {\n+        this.config = new ConfigurationManager(config);\n+        this.contextAnalyzer = new ContextAnalyzer(this.config);\n+        this.workflowOrchestrator = new WorkflowOrchestrator(this.config);\n+        this.aiEngine = new AIAnalysisEngine(this.config);\n+    }\n+\n+    /**\n+     * Main execution method that orchestrates the entire workflow\n+     * @param {string} command - The command to execute\n+     * @param {Object} options - Command options\n+     * @returns {Promise<Object>} Execution results\n+     */\n+    async execute(command = 'default', options = {}) {\n+        console.log(chalk.cyan.bold('🚀 Starting CodeScribe Agent...'));\n+\n+        try {\n+            // Gather context from various sources\n+            console.log(chalk.blue('   - Gathering context...'));\n+            const context = await this.contextAnalyzer.gather();\n+\n+            // Perform AI analysis if available\n+            if (this.aiEngine.isAvailable()) {\n+                context.ai = await this.aiEngine.analyzePRContent(context);\n+            }\n+\n+            // Select appropriate workflows based on command and context\n+            const workflows = this.workflowOrchestrator.selectWorkflows(command, context);\n+            \n+            // Execute selected workflows\n+            const results = await this.workflowOrchestrator.execute(workflows, context, options);\n+\n+            console.log(chalk.green.bold('\\n✅ Agent finished successfully!'));\n+            return results;\n+\n+        } catch (error) {\n+            console.error(chalk.red.bold('\\n❌ Agent failed:'), error.message);\n+            if (error.response) {\n+                console.error(chalk.red('Response status:'), error.response.status);\n+                console.error(chalk.red('Response data:'), JSON.stringify(error.response.data, null, 2));\n+            }\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Register a custom workflow\n+     * @param {BaseWorkflow} workflow - The workflow to register\n+     */\n+    registerWorkflow(workflow) {\n+        this.workflowOrchestrator.registerWorkflow(workflow);\n+    }\n+\n+    /**\n+     * Get current configuration\n+     * @returns {Object} Current configuration\n+     */\n+    getConfig() {\n+        return this.config.getAll();\n+    }\n+\n+    /**\n+     * Update configuration\n+     * @param {Object} newConfig - Configuration updates\n+     */\n+    updateConfig(newConfig) {\n+        this.config.update(newConfig);\n+    }\n+}\n+\n+module.exports = CodeScribeCore;\n\\ No newline at end of file\ndiff --git a/src/workflows/BaseWorkflow.js b/src/workflows/BaseWorkflow.js\nnew file mode 100644\nindex 0000000..7492a77\n--- /dev/null\n+++ b/src/workflows/BaseWorkflow.js\n@@ -0,0 +1,107 @@\n+/**\n+ * Base Workflow - Abstract base class for all workflows\n+ * Provides common functionality and interface for workflow implementations\n+ */\n+class BaseWorkflow {\n+    constructor(config, name = 'base') {\n+        this.config = config;\n+        this.name = name;\n+        this.critical = true; // Whether failure should stop execution\n+        this.dependencies = []; // Other workflows this depends on\n+        this.parallel = false; // Whether this can run in parallel with others\n+    }\n+\n+    /**\n+     * Execute the workflow - must be implemented by subclasses\n+     * @param {Object} context - Current execution context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} Workflow execution results\n+     */\n+    async execute(context, options = {}) {\n+        throw new Error(`execute() method must be implemented by ${this.constructor.name}`);\n+    }\n+\n+    /**\n+     * Validate that the workflow can execute with the given context\n+     * @param {Object} context - Current execution context\n+     * @returns {boolean} Whether the workflow can execute\n+     */\n+    canExecute(context) {\n+        return true; // Default implementation - override in subclasses\n+    }\n+\n+    /**\n+     * Get workflow configuration\n+     * @returns {Object} Workflow-specific configuration\n+     */\n+    getConfig() {\n+        return this.config.get(`workflows.${this.name}`, {});\n+    }\n+\n+    /**\n+     * Check if workflow is enabled\n+     * @returns {boolean} Whether the workflow is enabled\n+     */\n+    isEnabled() {\n+        const workflowConfig = this.getConfig();\n+        return workflowConfig.enabled !== false;\n+    }\n+\n+    /**\n+     * Log workflow-specific messages\n+     * @param {string} message - Message to log\n+     * @param {string} level - Log level (info, warn, error)\n+     */\n+    log(message, level = 'info') {\n+        const prefix = `[${this.name}]`;\n+        switch (level) {\n+            case 'warn':\n+                console.warn(`${prefix} ${message}`);\n+                break;\n+            case 'error':\n+                console.error(`${prefix} ${message}`);\n+                break;\n+            default:\n+                console.log(`${prefix} ${message}`);\n+        }\n+    }\n+\n+    /**\n+     * Handle workflow errors with optional retry logic\n+     * @param {Error} error - The error that occurred\n+     * @param {Object} context - Current execution context\n+     * @param {number} retryCount - Current retry attempt\n+     * @returns {Promise<boolean>} Whether to retry the operation\n+     */\n+    async handleError(error, context, retryCount = 0) {\n+        this.log(`Error occurred: ${error.message}`, 'error');\n+        \n+        // Default: no retry logic, but subclasses can override\n+        return false;\n+    }\n+\n+    /**\n+     * Cleanup resources after workflow execution\n+     * @param {Object} context - Current execution context\n+     * @param {Object} results - Execution results\n+     */\n+    async cleanup(context, results) {\n+        // Default: no cleanup needed, but subclasses can override\n+    }\n+\n+    /**\n+     * Get workflow metadata\n+     * @returns {Object} Workflow metadata\n+     */\n+    getMetadata() {\n+        return {\n+            name: this.name,\n+            critical: this.critical,\n+            dependencies: this.dependencies,\n+            parallel: this.parallel,\n+            enabled: this.isEnabled()\n+        };\n+    }\n+}\n+\n+module.exports = BaseWorkflow;\n\\ No newline at end of file\ndiff --git a/src/workflows/WorkflowOrchestrator.js b/src/workflows/WorkflowOrchestrator.js\nnew file mode 100644\nindex 0000000..bdb63cb\n--- /dev/null\n+++ b/src/workflows/WorkflowOrchestrator.js\n@@ -0,0 +1,129 @@\n+const chalk = require('chalk');\n+\n+/**\n+ * Workflow Orchestrator - Plugin-based system for managing different workflow types\n+ */\n+class WorkflowOrchestrator {\n+    constructor(config) {\n+        this.config = config;\n+        this.workflows = new Map();\n+        this.registerDefaultWorkflows();\n+    }\n+\n+    /**\n+     * Register default workflows that come with the system\n+     */\n+    registerDefaultWorkflows() {\n+        // Import and register default workflows\n+        const GitHubWorkflow = require('./github/GitHubWorkflow');\n+        const LinearWorkflow = require('./linear/LinearWorkflow');\n+        const CommitWorkflow = require('./commit/CommitWorkflow');\n+        \n+        this.registerWorkflow('github', new GitHubWorkflow(this.config));\n+        this.registerWorkflow('linear', new LinearWorkflow(this.config));\n+        this.registerWorkflow('commit', new CommitWorkflow(this.config));\n+    }\n+\n+    /**\n+     * Register a workflow with the orchestrator\n+     * @param {string} name - Workflow name\n+     * @param {BaseWorkflow} workflow - Workflow instance\n+     */\n+    registerWorkflow(name, workflow) {\n+        this.workflows.set(name, workflow);\n+        console.log(chalk.blue(`   - Registered workflow: ${name}`));\n+    }\n+\n+    /**\n+     * Select appropriate workflows based on command and context\n+     * @param {string} command - The command being executed\n+     * @param {Object} context - Current context\n+     * @returns {Array} Array of selected workflows\n+     */\n+    selectWorkflows(command, context) {\n+        const selectedWorkflows = [];\n+\n+        // Default workflow selection logic\n+        switch (command) {\n+            case 'default':\n+            case 'pr':\n+                // Standard PR creation workflow\n+                selectedWorkflows.push(this.workflows.get('github'));\n+                selectedWorkflows.push(this.workflows.get('linear'));\n+                break;\n+            \n+            case 'commit':\n+                // Commit workflow with GitHub and Linear tracking\n+                selectedWorkflows.push(this.workflows.get('commit'));\n+                break;\n+            \n+            case 'github-only':\n+                selectedWorkflows.push(this.workflows.get('github'));\n+                break;\n+                \n+            case 'linear-only':\n+                selectedWorkflows.push(this.workflows.get('linear'));\n+                break;\n+                \n+            default:\n+                // Default to standard workflow\n+                selectedWorkflows.push(this.workflows.get('github'));\n+                selectedWorkflows.push(this.workflows.get('linear'));\n+        }\n+\n+        return selectedWorkflows.filter(workflow => workflow !== undefined);\n+    }\n+\n+    /**\n+     * Execute selected workflows with proper dependency management\n+     * @param {Array} workflows - Workflows to execute\n+     * @param {Object} context - Current context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} Execution results\n+     */\n+    async execute(workflows, context, options = {}) {\n+        const results = {};\n+        \n+        for (const workflow of workflows) {\n+            try {\n+                console.log(chalk.blue(`   - Executing ${workflow.name} workflow...`));\n+                const result = await workflow.execute(context, options);\n+                results[workflow.name] = result;\n+                \n+                // Update context with results for subsequent workflows\n+                context[workflow.name] = result;\n+                \n+            } catch (error) {\n+                console.error(chalk.red(`   - ${workflow.name} workflow failed: ${error.message}`));\n+                \n+                // Decide whether to continue or fail based on workflow criticality\n+                if (workflow.critical !== false) {\n+                    throw error;\n+                }\n+                \n+                results[workflow.name] = { error: error.message };\n+            }\n+        }\n+\n+        return results;\n+    }\n+\n+    /**\n+     * Get list of registered workflows\n+     * @returns {Array} Array of workflow names\n+     */\n+    getRegisteredWorkflows() {\n+        return Array.from(this.workflows.keys());\n+    }\n+\n+    /**\n+     * Get a specific workflow by name\n+     * @param {string} name - Workflow name\n+     * @returns {BaseWorkflow|undefined} Workflow instance\n+     */\n+    getWorkflow(name) {\n+        return this.workflows.get(name);\n+    }\n+}\n+\n+module.exports = WorkflowOrchestrator;\n\\ No newline at end of file\ndiff --git a/src/workflows/commit/CommitWorkflow.js b/src/workflows/commit/CommitWorkflow.js\nnew file mode 100644\nindex 0000000..08bce84\n--- /dev/null\n+++ b/src/workflows/commit/CommitWorkflow.js\n@@ -0,0 +1,541 @@\n+const BaseWorkflow = require('../BaseWorkflow');\n+const { execSync } = require('child_process');\n+const chalk = require('chalk');\n+\n+/**\n+ * Commit Workflow - Handles intelligent commit creation with GitHub and Linear tracking\n+ */\n+class CommitWorkflow extends BaseWorkflow {\n+    constructor(config) {\n+        super(config, 'commit');\n+        this.critical = false; // Don't fail entire workflow if commit fails\n+    }\n+\n+    /**\n+     * Execute commit workflow operations\n+     * @param {Object} context - Current execution context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} Commit workflow results\n+     */\n+    async execute(context, options = {}) {\n+        if (!this.isEnabled()) {\n+            this.log('Commit workflow is disabled, skipping...');\n+            return { skipped: true };\n+        }\n+\n+        try {\n+            // Check if there are any staged or unstaged changes\n+            const hasChanges = this.checkForChanges();\n+            if (!hasChanges && !options.force) {\n+                this.log('No changes detected to commit', 'info');\n+                return { skipped: true, reason: 'no_changes' };\n+            }\n+\n+            // Generate intelligent commit message\n+            const commitMessage = await this.generateCommitMessage(context, options);\n+            \n+            // Stage changes if needed\n+            await this.stageChanges(options);\n+            \n+            // Create the commit\n+            const commitResult = await this.createCommit(commitMessage, options);\n+            \n+            // Push to remote if requested\n+            let pushResult = null;\n+            if (options.push !== false) {\n+                pushResult = await this.pushToRemote(context.git.branch);\n+            }\n+\n+            // Update Linear ticket if available\n+            let linearUpdate = null;\n+            if (context.linear?.ticketId) {\n+                linearUpdate = await this.updateLinearTicket(context, commitResult);\n+            }\n+\n+            this.log(`Commit created successfully: ${commitResult.hash}`, 'info');\n+\n+            return {\n+                commit: commitResult,\n+                push: pushResult,\n+                linear: linearUpdate,\n+                message: commitMessage\n+            };\n+\n+        } catch (error) {\n+            this.log(`Commit workflow failed: ${error.message}`, 'error');\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Check if there are changes to commit\n+     * @returns {boolean} Whether there are changes\n+     */\n+    checkForChanges() {\n+        try {\n+            // Check for staged changes\n+            const stagedChanges = execSync('git diff --cached --name-only').toString().trim();\n+            \n+            // Check for unstaged changes\n+            const unstagedChanges = execSync('git diff --name-only').toString().trim();\n+            \n+            // Check for untracked files\n+            const untrackedFiles = execSync('git ls-files --others --exclude-standard').toString().trim();\n+            \n+            return !!(stagedChanges || unstagedChanges || untrackedFiles);\n+        } catch (error) {\n+            this.log(`Error checking for changes: ${error.message}`, 'warn');\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Generate intelligent commit message based on context and changes\n+     * @param {Object} context - Current execution context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<string>} Generated commit message\n+     */\n+    async generateCommitMessage(context, options) {\n+        // If user provided a custom message, use it\n+        if (options.message) {\n+            return this.formatCommitMessage(options.message, context);\n+        }\n+\n+        // Generate message based on code analysis\n+        const changes = await this.analyzeChanges();\n+        const ticketId = context.linear?.ticketId;\n+        \n+        // Determine commit type based on changes\n+        const commitType = this.determineCommitType(changes);\n+        \n+        // Generate descriptive message\n+        let message = this.generateDescriptiveMessage(commitType, changes, ticketId);\n+        \n+        // Add conventional commit format if enabled\n+        if (this.getConfig().conventionalCommits !== false) {\n+            message = this.formatConventionalCommit(commitType, message, changes);\n+        }\n+\n+        return message;\n+    }\n+\n+    /**\n+     * Analyze current changes to understand what was modified\n+     * @returns {Promise<Object>} Change analysis\n+     */\n+    async analyzeChanges() {\n+        const analysis = {\n+            files: [],\n+            types: new Set(),\n+            scope: null,\n+            hasBreakingChanges: false,\n+            summary: ''\n+        };\n+\n+        try {\n+            // Get staged and unstaged files\n+            const stagedFiles = execSync('git diff --cached --name-only').toString().trim().split('\\n').filter(f => f);\n+            const unstagedFiles = execSync('git diff --name-only').toString().trim().split('\\n').filter(f => f);\n+            const untrackedFiles = execSync('git ls-files --others --exclude-standard').toString().trim().split('\\n').filter(f => f);\n+            \n+            const allFiles = [...new Set([...stagedFiles, ...unstagedFiles, ...untrackedFiles])];\n+            \n+            for (const file of allFiles) {\n+                if (!file) continue;\n+                \n+                const fileInfo = {\n+                    path: file,\n+                    extension: file.split('.').pop(),\n+                    isNew: untrackedFiles.includes(file),\n+                    isModified: stagedFiles.includes(file) || unstagedFiles.includes(file),\n+                    type: this.categorizeFile(file)\n+                };\n+                \n+                analysis.files.push(fileInfo);\n+                analysis.types.add(fileInfo.type);\n+            }\n+\n+            // Determine scope from files\n+            analysis.scope = this.determineScope(analysis.files);\n+            \n+            // Check for breaking changes\n+            analysis.hasBreakingChanges = this.detectBreakingChanges(analysis.files);\n+            \n+            // Generate summary\n+            analysis.summary = this.generateChangeSummary(analysis);\n+            \n+        } catch (error) {\n+            this.log(`Error analyzing changes: ${error.message}`, 'warn');\n+        }\n+\n+        return analysis;\n+    }\n+\n+    /**\n+     * Categorize a file based on its path and extension\n+     * @param {string} filePath - Path to the file\n+     * @returns {string} File category\n+     */\n+    categorizeFile(filePath) {\n+        const path = filePath.toLowerCase();\n+        \n+        if (path.includes('test') || path.includes('spec')) return 'test';\n+        if (path.includes('doc') || path.includes('readme')) return 'docs';\n+        if (path.includes('config') || path.endsWith('.json') || path.endsWith('.yml') || path.endsWith('.yaml')) return 'config';\n+        if (path.endsWith('.css') || path.endsWith('.scss') || path.endsWith('.less')) return 'style';\n+        if (path.endsWith('.js') || path.endsWith('.ts') || path.endsWith('.jsx') || path.endsWith('.tsx')) return 'code';\n+        if (path.includes('package.json') || path.includes('package-lock.json')) return 'deps';\n+        \n+        return 'other';\n+    }\n+\n+    /**\n+     * Determine the scope of changes\n+     * @param {Array} files - Array of file objects\n+     * @returns {string|null} Determined scope\n+     */\n+    determineScope(files) {\n+        const directories = files.map(f => f.path.split('/')[0]).filter(d => d);\n+        const uniqueDirs = [...new Set(directories)];\n+        \n+        if (uniqueDirs.length === 1) {\n+            return uniqueDirs[0];\n+        }\n+        \n+        // Common scope patterns\n+        const commonScopes = ['api', 'ui', 'auth', 'db', 'config', 'test', 'docs'];\n+        for (const scope of commonScopes) {\n+            if (files.some(f => f.path.toLowerCase().includes(scope))) {\n+                return scope;\n+            }\n+        }\n+        \n+        return null;\n+    }\n+\n+    /**\n+     * Detect if changes include breaking changes\n+     * @param {Array} files - Array of file objects\n+     * @returns {boolean} Whether breaking changes are detected\n+     */\n+    detectBreakingChanges(files) {\n+        // Simple heuristics for breaking changes\n+        const breakingPatterns = [\n+            'package.json', // Dependency changes\n+            'api/', // API changes\n+            'schema', // Database schema changes\n+            'migration' // Database migrations\n+        ];\n+        \n+        return files.some(f => \n+            breakingPatterns.some(pattern => \n+                f.path.toLowerCase().includes(pattern)\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Generate a summary of changes\n+     * @param {Object} analysis - Change analysis\n+     * @returns {string} Change summary\n+     */\n+    generateChangeSummary(analysis) {\n+        const fileCount = analysis.files.length;\n+        const types = Array.from(analysis.types);\n+        \n+        if (fileCount === 1) {\n+            return `Update ${analysis.files[0].path}`;\n+        }\n+        \n+        if (types.length === 1) {\n+            const type = types[0];\n+            return `Update ${fileCount} ${type} file${fileCount > 1 ? 's' : ''}`;\n+        }\n+        \n+        return `Update ${fileCount} files (${types.join(', ')})`;\n+    }\n+\n+    /**\n+     * Determine commit type based on changes\n+     * @param {Object} changes - Change analysis\n+     * @returns {string} Commit type\n+     */\n+    determineCommitType(changes) {\n+        const types = Array.from(changes.types);\n+        \n+        if (types.includes('test')) return 'test';\n+        if (types.includes('docs')) return 'docs';\n+        if (types.includes('config')) return 'chore';\n+        if (types.includes('style')) return 'style';\n+        if (types.includes('deps')) return 'chore';\n+        \n+        // Check for new files vs modifications\n+        const hasNewFiles = changes.files.some(f => f.isNew);\n+        const hasModifications = changes.files.some(f => f.isModified);\n+        \n+        if (hasNewFiles && !hasModifications) return 'feat';\n+        if (hasModifications && !hasNewFiles) return 'fix';\n+        \n+        return 'feat'; // Default to feature\n+    }\n+\n+    /**\n+     * Generate descriptive commit message\n+     * @param {string} type - Commit type\n+     * @param {Object} changes - Change analysis\n+     * @param {string} ticketId - Linear ticket ID\n+     * @returns {string} Descriptive message\n+     */\n+    generateDescriptiveMessage(type, changes, ticketId) {\n+        let message = changes.summary;\n+        \n+        // Add ticket reference if available\n+        if (ticketId) {\n+            message = `${ticketId}: ${message}`;\n+        }\n+        \n+        return message;\n+    }\n+\n+    /**\n+     * Format commit message with conventional commit format\n+     * @param {string} type - Commit type\n+     * @param {string} message - Base message\n+     * @param {Object} changes - Change analysis\n+     * @returns {string} Formatted conventional commit message\n+     */\n+    formatConventionalCommit(type, message, changes) {\n+        let formatted = `${type}`;\n+        \n+        if (changes.scope) {\n+            formatted += `(${changes.scope})`;\n+        }\n+        \n+        if (changes.hasBreakingChanges) {\n+            formatted += '!';\n+        }\n+        \n+        formatted += `: ${message}`;\n+        \n+        return formatted;\n+    }\n+\n+    /**\n+     * Format commit message with additional context\n+     * @param {string} message - Base message\n+     * @param {Object} context - Current execution context\n+     * @returns {string} Formatted message\n+     */\n+    formatCommitMessage(message, context) {\n+        // Add ticket reference if not already present\n+        if (context.linear?.ticketId && !message.includes(context.linear.ticketId)) {\n+            message = `${context.linear.ticketId}: ${message}`;\n+        }\n+        \n+        return message;\n+    }\n+\n+    /**\n+     * Stage changes for commit\n+     * @param {Object} options - Execution options\n+     */\n+    async stageChanges(options) {\n+        try {\n+            if (options.addAll || options.all) {\n+                // Stage all changes including new files\n+                this.log('Staging all changes...', 'info');\n+                execSync('git add -A');\n+            } else if (options.addModified) {\n+                // Stage only modified files\n+                this.log('Staging modified files...', 'info');\n+                execSync('git add -u');\n+            } else {\n+                // Check if there are already staged changes\n+                const stagedChanges = execSync('git diff --cached --name-only').toString().trim();\n+                if (!stagedChanges) {\n+                    // No staged changes, stage all by default\n+                    this.log('No staged changes found, staging all changes...', 'info');\n+                    execSync('git add -A');\n+                }\n+            }\n+        } catch (error) {\n+            throw new Error(`Failed to stage changes: ${error.message}`);\n+        }\n+    }\n+\n+    /**\n+     * Create the commit\n+     * @param {string} message - Commit message\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} Commit result\n+     */\n+    async createCommit(message, options) {\n+        try {\n+            this.log(`Creating commit with message: \"${message}\"`, 'info');\n+            \n+            // Create the commit\n+            execSync(`git commit -m \"${message.replace(/\"/g, '\\\\\"')}\"`, { stdio: 'pipe' });\n+            \n+            // Get commit hash and details\n+            const hash = execSync('git rev-parse HEAD').toString().trim();\n+            const shortHash = execSync('git rev-parse --short HEAD').toString().trim();\n+            const author = execSync('git log -1 --format=\"%an <%ae>\"').toString().trim();\n+            const timestamp = execSync('git log -1 --format=\"%ci\"').toString().trim();\n+            \n+            return {\n+                hash,\n+                shortHash,\n+                message,\n+                author,\n+                timestamp\n+            };\n+            \n+        } catch (error) {\n+            throw new Error(`Failed to create commit: ${error.message}`);\n+        }\n+    }\n+\n+    /**\n+     * Push commit to remote repository\n+     * @param {string} branchName - Current branch name\n+     * @returns {Promise<Object>} Push result\n+     */\n+    async pushToRemote(branchName) {\n+        try {\n+            this.log(`Pushing to remote branch: ${branchName}`, 'info');\n+            \n+            // Push to remote\n+            execSync(`git push origin ${branchName}`, { stdio: 'pipe' });\n+            \n+            this.log('Successfully pushed to remote', 'info');\n+            \n+            return {\n+                success: true,\n+                branch: branchName,\n+                remote: 'origin'\n+            };\n+            \n+        } catch (error) {\n+            // Try to set upstream if branch doesn't exist on remote\n+            try {\n+                this.log('Branch not on remote, setting upstream...', 'info');\n+                execSync(`git push -u origin ${branchName}`, { stdio: 'pipe' });\n+                \n+                return {\n+                    success: true,\n+                    branch: branchName,\n+                    remote: 'origin',\n+                    setUpstream: true\n+                };\n+                \n+            } catch (upstreamError) {\n+                this.log(`Failed to push to remote: ${error.message}`, 'warn');\n+                return {\n+                    success: false,\n+                    error: error.message,\n+                    branch: branchName\n+                };\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update Linear ticket with commit information\n+     * @param {Object} context - Current execution context\n+     * @param {Object} commitResult - Commit result\n+     * @returns {Promise<Object>} Linear update result\n+     */\n+    async updateLinearTicket(context, commitResult) {\n+        try {\n+            // Import LinearWorkflow to reuse its functionality\n+            const LinearWorkflow = require('../linear/LinearWorkflow');\n+            const linearWorkflow = new LinearWorkflow(this.config);\n+            \n+            if (!linearWorkflow.canExecute(context)) {\n+                return { skipped: true, reason: 'linear_not_configured' };\n+            }\n+\n+            // Get the issue details\n+            const issue = await linearWorkflow.getIssueByIdentifier(context.linear.ticketId);\n+            \n+            // Create commit comment\n+            const commentBody = this.generateLinearCommitComment(commitResult, context);\n+            \n+            // Add comment to the issue\n+            await linearWorkflow.addCommentToIssue(issue.id, commentBody);\n+\n+            this.log(`Linear ticket ${context.linear.ticketId} updated with commit info`, 'info');\n+\n+            return {\n+                success: true,\n+                ticketId: context.linear.ticketId,\n+                issueId: issue.id,\n+                commentAdded: true\n+            };\n+\n+        } catch (error) {\n+            this.log(`Failed to update Linear ticket: ${error.message}`, 'warn');\n+            return {\n+                success: false,\n+                error: error.message\n+            };\n+        }\n+    }\n+\n+    /**\n+     * Generate Linear comment for commit\n+     * @param {Object} commitResult - Commit result\n+     * @param {Object} context - Current execution context\n+     * @returns {string} Generated comment\n+     */\n+    generateLinearCommitComment(commitResult, context) {\n+        let comment = `💾 **New Commit**\\n\\n`;\n+        comment += `**Commit:** \\`${commitResult.shortHash}\\`\\n`;\n+        comment += `**Message:** ${commitResult.message}\\n`;\n+        comment += `**Branch:** ${context.git.branch}\\n`;\n+        \n+        if (context.git.remoteUrl) {\n+            const { owner, repo } = this.parseRepoInfo(context.git.remoteUrl);\n+            const commitUrl = `https://github.com/${owner}/${repo}/commit/${commitResult.hash}`;\n+            comment += `**GitHub:** [View Commit](${commitUrl})\\n`;\n+        }\n+        \n+        comment += `\\n*Committed by CodeScribe Agent*`;\n+        \n+        return comment;\n+    }\n+\n+    /**\n+     * Parse GitHub owner and repo from remote URL\n+     * @param {string} remoteUrl - Git remote URL\n+     * @returns {Object} Owner and repo information\n+     */\n+    parseRepoInfo(remoteUrl) {\n+        const repoInfoMatch = remoteUrl.match(/github\\.com[/:]([\\w-]+)\\/([\\w-]+)/);\n+        if (!repoInfoMatch) {\n+            return { owner: 'unknown', repo: 'unknown' };\n+        }\n+        \n+        return {\n+            owner: repoInfoMatch[1],\n+            repo: repoInfoMatch[2]\n+        };\n+    }\n+\n+    /**\n+     * Check if commit workflow can execute\n+     * @param {Object} context - Current execution context\n+     * @returns {boolean} Whether workflow can execute\n+     */\n+    canExecute(context) {\n+        try {\n+            // Check if we're in a git repository\n+            execSync('git rev-parse --git-dir', { stdio: 'pipe' });\n+            return true;\n+        } catch (error) {\n+            return false;\n+        }\n+    }\n+}\n+\n+module.exports = CommitWorkflow;\n\\ No newline at end of file\ndiff --git a/src/workflows/github/GitHubWorkflow.js b/src/workflows/github/GitHubWorkflow.js\nnew file mode 100644\nindex 0000000..db210b4\n--- /dev/null\n+++ b/src/workflows/github/GitHubWorkflow.js\n@@ -0,0 +1,202 @@\n+const BaseWorkflow = require('../BaseWorkflow');\n+const { Octokit } = require('@octokit/rest');\n+const chalk = require('chalk');\n+\n+/**\n+ * GitHub Workflow - Handles GitHub-related operations like PR creation and management\n+ */\n+class GitHubWorkflow extends BaseWorkflow {\n+    constructor(config) {\n+        super(config, 'github');\n+        this.octokit = new Octokit({ \n+            auth: process.env.GITHUB_TOKEN || config.get('github.token')\n+        });\n+    }\n+\n+    /**\n+     * Execute GitHub workflow operations\n+     * @param {Object} context - Current execution context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} GitHub workflow results\n+     */\n+    async execute(context, options = {}) {\n+        if (!this.isEnabled()) {\n+            this.log('GitHub workflow is disabled, skipping...');\n+            return { skipped: true };\n+        }\n+\n+        try {\n+            // Parse repository information from git context\n+            const { owner, repo } = this.parseRepoInfo(context.git.remoteUrl);\n+            \n+            // Check for existing PR or create new one\n+            const prResult = await this.handlePullRequest(\n+                owner, \n+                repo, \n+                context.git.branch, \n+                context.ai || await this.generatePRContent(context)\n+            );\n+\n+            this.log(`PR operation completed: ${prResult.html_url}`, 'info');\n+\n+            return {\n+                pr: prResult,\n+                owner,\n+                repo,\n+                isUpdate: prResult.isUpdate || false\n+            };\n+\n+        } catch (error) {\n+            this.log(`GitHub workflow failed: ${error.message}`, 'error');\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Parse GitHub owner and repo from remote URL\n+     * @param {string} remoteUrl - Git remote URL\n+     * @returns {Object} Owner and repo information\n+     */\n+    parseRepoInfo(remoteUrl) {\n+        const repoInfoMatch = remoteUrl.match(/github\\.com[/:]([\\w-]+)\\/([\\w-]+)/);\n+        if (!repoInfoMatch) {\n+            throw new Error('Could not parse GitHub owner and repo from remote URL.');\n+        }\n+        \n+        return {\n+            owner: repoInfoMatch[1],\n+            repo: repoInfoMatch[2]\n+        };\n+    }\n+\n+    /**\n+     * Handle PR creation or update\n+     * @param {string} owner - Repository owner\n+     * @param {string} repo - Repository name\n+     * @param {string} branchName - Branch name\n+     * @param {Object} prContent - PR content (title, body)\n+     * @returns {Promise<Object>} PR operation result\n+     */\n+    async handlePullRequest(owner, repo, branchName, prContent) {\n+        console.log(chalk.blue('   - Checking for existing pull request on GitHub...'));\n+\n+        try {\n+            // Check if PR already exists for this branch\n+            const existingPRs = await this.octokit.pulls.list({\n+                owner,\n+                repo,\n+                head: `${owner}:${branchName}`,\n+                state: 'open'\n+            });\n+\n+            if (existingPRs.data.length > 0) {\n+                return await this.updateExistingPR(existingPRs.data[0], prContent);\n+            } else {\n+                return await this.createNewPR(owner, repo, branchName, prContent);\n+            }\n+\n+        } catch (createError) {\n+            if (createError.status === 422 && createError.message.includes('pull request already exists')) {\n+                // Fallback: try to find and update the existing PR\n+                console.log(chalk.yellow('   - Handling edge case: PR exists but not found in initial search...'));\n+                const existingPRs = await this.octokit.pulls.list({\n+                    owner,\n+                    repo,\n+                    head: `${owner}:${branchName}`,\n+                    state: 'open'\n+                });\n+\n+                if (existingPRs.data.length > 0) {\n+                    return await this.updateExistingPR(existingPRs.data[0], prContent);\n+                }\n+            }\n+            throw createError;\n+        }\n+    }\n+\n+    /**\n+     * Update an existing pull request\n+     * @param {Object} existingPR - Existing PR data\n+     * @param {Object} prContent - New PR content\n+     * @returns {Promise<Object>} Updated PR data\n+     */\n+    async updateExistingPR(existingPR, prContent) {\n+        const titleChanged = existingPR.title !== prContent.title;\n+        const bodyChanged = existingPR.body !== prContent.body;\n+\n+        if (titleChanged || bodyChanged) {\n+            console.log(chalk.yellow(`   - Found existing PR #${existingPR.number}, updating with latest changes...`));\n+            if (titleChanged) console.log(chalk.yellow(`     • Title updated`));\n+            if (bodyChanged) console.log(chalk.yellow(`     • Description updated with latest code analysis`));\n+        } else {\n+            console.log(chalk.blue(`   - Found existing PR #${existingPR.number}, no changes needed to title/description`));\n+        }\n+\n+        const updatedPR = await this.octokit.pulls.update({\n+            owner: existingPR.base.repo.owner.login,\n+            repo: existingPR.base.repo.name,\n+            pull_number: existingPR.number,\n+            title: prContent.title,\n+            body: prContent.body,\n+        });\n+\n+        console.log(chalk.green(`   - Updated existing PR: ${updatedPR.data.html_url}`));\n+        updatedPR.data.isUpdate = true;\n+        return updatedPR.data;\n+    }\n+\n+    /**\n+     * Create a new pull request\n+     * @param {string} owner - Repository owner\n+     * @param {string} repo - Repository name\n+     * @param {string} branchName - Branch name\n+     * @param {Object} prContent - PR content\n+     * @returns {Promise<Object>} New PR data\n+     */\n+    async createNewPR(owner, repo, branchName, prContent) {\n+        console.log(chalk.blue('   - No existing PR found, creating new draft PR...'));\n+        \n+        const newPR = await this.octokit.pulls.create({\n+            owner,\n+            repo,\n+            title: prContent.title,\n+            body: prContent.body,\n+            head: branchName,\n+            base: 'main',\n+            draft: true,\n+        });\n+\n+        console.log(chalk.green(`   - Created new Draft PR: ${newPR.data.html_url}`));\n+        newPR.data.isUpdate = false;\n+        return newPR.data;\n+    }\n+\n+    /**\n+     * Generate PR content from context (fallback when AI is not available)\n+     * @param {Object} context - Current execution context\n+     * @returns {Object} Generated PR content\n+     */\n+    async generatePRContent(context) {\n+        const ticketId = context.linear?.ticketId || 'UNKNOWN';\n+        \n+        return {\n+            title: `feat: ${ticketId} - Update implementation`,\n+            body: `## Changes\\n\\nThis PR addresses ticket ${ticketId}.\\n\\n### Diff Summary\\n\\`\\`\\`\\n${context.git.diffStats}\\n\\`\\`\\`\\n\\n### Files Changed\\n${context.git.diff.split('\\n').filter(line => line.startsWith('diff --git')).map(line => line.replace('diff --git a/', '- ')).join('\\n')}`,\n+            summary: `Updated implementation for ${ticketId} with code changes across multiple files.`\n+        };\n+    }\n+\n+    /**\n+     * Check if GitHub workflow can execute\n+     * @param {Object} context - Current execution context\n+     * @returns {boolean} Whether workflow can execute\n+     */\n+    canExecute(context) {\n+        return !!(process.env.GITHUB_TOKEN || this.config.get('github.token')) &&\n+               context.git && \n+               context.git.remoteUrl &&\n+               context.git.remoteUrl.includes('github.com');\n+    }\n+}\n+\n+module.exports = GitHubWorkflow;\n\\ No newline at end of file\ndiff --git a/src/workflows/linear/LinearWorkflow.js b/src/workflows/linear/LinearWorkflow.js\nnew file mode 100644\nindex 0000000..d93a707\n--- /dev/null\n+++ b/src/workflows/linear/LinearWorkflow.js\n@@ -0,0 +1,211 @@\n+const BaseWorkflow = require('../BaseWorkflow');\n+const axios = require('axios');\n+const chalk = require('chalk');\n+\n+/**\n+ * Linear Workflow - Handles Linear ticket updates and management\n+ */\n+class LinearWorkflow extends BaseWorkflow {\n+    constructor(config) {\n+        super(config, 'linear');\n+        this.apiKey = process.env.LINEAR_API_KEY || config.get('linear.apiKey');\n+        this.apiUrl = 'https://api.linear.app/graphql';\n+    }\n+\n+    /**\n+     * Execute Linear workflow operations\n+     * @param {Object} context - Current execution context\n+     * @param {Object} options - Execution options\n+     * @returns {Promise<Object>} Linear workflow results\n+     */\n+    async execute(context, options = {}) {\n+        if (!this.isEnabled()) {\n+            this.log('Linear workflow is disabled, skipping...');\n+            return { skipped: true };\n+        }\n+\n+        if (!context.linear?.ticketId) {\n+            throw new Error('No Linear ticket ID found in context');\n+        }\n+\n+        try {\n+            // Get the issue details\n+            const issue = await this.getIssueByIdentifier(context.linear.ticketId);\n+            \n+            // Create comment content based on GitHub results\n+            const commentBody = this.generateCommentBody(context);\n+            \n+            // Add comment to the issue\n+            await this.addCommentToIssue(issue.id, commentBody);\n+\n+            this.log(`Linear ticket ${context.linear.ticketId} updated successfully`, 'info');\n+\n+            return {\n+                ticketId: context.linear.ticketId,\n+                issueId: issue.id,\n+                commentAdded: true,\n+                issue: issue\n+            };\n+\n+        } catch (error) {\n+            this.log(`Linear workflow failed: ${error.message}`, 'error');\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Get Linear issue by identifier (e.g., TIX-123)\n+     * @param {string} identifier - Linear issue identifier\n+     * @returns {Promise<Object>} Issue data\n+     */\n+    async getIssueByIdentifier(identifier) {\n+        console.log(chalk.blue(`   - Looking up Linear ticket ${identifier}...`));\n+\n+        const query = `\n+            query {\n+                issues(first: 50) {\n+                    nodes {\n+                        id\n+                        identifier\n+                        title\n+                        state {\n+                            name\n+                        }\n+                    }\n+                }\n+            }\n+        `;\n+\n+        const response = await this.makeGraphQLRequest(query);\n+        const issues = response.data.issues.nodes;\n+        const issue = issues.find(issue => issue.identifier === identifier);\n+        \n+        if (!issue) {\n+            throw new Error(`Could not find Linear issue with identifier ${identifier}`);\n+        }\n+\n+        return issue;\n+    }\n+\n+    /**\n+     * Add a comment to a Linear issue\n+     * @param {string} issueId - Linear issue ID\n+     * @param {string} body - Comment body\n+     * @returns {Promise<Object>} Comment creation result\n+     */\n+    async addCommentToIssue(issueId, body) {\n+        console.log(chalk.blue(`   - Adding comment to Linear ticket...`));\n+\n+        const mutation = `\n+            mutation($input: CommentCreateInput!) {\n+                commentCreate(input: $input) {\n+                    success\n+                    comment {\n+                        id\n+                    }\n+                }\n+            }\n+        `;\n+\n+        const variables = {\n+            input: {\n+                issueId: issueId,\n+                body: body\n+            }\n+        };\n+\n+        const response = await this.makeGraphQLRequest(mutation, variables);\n+        \n+        if (!response.data.commentCreate.success) {\n+            throw new Error('Failed to create comment in Linear');\n+        }\n+\n+        console.log(chalk.green('   - Linear ticket updated with Agent Action.'));\n+        return response.data.commentCreate.comment;\n+    }\n+\n+    /**\n+     * Generate comment body based on context\n+     * @param {Object} context - Current execution context\n+     * @returns {string} Generated comment body\n+     */\n+    generateCommentBody(context) {\n+        const githubResult = context.github;\n+        const aiResult = context.ai;\n+        \n+        if (!githubResult) {\n+            return `🚀 **CodeScribe Agent Executed**\\n\\nAgent completed successfully but no GitHub PR information available.`;\n+        }\n+\n+        const isUpdate = githubResult.isUpdate;\n+        const prNumber = githubResult.pr?.number;\n+        const prUrl = githubResult.pr?.html_url;\n+        const prTitle = githubResult.pr?.title;\n+\n+        let commentBody = `🚀 **Pull Request ${isUpdate ? 'Updated' : 'Created'}**\\n\\n`;\n+        \n+        if (aiResult?.summary) {\n+            commentBody += `${aiResult.summary}\\n\\n`;\n+        }\n+\n+        commentBody += `**PR Details:**\\n`;\n+        commentBody += `- Status: ${isUpdate ? 'Updated' : 'Draft'} PR #${prNumber}\\n`;\n+        \n+        if (prUrl) {\n+            commentBody += `- URL: ${prUrl}\\n`;\n+        }\n+        \n+        if (prTitle) {\n+            commentBody += `- Title: ${prTitle}\\n`;\n+        }\n+        \n+        if (isUpdate) {\n+            commentBody += `- ✨ Updated with latest code changes and AI analysis`;\n+        }\n+\n+        return commentBody;\n+    }\n+\n+    /**\n+     * Make a GraphQL request to Linear API\n+     * @param {string} query - GraphQL query or mutation\n+     * @param {Object} variables - GraphQL variables\n+     * @returns {Promise<Object>} API response\n+     */\n+    async makeGraphQLRequest(query, variables = {}) {\n+        try {\n+            const response = await axios.post(this.apiUrl, {\n+                query,\n+                variables\n+            }, {\n+                headers: {\n+                    'Authorization': this.apiKey,\n+                    'Content-Type': 'application/json',\n+                }\n+            });\n+\n+            if (response.data.errors) {\n+                throw new Error(`Linear API error: ${JSON.stringify(response.data.errors)}`);\n+            }\n+\n+            return response.data;\n+\n+        } catch (error) {\n+            if (error.response) {\n+                throw new Error(`Linear API request failed: ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n+            }\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Check if Linear workflow can execute\n+     * @param {Object} context - Current execution context\n+     * @returns {boolean} Whether workflow can execute\n+     */\n+    canExecute(context) {\n+        return !!(this.apiKey && context.linear?.ticketId);\n+    }\n+}\n+\n+module.exports = LinearWorkflow;\n\\ No newline at end of file\ndiff --git a/test-commit.js b/test-commit.js\nnew file mode 100644\nindex 0000000..9cc1d89\n--- /dev/null\n+++ b/test-commit.js\n@@ -0,0 +1,35 @@\n+#!/usr/bin/env node\n+\n+// Simple test script to verify the commit functionality works\n+const CodeScribeCore = require('./src/core/CodeScribeCore');\n+const chalk = require('chalk');\n+\n+async function testCommitWorkflow() {\n+    try {\n+        console.log(chalk.cyan.bold('🧪 Testing Commit Workflow...'));\n+        \n+        // Initialize the core engine\n+        const codeScribe = new CodeScribeCore();\n+        \n+        // Test commit workflow with dry-run options\n+        const results = await codeScribe.execute('commit', {\n+            message: 'test: Add commit workflow functionality',\n+            addAll: true,\n+            push: false // Don't push during test\n+        });\n+        \n+        console.log(chalk.green.bold('✅ Commit workflow test completed!'));\n+        console.log('Results:', JSON.stringify(results, null, 2));\n+        \n+    } catch (error) {\n+        console.error(chalk.red.bold('❌ Test failed:'), error.message);\n+        process.exit(1);\n+    }\n+}\n+\n+// Only run if called directly\n+if (require.main === module) {\n+    testCommitWorkflow();\n+}\n+\n+module.exports = testCommitWorkflow;\n\\ No newline at end of file",
      "diffStats": ".codescribe.example.json                           |   44 +\n .../specs/enhanced-codescribe-workflows/design.md  |  370 ++++\n .../enhanced-codescribe-workflows/requirements.md  |   61 +\n .kiro/specs/enhanced-codescribe-workflows/tasks.md |  250 +++\n README.md                                          |  140 +-\n codescribe.js                                      |  334 +---\n commit.js                                          |  105 ++\n docs/COMMIT_WORKFLOW.md                            |  302 ++++\n package-lock.json                                  |  612 ++++++-\n package.json                                       |   10 +-\n src/README.md                                      |  162 ++\n src/ai/AIAnalysisEngine.js                         |  165 ++\n src/config/ConfigurationManager.js                 |  254 +++\n src/context/ContextAnalyzer.js                     | 1893 ++++++++++++++++++++\n src/core/CodeScribeCore.js                         |   82 +\n src/workflows/BaseWorkflow.js                      |  107 ++\n src/workflows/WorkflowOrchestrator.js              |  129 ++\n src/workflows/commit/CommitWorkflow.js             |  541 ++++++\n src/workflows/github/GitHubWorkflow.js             |  202 +++\n src/workflows/linear/LinearWorkflow.js             |  211 +++\n test-commit.js                                     |   35 +\n 21 files changed, 5727 insertions(+), 282 deletions(-)",
      "commits": [
        {
          "hash": "7c4073f",
          "message": "test(.kiro): COD-20: Update .kiro/specs/enhanced-codescribe-workflows/tasks.md"
        },
        {
          "hash": "307de08",
          "message": "test(test)!: COD-20: Update 11 files (test, docs, code, config)"
        },
        {
          "hash": "68cc710",
          "message": "REFACTORED CODESCRIBE"
        },
        {
          "hash": "3a60db3",
          "message": "Add README.md"
        }
      ],
      "branchHistory": {
        "creationPoint": "1f0e813689bddcaa70e46b999ee08077e9923b73",
        "creationDate": "2025-07-19 16:37:29 -0400",
        "commitCount": 4,
        "mergeCount": 0,
        "ageInDays": 0,
        "commits": [
          {
            "hash": "7c4073f",
            "message": "test(.kiro): COD-20: Update .kiro/specs/enhanced-codescribe-workflows/tasks.md"
          },
          {
            "hash": "307de08",
            "message": "test(test)!: COD-20: Update 11 files (test, docs, code, config)"
          },
          {
            "hash": "68cc710",
            "message": "REFACTORED CODESCRIBE"
          },
          {
            "hash": "3a60db3",
            "message": "Add README.md"
          }
        ]
      },
      "mergeBaseAnalysis": {
        "mergeBase": "1f0e813689bddcaa70e46b999ee08077e9923b73",
        "mainHead": "217cb89561ac963171f6d3b20661fcdc02a66d91",
        "aheadCount": 4,
        "behindCount": 2,
        "isUpToDate": false,
        "needsRebase": true,
        "commitsToMerge": 4
      },
      "conflictDetection": {
        "hasActiveConflicts": false,
        "potentialConflicts": [],
        "conflictCount": 0,
        "riskLevel": "low"
      },
      "commitAnalysis": {
        "totalCommits": 4,
        "conventionalCommits": 1,
        "nonConventionalCommits": 3,
        "commitTypes": {
          "test": 1
        },
        "issues": [
          {
            "commit": "7c4073f",
            "type": "too_long",
            "message": "Commit message too long"
          },
          {
            "commit": "307de08",
            "type": "non_conventional",
            "message": "Non-conventional commit: \"test(test)!: COD-20: Update 11 files (test, docs, code, config)\""
          },
          {
            "commit": "68cc710",
            "type": "non_conventional",
            "message": "Non-conventional commit: \"REFACTORED CODESCRIBE\""
          },
          {
            "commit": "3a60db3",
            "type": "non_conventional",
            "message": "Non-conventional commit: \"Add README.md\""
          }
        ],
        "suggestions": [
          "Consider using conventional commit format (feat:, fix:, docs:, etc.)"
        ]
      },
      "branchValidation": {
        "branchName": "feat/COD-20-warp-test",
        "isValid": true,
        "issues": [],
        "suggestions": [],
        "conventions": {
          "hasTicketId": true,
          "hasType": true,
          "hasDescription": true,
          "followsKebabCase": true
        }
      }
    },
    "code": {
      "hasChanges": true,
      "changedFiles": [
        {
          "path": ".codescribe.example.json",
          "status": "added",
          "extension": "json",
          "isJavaScript": false,
          "isConfig": true,
          "isTest": false
        },
        {
          "path": ".kiro/specs/enhanced-codescribe-workflows/design.md",
          "status": "added",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": ".kiro/specs/enhanced-codescribe-workflows/requirements.md",
          "status": "added",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": ".kiro/specs/enhanced-codescribe-workflows/tasks.md",
          "status": "added",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "README.md",
          "status": "modified",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "codescribe.js",
          "status": "modified",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "commit.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "docs/COMMIT_WORKFLOW.md",
          "status": "added",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "package-lock.json",
          "status": "modified",
          "extension": "json",
          "isJavaScript": false,
          "isConfig": true,
          "isTest": false
        },
        {
          "path": "package.json",
          "status": "modified",
          "extension": "json",
          "isJavaScript": false,
          "isConfig": true,
          "isTest": false
        },
        {
          "path": "src/README.md",
          "status": "added",
          "extension": "md",
          "isJavaScript": false,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/ai/AIAnalysisEngine.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/config/ConfigurationManager.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/context/ContextAnalyzer.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/core/CodeScribeCore.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/workflows/BaseWorkflow.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/workflows/WorkflowOrchestrator.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/workflows/commit/CommitWorkflow.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/workflows/github/GitHubWorkflow.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "src/workflows/linear/LinearWorkflow.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        },
        {
          "path": "test-commit.js",
          "status": "added",
          "extension": "js",
          "isJavaScript": true,
          "isConfig": false,
          "isTest": false
        }
      ],
      "complexity": {
        "totalScore": 660,
        "averageScore": 55,
        "level": "very_high",
        "files": [
          {
            "file": "codescribe.js",
            "score": 64,
            "functions": 24,
            "classes": 0,
            "conditionals": 35,
            "loops": 1,
            "depth": 17,
            "lines": 494
          },
          {
            "file": "commit.js",
            "score": 20,
            "functions": 4,
            "classes": 0,
            "conditionals": 11,
            "loops": 1,
            "depth": 17,
            "lines": 105
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "score": 73,
            "functions": 15,
            "classes": 1,
            "conditionals": 46,
            "loops": 3,
            "depth": 20,
            "lines": 713
          },
          {
            "file": "src/config/ConfigurationManager.js",
            "score": 24,
            "functions": 0,
            "classes": 1,
            "conditionals": 9,
            "loops": 5,
            "depth": 15,
            "lines": 254
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "score": 186,
            "functions": 23,
            "classes": 1,
            "conditionals": 114,
            "loops": 21,
            "depth": 25,
            "lines": 1893
          },
          {
            "file": "src/core/CodeScribeCore.js",
            "score": 11,
            "functions": 2,
            "classes": 1,
            "conditionals": 4,
            "loops": 0,
            "depth": 17,
            "lines": 203
          },
          {
            "file": "src/workflows/BaseWorkflow.js",
            "score": 5,
            "functions": 0,
            "classes": 1,
            "conditionals": 1,
            "loops": 0,
            "depth": 11,
            "lines": 107
          },
          {
            "file": "src/workflows/WorkflowOrchestrator.js",
            "score": 10,
            "functions": 1,
            "classes": 1,
            "conditionals": 2,
            "loops": 1,
            "depth": 16,
            "lines": 183
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "score": 66,
            "functions": 10,
            "classes": 1,
            "conditionals": 47,
            "loops": 2,
            "depth": 19,
            "lines": 631
          },
          {
            "file": "src/workflows/github/GitHubWorkflow.js",
            "score": 16,
            "functions": 2,
            "classes": 1,
            "conditionals": 9,
            "loops": 0,
            "depth": 19,
            "lines": 211
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "score": 181,
            "functions": 17,
            "classes": 1,
            "conditionals": 126,
            "loops": 16,
            "depth": 20,
            "lines": 1731
          },
          {
            "file": "test-commit.js",
            "score": 4,
            "functions": 1,
            "classes": 0,
            "conditionals": 1,
            "loops": 0,
            "depth": 12,
            "lines": 35
          }
        ],
        "issues": [
          {
            "file": "codescribe.js",
            "type": "high_complexity",
            "score": 64,
            "message": "High complexity score: 64"
          },
          {
            "file": "commit.js",
            "type": "high_complexity",
            "score": 20,
            "message": "High complexity score: 20"
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "type": "high_complexity",
            "score": 73,
            "message": "High complexity score: 73"
          },
          {
            "file": "src/config/ConfigurationManager.js",
            "type": "high_complexity",
            "score": 24,
            "message": "High complexity score: 24"
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "type": "high_complexity",
            "score": 186,
            "message": "High complexity score: 186"
          },
          {
            "file": "src/core/CodeScribeCore.js",
            "type": "high_complexity",
            "score": 11,
            "message": "High complexity score: 11"
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "type": "high_complexity",
            "score": 66,
            "message": "High complexity score: 66"
          },
          {
            "file": "src/workflows/github/GitHubWorkflow.js",
            "type": "high_complexity",
            "score": 16,
            "message": "High complexity score: 16"
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "type": "high_complexity",
            "score": 181,
            "message": "High complexity score: 181"
          }
        ]
      },
      "security": {
        "vulnerabilities": [
          {
            "file": "src/context/ContextAnalyzer.js",
            "type": "code_injection",
            "severity": "high",
            "message": "Use of eval() can lead to code injection",
            "line": 398,
            "code": "eval("
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "type": "weak_random",
            "severity": "low",
            "message": "Math.random() is not cryptographically secure",
            "line": 434,
            "code": "Math.random()"
          }
        ],
        "warnings": [],
        "riskLevel": "high",
        "issues": []
      },
      "dependencies": {
        "added": [
          {
            "package": "@babel/parser",
            "version": "^7.28.0"
          },
          {
            "package": "@babel/traverse",
            "version": "^7.28.0"
          },
          {
            "package": "@babel/types",
            "version": "^7.28.1"
          },
          {
            "package": "acorn",
            "version": "^8.15.0"
          },
          {
            "package": "audit-ci",
            "version": "^7.1.0"
          },
          {
            "package": "semver",
            "version": "^7.7.2"
          }
        ],
        "updated": [
          {
            "package": "express",
            "oldVersion": "^5.1.0",
            "newVersion": "^5.1.0"
          }
        ],
        "removed": [],
        "devDependencies": [],
        "securityUpdates": [],
        "breakingChanges": []
      },
      "ast": {
        "totalFiles": 12,
        "parsedFiles": 12,
        "functions": [
          {
            "file": "codescribe.js",
            "name": "runDraftAgent",
            "type": "function",
            "async": true,
            "params": 2,
            "line": 12
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 0,
            "line": 32
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 37
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 0,
            "line": 77
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 79
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 0,
            "line": 88
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 90
          },
          {
            "file": "codescribe.js",
            "name": "showHelp",
            "type": "function",
            "async": false,
            "params": 0,
            "line": 100
          },
          {
            "file": "codescribe.js",
            "name": "runInteractiveMode",
            "type": "function",
            "async": true,
            "params": 0,
            "line": 167
          },
          {
            "file": "codescribe.js",
            "name": "analyzeContextForSuggestions",
            "type": "function",
            "async": false,
            "params": 1,
            "line": 237
          },
          {
            "file": "codescribe.js",
            "name": "getWorkflowOptions",
            "type": "function",
            "async": true,
            "params": 1,
            "line": 256
          },
          {
            "file": "codescribe.js",
            "name": "handleHistoryCommand",
            "type": "function",
            "async": true,
            "params": 3,
            "line": 300
          },
          {
            "file": "codescribe.js",
            "name": "showHistory",
            "type": "function",
            "async": true,
            "params": 2,
            "line": 340
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 2,
            "line": 352
          },
          {
            "file": "codescribe.js",
            "name": "showStats",
            "type": "function",
            "async": true,
            "params": 2,
            "line": 382
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 2,
            "line": 404
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 406
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 2,
            "line": 415
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 417
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 425
          },
          {
            "file": "codescribe.js",
            "name": "replayExecution",
            "type": "function",
            "async": true,
            "params": 3,
            "line": 436
          },
          {
            "file": "codescribe.js",
            "name": "showLogs",
            "type": "function",
            "async": true,
            "params": 2,
            "line": 455
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 468
          },
          {
            "file": "codescribe.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 491
          },
          {
            "file": "commit.js",
            "name": "runCommitWorkflow",
            "type": "function",
            "async": true,
            "params": 0,
            "line": 12
          },
          {
            "file": "commit.js",
            "name": "showHelp",
            "type": "function",
            "async": false,
            "params": 0,
            "line": 68
          },
          {
            "file": "commit.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 0,
            "line": 90
          },
          {
            "file": "commit.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 95
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 102
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 427
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 428
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 429
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 430
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 431
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 456
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 457
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 469
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 490
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 559
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 560
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 642
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 643
          },
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 701
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 109
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 166
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 218
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 497
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 498
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 626
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 734
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 2,
            "line": 844
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 916
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 961
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1162
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1163
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 2,
            "line": 1277
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1279
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1385
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1457
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1532
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1676
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1680
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1683
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1685
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1781
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1834
          },
          {
            "file": "src/core/CodeScribeCore.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 95
          },
          {
            "file": "src/core/CodeScribeCore.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 116
          },
          {
            "file": "src/workflows/WorkflowOrchestrator.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 128
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 169
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 170
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 171
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 230
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 230
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 240
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 262
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 263
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 305
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 306
          },
          {
            "file": "src/workflows/github/GitHubWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 184
          },
          {
            "file": "src/workflows/github/GitHubWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 184
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 142
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 222
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 452
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 637
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 666
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 989
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1140
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1150
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1166
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1173
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1241
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1263
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1439
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1467
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1468
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1477
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "arrow_function",
            "type": "arrow_function",
            "async": false,
            "params": 1,
            "line": 1675
          },
          {
            "file": "test-commit.js",
            "name": "testCommitWorkflow",
            "type": "function",
            "async": true,
            "params": 0,
            "line": 7
          }
        ],
        "classes": [
          {
            "file": "src/ai/AIAnalysisEngine.js",
            "name": "AIAnalysisEngine",
            "superClass": null,
            "line": 7
          },
          {
            "file": "src/config/ConfigurationManager.js",
            "name": "ConfigurationManager",
            "superClass": null,
            "line": 7
          },
          {
            "file": "src/context/ContextAnalyzer.js",
            "name": "ContextAnalyzer",
            "superClass": null,
            "line": 7
          },
          {
            "file": "src/core/CodeScribeCore.js",
            "name": "CodeScribeCore",
            "superClass": null,
            "line": 14
          },
          {
            "file": "src/workflows/BaseWorkflow.js",
            "name": "BaseWorkflow",
            "superClass": null,
            "line": 5
          },
          {
            "file": "src/workflows/WorkflowOrchestrator.js",
            "name": "WorkflowOrchestrator",
            "superClass": null,
            "line": 6
          },
          {
            "file": "src/workflows/commit/CommitWorkflow.js",
            "name": "CommitWorkflow",
            "superClass": "BaseWorkflow",
            "line": 8
          },
          {
            "file": "src/workflows/github/GitHubWorkflow.js",
            "name": "GitHubWorkflow",
            "superClass": "BaseWorkflow",
            "line": 8
          },
          {
            "file": "src/workflows/linear/LinearWorkflow.js",
            "name": "LinearWorkflow",
            "superClass": "BaseWorkflow",
            "line": 9
          }
        ],
        "imports": [],
        "exports": [],
        "issues": []
      },
      "metrics": {
        "totalLines": 6384,
        "addedLines": 5727,
        "removedLines": 282,
        "modifiedFiles": 21,
        "addedFiles": 0,
        "removedFiles": 0
      }
    },
    "project": {
      "structure": {
        "totalFiles": 53,
        "directories": [
          {
            "path": ".kiro",
            "depth": 0
          },
          {
            "path": ".kiro\\specs",
            "depth": 1
          },
          {
            "path": ".kiro\\specs\\enhanced-codescribe-workflows",
            "depth": 2
          },
          {
            "path": ".warp",
            "depth": 0
          },
          {
            "path": ".warp\\workflows",
            "depth": 1
          },
          {
            "path": "docs",
            "depth": 0
          },
          {
            "path": "src",
            "depth": 0
          },
          {
            "path": "src\\ai",
            "depth": 1
          },
          {
            "path": "src\\config",
            "depth": 1
          },
          {
            "path": "src\\context",
            "depth": 1
          },
          {
            "path": "src\\core",
            "depth": 1
          },
          {
            "path": "src\\utils",
            "depth": 1
          },
          {
            "path": "src\\workflows",
            "depth": 1
          },
          {
            "path": "src\\workflows\\commit",
            "depth": 2
          },
          {
            "path": "src\\workflows\\documentation",
            "depth": 2
          },
          {
            "path": "src\\workflows\\github",
            "depth": 2
          },
          {
            "path": "src\\workflows\\linear",
            "depth": 2
          }
        ],
        "fileTypes": {
          ".json": 4,
          "": 1,
          ".md": 10,
          ".yaml": 11,
          ".js": 27
        },
        "testFiles": 0,
        "documentationFiles": 10,
        "configFiles": 15,
        "ciFiles": 0,
        "sourceFiles": 27,
        "depth": 3
      },
      "configuration": {
        "packageJson": {
          "name": "codescribe",
          "version": "1.0.0",
          "description": "",
          "main": "index.js",
          "bin": {
            "codescribe": "./codescribe.js"
          },
          "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1"
          },
          "repository": {
            "type": "git",
            "url": "git+https://github.com/ManagementMO/CodeScribe.git"
          },
          "keywords": [],
          "author": "",
          "license": "ISC",
          "type": "commonjs",
          "bugs": {
            "url": "https://github.com/ManagementMO/CodeScribe/issues"
          },
          "homepage": "https://github.com/ManagementMO/CodeScribe#readme",
          "dependencies": {
            "@babel/parser": "^7.28.0",
            "@babel/traverse": "^7.28.0",
            "@babel/types": "^7.28.1",
            "@google/generative-ai": "^0.24.1",
            "@linear/sdk": "^52.0.0",
            "@octokit/rest": "^22.0.0",
            "acorn": "^8.15.0",
            "audit-ci": "^7.1.0",
            "axios": "^1.10.0",
            "chalk": "^4.1.2",
            "cli-progress": "^3.12.0",
            "commander": "^14.0.0",
            "dotenv": "^17.2.0",
            "express": "^5.1.0",
            "inquirer": "^8.2.6",
            "semver": "^7.7.2"
          }
        },
        "tsconfig": null,
        "eslint": null,
        "prettier": null,
        "jest": null,
        "webpack": null,
        "babel": null,
        "vite": null,
        "nextConfig": null,
        "tailwind": null,
        "docker": null
      },
      "projectType": {
        "primary": "node-cli",
        "secondary": [
          {
            "type": "express-api",
            "confidence": 0.26666666666666666,
            "matches": [
              "express"
            ]
          },
          {
            "type": "node-cli",
            "confidence": 0.4666666666666666,
            "matches": [
              "commander",
              "inquirer"
            ]
          }
        ],
        "confidence": 0.4666666666666666,
        "indicators": [
          "express",
          "commander",
          "inquirer"
        ]
      },
      "framework": {
        "frontend": [],
        "backend": [
          "Express"
        ],
        "testing": [],
        "build": [],
        "styling": [],
        "database": []
      },
      "testCoverage": {
        "hasTests": false,
        "testFiles": 0,
        "coverageReports": [],
        "testFrameworks": [
          "npm test"
        ],
        "coverageThreshold": null,
        "lastCoverageRun": null,
        "summary": null
      },
      "buildSystem": {
        "bundler": null,
        "taskRunner": null,
        "packageManager": "npm",
        "scripts": [
          "test"
        ],
        "buildOutput": null,
        "hasCI": false
      },
      "metadata": {
        "hasTests": false,
        "hasDocumentation": true,
        "hasCI": false,
        "packageManager": "npm",
        "nodeVersion": null
      }
    },
    "linear": {
      "ticketId": "COD-20",
      "issueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
      "commentAdded": true,
      "issue": {
        "id": "9c45c108-554c-4f53-82dc-2d64e45f8903",
        "identifier": "COD-20",
        "title": "test warp",
        "description": null,
        "priority": 0,
        "estimate": null,
        "state": {
          "id": "7cbfc433-f5a7-46a8-9688-f1a35b4b5b17",
          "name": "In Review",
          "type": "started"
        },
        "assignee": {
          "id": "671bd7cf-4218-4ef2-8f35-f3929781363f",
          "name": "Mohammed Elshrief",
          "email": "elshriefmoh@gmail.com"
        },
        "project": null,
        "team": {
          "id": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
          "name": "Codescribe"
        },
        "labels": {
          "nodes": []
        },
        "comments": {
          "nodes": [
            {
              "id": "2fbe82ba-5cc4-4a52-9a1c-ed1e8641648b",
              "body": "🚀 **CodeScribe Agent - Enhanced Workflow Execution**\n\n**Development Progress:**\n- Current Phase: IN REVIEW\n- Complexity Level: VERY_HIGH\n- Risk Level: HIGH\n- Estimated Time Spent: 4h 0m\n\n**Status Update:**\n- ✅ Status changed from \"Todo\" to \"In Review\"\n- Reason: Pull request created for review\n\n**Scope Analysis:**\n- ⚠️ Scope changes detected (Risk: LOW)\n- High number of files changed (21)\n- High number of JavaScript files changed (12)\n- New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver\n\n**Recommendations:**\n- Expand testing strategy due to wide-ranging changes\n- Expand testing strategy due to wide-ranging changes\n- Security review required for new dependencies\n\n**Blockers Detected:**\n- ⚠️ Code complexity score (50.5) exceeds recommended threshold\n- 🚨 High security risk detected in code changes\n\n**GitHub Integration:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with comprehensive workflow orchestration\n\n**AI Analysis:**\nThis PR significantly enhances CodeScribe, transforming it into a powerful workflow orchestration platform with AI-powered code analysis, automated GitHub and Linear integration, and a modular architecture for future extensibility.\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Code Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n**Sub-ticket Management:**\n- 💡 Suggested 10 sub-tickets (auto-creation disabled)\n  - Implement general functionality\n  - Refactor high-complexity file: codescribe.js\n  - Refactor high-complexity file: commit.js\n- 🚨 Detected 2 potential blockers\n  - 🚨 Security Review Required - COD-20\n  - 🧪 Test Coverage Required - COD-20\n- Reasons: High code complexity (50.5 > 15), High number of changed files (21 > 8), High security risk detected\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n\n\n---\n*Automated by CodeScribe Enhanced Linear Workflow*",
              "createdAt": "2025-07-20T00:45:57.160Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "24472387-03ef-4ccf-b86d-265a063c99a0",
              "body": "🚀 **CodeScribe Agent - Enhanced Workflow Execution**\n\n**Development Progress:**\n- Current Phase: IN REVIEW\n- Complexity Level: VERY_HIGH\n- Risk Level: HIGH\n- Estimated Time Spent: 4h 0m\n\n**Status Update:**\n- ❌ Failed to change status: Linear API request failed: 400 - {\"errors\":[{\"message\":\"Field \\\"issueUpdate\\\" argument \\\"id\\\" of type \\\"String!\\\" is required, but it was not provided.\",\"locations\":[{\"line\":3,\"column\":17}],\"extensions\":{\"http\":{\"status\":400,\"headers\":{}},\"code\":\"GRAPHQL_VALIDATION_FAILED\",\"type\":\"graphql error\",\"userError\":true}}]}\n\n**Scope Analysis:**\n- ⚠️ Scope changes detected (Risk: LOW)\n- High number of files changed (21)\n- High number of JavaScript files changed (12)\n- New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver\n\n**Recommendations:**\n- Expand testing strategy due to wide-ranging changes\n- Expand testing strategy due to wide-ranging changes\n- Security review required for new dependencies\n\n**Blockers Detected:**\n- ⚠️ Code complexity score (50.5) exceeds recommended threshold\n- 🚨 High security risk detected in code changes\n\n**GitHub Integration:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with workflow orchestration\n\n**AI Analysis:**\nThis PR significantly enhances CodeScribe, adding workflow orchestration, AI integration, and improved GitHub/Linear support, boosting developer productivity and code quality.\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Code Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n**Sub-ticket Management:**\n- 💡 Suggested 10 sub-tickets (auto-creation disabled)\n  - Implement general functionality\n  - Refactor high-complexity file: codescribe.js\n  - Refactor high-complexity file: commit.js\n- 🚨 Detected 2 potential blockers\n  - 🚨 Security Review Required - COD-20\n  - 🧪 Test Coverage Required - COD-20\n- Reasons: High code complexity (50.5 > 15), High number of changed files (21 > 8), High security risk detected\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n\n\n---\n*Automated by CodeScribe Enhanced Linear Workflow*",
              "createdAt": "2025-07-20T00:39:45.829Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "6efb5b24-75da-47b9-85fe-821699afc12a",
              "body": "🚀 **Pull Request Updated**\n\nCodeScribe has been refactored into a modular architecture with AI integration and enhanced workflow orchestration, improving efficiency and automation.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with modular workflows and AI integration\n- ✨ Updated with latest code changes and AI analysis\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n",
              "createdAt": "2025-07-20T00:06:59.826Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a1889d16-4192-4fc5-98d6-fdb2975f06bc",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T23:37:12.695Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "7d002ed8-35f4-49f8-9563-c29ec15fffaa",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T23:37:10.954Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "580ba9e5-ae4a-442c-9f4c-cda87541550b",
              "body": "@codescribe-agent hi",
              "createdAt": "2025-07-19T23:37:10.122Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8cecfa15-25e1-404d-b6e2-91b19351b70f",
              "body": "💾 **New Commit**\n\n**Commit:** `7c4073f`\n**Message:** test(.kiro): COD-20: Update .kiro/specs/enhanced-codescribe-workflows/tasks.md\n**Branch:** feat/COD-20-warp-test\n**GitHub:** [View Commit](https://github.com/ManagementMO/CodeScribe/commit/7c4073fffd95c1a3148f0dea6581ecbd4f91e385)\n\n*Committed by CodeScribe Agent*",
              "createdAt": "2025-07-19T22:08:07.661Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a04e884b-8a26-4b01-a048-52102e492599",
              "body": "💾 **New Commit**\n\n**Commit:** `307de08`\n**Message:** test(test)!: COD-20: Update 11 files (test, docs, code, config)\n**Branch:** feat/COD-20-warp-test\n**GitHub:** [View Commit](https://github.com/ManagementMO/CodeScribe/commit/307de08d36ed895fb8825255c0c3d47bf9cbac52)\n\n*Committed by CodeScribe Agent*",
              "createdAt": "2025-07-19T22:03:58.410Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8ff161b2-e928-4cd9-b21b-0e1d6bac20c7",
              "body": "🚀 **Pull Request Updated**\n\nThis PR significantly enhances CodeScribe, adding modular workflows, AI integration, and improved documentation, leading to a more efficient and robust development process.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with modular workflows, AI integration, and improved documentation\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:58:36.141Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "51ac0a8e-7d2e-47c7-a42f-926b66ac0dca",
              "body": "🚀 **Pull Request Updated**\n\nThis PR refactors CodeScribe into a modular workflow orchestration platform with enhanced GitHub, Linear, and AI integrations, improving automation and maintainability.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add comprehensive workflow orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:57:18.923Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e4a3254d-672d-450c-aff9-7b592b6e6ad7",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:50:23.608Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "2cd3c37e-e4ea-417a-b0c3-bdfdaa635009",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:50:22.558Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "fa69f361-767b-493f-838a-611dd3726d13",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:50:21.391Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "17c6c645-46e9-4947-9c56-c350a43110e9",
              "body": "### 🤖 CodeScribe Status Report\n\n**System Status:** ✅ All systems operational\n**Current Time:** 2025-07-19, 5:50:05 p.m.\n**GitHub API:** ✅ Connected\n**Linear API:** ✅ Connected  \n**AI Model:** ✅ Gemini 1.5 Flash ready\n**Webhook:** ✅ Receiving notifications\n\nReady to assist with code reviews and automation! 🚀",
              "createdAt": "2025-07-19T21:50:05.671Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e8d67c53-33bb-4a62-81dc-cbc3bafb352a",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:50:05.466Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "84554558-f5b2-4992-a69a-0642ffccd796",
              "body": "@codescribe-agent status",
              "createdAt": "2025-07-19T21:50:04.683Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8f2b9d86-e18e-49d6-a594-f8f4b46b9b0b",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T21:49:45.456Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "cca36c91-7d87-479f-abd7-8327c9a44ccd",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:49:45.307Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e67acff7-0739-4b2d-b25d-89a72403f5ed",
              "body": "@codescribe-agent do you have access to gemini api",
              "createdAt": "2025-07-19T21:49:43.891Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "524f0046-91d5-4938-8607-75806d29b037",
              "body": "### 📊 Repository Analysis\n\n**Repository:** ManagementMO/CodeScribe\n**Description:** No description\n**Language:** JavaScript\n**Stars:** ⭐ 1\n**Forks:** 🍴 0\n**Last Updated:** 2025-07-19\n\n**Recent Commits:**\n- Merge pull request #27 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- WARP WORKFLOW FILES (Mohammed Elshrief)\n- codescribe (Mohammed Elshrief)\n- Merge pull request #25 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- new current (Mohammed Elshrief)\n\n**Repository Stats:**\n- Open Issues: 9\n- Default Branch: main\n- Size: 5541 KB",
              "createdAt": "2025-07-19T21:48:04.135Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "08d5efca-f6a4-4e5b-a26d-8cbf912ea44a",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:48:02.253Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "eecf6d6c-c668-4170-8045-64c682ba3df3",
              "body": "@codescribe-agent repo",
              "createdAt": "2025-07-19T21:48:01.166Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "4dd395e5-cef2-42f6-b315-597e7bf1f5d1",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:47:43.586Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "c5e71cc5-7351-418f-86c3-9b8b0a013bc4",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:47:42.880Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "420b29de-46b7-437a-9585-72ed71659250",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:47:38.973Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "b1d24380-d5a4-45d3-bd12-4ff50a36da7f",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:47:16.862Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "1092470b-a16f-446f-8a03-a6b3174a6ef6",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:47:16.165Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "61ae93d9-10e6-4a00-8b24-da451d849be3",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:47:15.721Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "232681ef-07db-41b4-ac5f-3aac8321d7b6",
              "body": "### 📊 Repository Analysis\n\n**Repository:** ManagementMO/CodeScribe\n**Description:** No description\n**Language:** JavaScript\n**Stars:** ⭐ 1\n**Forks:** 🍴 0\n**Last Updated:** 2025-07-19\n\n**Recent Commits:**\n- Merge pull request #27 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- WARP WORKFLOW FILES (Mohammed Elshrief)\n- codescribe (Mohammed Elshrief)\n- Merge pull request #25 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- new current (Mohammed Elshrief)\n\n**Repository Stats:**\n- Open Issues: 9\n- Default Branch: main\n- Size: 5541 KB",
              "createdAt": "2025-07-19T21:46:40.787Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "4ec26325-241e-4e90-80e5-06a10e7342a3",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:46:40.126Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "72e5e164-acb6-4f82-beca-3579fae71bcb",
              "body": "@codescribe-agent repo",
              "createdAt": "2025-07-19T21:46:18.778Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "ce2a18ca-020a-4e90-92d7-27b8ce94b53f",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T21:46:08.782Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a81bf829-abc6-4fbf-b615-92496fa6e82c",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:46:08.583Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "edded3fe-171b-4fe0-a81d-5bdb7688f5ba",
              "body": "@codescribe-agent what are your commands",
              "createdAt": "2025-07-19T21:46:07.984Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "769caab6-4eca-45d9-a8d2-98e23fc43c38",
              "body": "🚀 **Pull Request Updated**\n\nThis PR significantly enhances CodeScribe, adding modularity, AI-powered suggestions, and automated workflows for GitHub and Linear, improving developer efficiency and code quality.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhanced CodeScribe Workflow Orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:44:44.093Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "3e58423e-59c7-48fa-b456-0c72c142f07a",
              "body": "🚀 **Pull Request Updated**\n\nThis PR refactors CodeScribe into a modular architecture with enhanced workflow orchestration, AI integration, and improved error handling, paving the way for future feature expansion.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with Modular Architecture and Workflow Orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:39:14.924Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "08ccc014-03f9-4063-8ba3-ccab35b1ba38",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new section describing Warp Test procedures.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:34:11.607Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "1a829c9f-e7a1-4de7-a377-fffa5c651ec5",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, likely reflecting a new testing procedure.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:33:39.860Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a8da1fb5-d4f3-4521-8603-c8bbaa250fce",
              "body": "🚀 **Pull Request Updated**\n\nThe README was updated to include a new 'Warp Test' section, likely reflecting a new testing phase in the CodeScribe agent.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:30:51.426Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "d143abeb-6ffc-46c5-a31a-818771e41465",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, improving clarity on the testing process.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:06:56.828Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "23fc2f3c-f90a-45e9-a527-e01b0421a0ac",
              "body": "🚀 **Pull Request Updated**\n\nAdded a 'Warp Test' section to the README, suggesting a new testing procedure for the CodeScribe agent.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:03:48.152Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "095cdc37-40c8-45fb-ab33-41887f49c1fb",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, improving documentation clarity.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T20:48:24.082Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            }
          ]
        },
        "createdAt": "2025-07-19T20:48:05.161Z",
        "updatedAt": "2025-07-20T00:45:58.627Z",
        "startedAt": "2025-07-20T00:45:56.908Z",
        "completedAt": null,
        "dueDate": null,
        "cycle": null
      },
      "progressAnalysis": {
        "currentPhase": "in_review",
        "suggestedActions": [
          {
            "type": "status_transition",
            "action": "Move to In Review",
            "reason": "Pull request created and ready for review"
          },
          {
            "type": "blocker_notification",
            "action": "Notify team of blocker",
            "reason": "High security risk detected in code changes"
          }
        ],
        "timeSpent": 240,
        "complexity": "very_high",
        "riskLevel": "high",
        "blockers": [
          {
            "type": "high_complexity",
            "message": "Code complexity score (55) exceeds recommended threshold",
            "severity": "medium"
          },
          {
            "type": "security_risk",
            "message": "High security risk detected in code changes",
            "severity": "high"
          }
        ],
        "milestones": [
          {
            "type": "pr_created",
            "timestamp": "2025-07-20T01:01:05.734Z"
          }
        ]
      },
      "statusTransition": {
        "skipped": true,
        "reason": "No status change needed (current: In Review, target: undefined)"
      },
      "timeTracking": {
        "skipped": true,
        "reason": "Time tracking disabled"
      },
      "scopeChange": {
        "hasChanges": true,
        "changes": [
          {
            "type": "file_count_high",
            "severity": "low",
            "message": "High number of files changed (21)",
            "impact": "May indicate scope creep or complex refactoring"
          },
          {
            "type": "js_file_count_high",
            "severity": "medium",
            "message": "High number of JavaScript files changed (12)",
            "impact": "Increased testing and review requirements"
          },
          {
            "type": "new_dependencies",
            "severity": "medium",
            "message": "New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver",
            "impact": "Security review and approval may be required"
          }
        ],
        "riskLevel": "low",
        "recommendations": [
          {
            "type": "testing_strategy",
            "message": "Expand testing strategy due to wide-ranging changes",
            "action": "Add integration tests and increase test coverage"
          },
          {
            "type": "testing_strategy",
            "message": "Expand testing strategy due to wide-ranging changes",
            "action": "Add integration tests and increase test coverage"
          },
          {
            "type": "security_review",
            "message": "Security review required for new dependencies",
            "action": "Run security audit and get approval from security team"
          }
        ]
      },
      "subTickets": {
        "success": true,
        "reasons": [
          "High code complexity (55 > 15)",
          "High number of changed files (21 > 8)",
          "High security risk detected"
        ],
        "analysis": {
          "shouldCreateSubTickets": true,
          "suggestedSubTickets": [
            {
              "title": "Implement general functionality",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nHandle changes to 18 files related to general\n\n**Scope:**\nFiles to modify:\n- .codescribe.example.json\n- .kiro/specs/enhanced-codescribe-workflows/design.md\n- .kiro/specs/enhanced-codescribe-workflows/requirements.md\n- .kiro/specs/enhanced-codescribe-workflows/tasks.md\n- codescribe.js\n- commit.js\n- docs/COMMIT_WORKFLOW.md\n- package-lock.json\n- package.json\n- src/ai/AIAnalysisEngine.js\n- src/context/ContextAnalyzer.js\n- src/core/CodeScribeCore.js\n- src/workflows/BaseWorkflow.js\n- src/workflows/WorkflowOrchestrator.js\n- src/workflows/commit/CommitWorkflow.js\n- src/workflows/github/GitHubWorkflow.js\n- src/workflows/linear/LinearWorkflow.js\n- test-commit.js\n\n**Complexity:** high\n**Priority:** low\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 4,
              "estimate": 8,
              "labels": [
                "auto-generated",
                "sub-task",
                "feature"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "functionality_group",
                "files": [
                  ".codescribe.example.json",
                  ".kiro/specs/enhanced-codescribe-workflows/design.md",
                  ".kiro/specs/enhanced-codescribe-workflows/requirements.md",
                  ".kiro/specs/enhanced-codescribe-workflows/tasks.md",
                  "codescribe.js",
                  "commit.js",
                  "docs/COMMIT_WORKFLOW.md",
                  "package-lock.json",
                  "package.json",
                  "src/ai/AIAnalysisEngine.js",
                  "src/context/ContextAnalyzer.js",
                  "src/core/CodeScribeCore.js",
                  "src/workflows/BaseWorkflow.js",
                  "src/workflows/WorkflowOrchestrator.js",
                  "src/workflows/commit/CommitWorkflow.js",
                  "src/workflows/github/GitHubWorkflow.js",
                  "src/workflows/linear/LinearWorkflow.js",
                  "test-commit.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: codescribe.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in codescribe.js (score: 64)\n\n**Scope:**\nFiles to modify:\n- codescribe.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "codescribe.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: commit.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in commit.js (score: 20)\n\n**Scope:**\nFiles to modify:\n- commit.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "commit.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/ai/AIAnalysisEngine.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/ai/AIAnalysisEngine.js (score: 73)\n\n**Scope:**\nFiles to modify:\n- src/ai/AIAnalysisEngine.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/ai/AIAnalysisEngine.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/config/ConfigurationManager.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/config/ConfigurationManager.js (score: 24)\n\n**Scope:**\nFiles to modify:\n- src/config/ConfigurationManager.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/config/ConfigurationManager.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/context/ContextAnalyzer.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/context/ContextAnalyzer.js (score: 186)\n\n**Scope:**\nFiles to modify:\n- src/context/ContextAnalyzer.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/context/ContextAnalyzer.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/core/CodeScribeCore.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/core/CodeScribeCore.js (score: 11)\n\n**Scope:**\nFiles to modify:\n- src/core/CodeScribeCore.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/core/CodeScribeCore.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/commit/CommitWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/commit/CommitWorkflow.js (score: 66)\n\n**Scope:**\nFiles to modify:\n- src/workflows/commit/CommitWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/commit/CommitWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/github/GitHubWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/github/GitHubWorkflow.js (score: 16)\n\n**Scope:**\nFiles to modify:\n- src/workflows/github/GitHubWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/github/GitHubWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/linear/LinearWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/linear/LinearWorkflow.js (score: 181)\n\n**Scope:**\nFiles to modify:\n- src/workflows/linear/LinearWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/linear/LinearWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Address security vulnerabilities",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nFix 1 high-severity security issues\n\n**Scope:**\nFiles to modify:\n- src/context/ContextAnalyzer.js\n\n**Complexity:** medium\n**Priority:** high\n\n**Security Considerations:**\nThis task addresses security vulnerabilities. Please ensure:\n- Code review by security team\n- Security testing before deployment\n- Documentation of security fixes\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 2,
              "estimate": 3,
              "labels": [
                "auto-generated",
                "sub-task",
                "security",
                "bug",
                "high-priority"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "security_fixes",
                "files": [
                  "src/context/ContextAnalyzer.js"
                ],
                "complexity": "medium",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            }
          ],
          "blockers": [
            {
              "type": "security_blocker",
              "title": "🚨 Security Review Required - COD-20",
              "description": "Critical security vulnerabilities must be addressed before proceeding with COD-20",
              "priority": "urgent",
              "blocking": true,
              "vulnerabilities": [
                {
                  "file": "src/context/ContextAnalyzer.js",
                  "type": "code_injection",
                  "severity": "high",
                  "message": "Use of eval() can lead to code injection",
                  "line": 398,
                  "code": "eval("
                }
              ]
            },
            {
              "type": "testing_blocker",
              "title": "🧪 Test Coverage Required - COD-20",
              "description": "Complex changes require comprehensive test coverage before deployment",
              "priority": "high",
              "blocking": true,
              "missingTests": [
                "codescribe.js",
                "commit.js",
                "src/ai/AIAnalysisEngine.js",
                "src/config/ConfigurationManager.js",
                "src/context/ContextAnalyzer.js",
                "src/core/CodeScribeCore.js",
                "src/workflows/BaseWorkflow.js",
                "src/workflows/WorkflowOrchestrator.js",
                "src/workflows/commit/CommitWorkflow.js",
                "src/workflows/github/GitHubWorkflow.js",
                "src/workflows/linear/LinearWorkflow.js",
                "test-commit.js"
              ]
            }
          ],
          "taskBreakdown": [
            {
              "type": "functionality_group",
              "title": "Implement general functionality",
              "description": "Handle changes to 18 files related to general",
              "files": [
                ".codescribe.example.json",
                ".kiro/specs/enhanced-codescribe-workflows/design.md",
                ".kiro/specs/enhanced-codescribe-workflows/requirements.md",
                ".kiro/specs/enhanced-codescribe-workflows/tasks.md",
                "codescribe.js",
                "commit.js",
                "docs/COMMIT_WORKFLOW.md",
                "package-lock.json",
                "package.json",
                "src/ai/AIAnalysisEngine.js",
                "src/context/ContextAnalyzer.js",
                "src/core/CodeScribeCore.js",
                "src/workflows/BaseWorkflow.js",
                "src/workflows/WorkflowOrchestrator.js",
                "src/workflows/commit/CommitWorkflow.js",
                "src/workflows/github/GitHubWorkflow.js",
                "src/workflows/linear/LinearWorkflow.js",
                "test-commit.js"
              ],
              "estimatedComplexity": "high",
              "priority": "low"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: codescribe.js",
              "description": "Address complexity issues in codescribe.js (score: 64)",
              "files": [
                "codescribe.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: commit.js",
              "description": "Address complexity issues in commit.js (score: 20)",
              "files": [
                "commit.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/ai/AIAnalysisEngine.js",
              "description": "Address complexity issues in src/ai/AIAnalysisEngine.js (score: 73)",
              "files": [
                "src/ai/AIAnalysisEngine.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/config/ConfigurationManager.js",
              "description": "Address complexity issues in src/config/ConfigurationManager.js (score: 24)",
              "files": [
                "src/config/ConfigurationManager.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/context/ContextAnalyzer.js",
              "description": "Address complexity issues in src/context/ContextAnalyzer.js (score: 186)",
              "files": [
                "src/context/ContextAnalyzer.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/core/CodeScribeCore.js",
              "description": "Address complexity issues in src/core/CodeScribeCore.js (score: 11)",
              "files": [
                "src/core/CodeScribeCore.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/commit/CommitWorkflow.js",
              "description": "Address complexity issues in src/workflows/commit/CommitWorkflow.js (score: 66)",
              "files": [
                "src/workflows/commit/CommitWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/github/GitHubWorkflow.js",
              "description": "Address complexity issues in src/workflows/github/GitHubWorkflow.js (score: 16)",
              "files": [
                "src/workflows/github/GitHubWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/linear/LinearWorkflow.js",
              "description": "Address complexity issues in src/workflows/linear/LinearWorkflow.js (score: 181)",
              "files": [
                "src/workflows/linear/LinearWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "security_fixes",
              "title": "Address security vulnerabilities",
              "description": "Fix 1 high-severity security issues",
              "files": [
                "src/context/ContextAnalyzer.js"
              ],
              "estimatedComplexity": "medium",
              "priority": "high"
            }
          ]
        },
        "createdSubTickets": [],
        "autoCreated": false
      }
    },
    "ai": {
      "title": "feat: Enhance CodeScribe with comprehensive workflow orchestration",
      "body": "# Enhanced CodeScribe Workflows\n\nThis PR introduces a major enhancement to CodeScribe, transforming it from a single-purpose PR creation tool into a comprehensive workflow orchestration platform for professional software engineers.  The system now includes modular workflow engines for:\n\n- **GitHub Automation**: Create and update PRs with AI-generated content, manage issues, and automate branch operations.\n- **Linear Integration**: Manage ticket workflows, track time, and provide comprehensive progress updates.\n- **Visual Documentation Generation**: Automatically create Mermaid flowcharts, sequence diagrams, and other documentation.\n- **Code Quality Management**: Analyze code for complexity, security vulnerabilities, and technical debt.\n\nThis enhancement modernizes CodeScribe into a versatile tool for professional software development, boosting team efficiency and productivity.  The system utilizes a plugin architecture for extensibility, allowing users to tailor workflows to their specific needs.\n\n## Key Features:\n\n- **Modular Architecture**: Refactored codebase into independent, testable modules.\n- **AI-Powered Commit Messages**: Auto-generates descriptive commit messages.\n- **Intelligent PR Descriptions**: AI-powered summaries and descriptions.\n- **Enhanced Linear Integration**: Detailed work logs and progress updates in Linear.\n- **Visual Documentation**: Generates flowcharts and diagrams from code.\n- **Code Quality Assessment**: Identifies technical debt and security risks.\n- **Plugin Architecture**: Easily extendable to support custom workflows.\n- **Comprehensive Reporting**: Detailed logs and analytics.\n\n## Technical Details:\n\n- The core engine manages workflow execution and coordinates between various components.\n- AI analysis is integrated using Google Gemini, with fallback options.\n- Context is gathered intelligently from the git repository, Linear tickets, and configuration files.\n- The system handles unpushed commits, potential merge conflicts, and common errors.\n- Workflows are designed for cross-platform compatibility (Windows, macOS, Linux).\n- The CLI allows users to execute individual workflows or the full workflow orchestration.\n- Comprehensive documentation and examples for easier adoption.",
      "summary": "CodeScribe has been significantly enhanced to provide comprehensive workflow orchestration for GitHub, Linear, and intelligent commit generation, improving developer efficiency and project management."
    },
    "documentation": {
      "diagrams": {
        "flowcharts": [
          {
            "type": "flowchart",
            "title": "Class Relationships",
            "mermaid": "flowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n"
          }
        ],
        "dependencyGraphs": [
          {
            "type": "dependency_graph",
            "title": "Dependency Changes Impact",
            "mermaid": "graph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n"
          }
        ],
        "sequenceDiagrams": [
          {
            "type": "sequence",
            "title": "API Interaction Flow",
            "mermaid": "sequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n"
          }
        ],
        "architectureDiagrams": [
          {
            "type": "architecture",
            "title": "Project Architecture",
            "mermaid": "graph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n"
          }
        ]
      },
      "formattedDiagrams": {
        "github": {
          "markdown": "## 📊 Code Analysis Diagrams\n\n### Class Relationships\n\n```mermaid\nflowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n\n```\n\n### Dependency Changes Impact\n\n```mermaid\ngraph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n\n```\n\n### API Interaction Flow\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n```\n\n### Project Architecture\n\n```mermaid\ngraph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n\n```\n\n",
          "html": "<div class=\"code-analysis-diagrams\">\n<h2>📊 Code Analysis Diagrams</h2>\n<div class=\"diagram-container\">\n<h3>Class Relationships</h3>\n<div class=\"mermaid\">\nflowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>Dependency Changes Impact</h3>\n<div class=\"mermaid\">\ngraph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>API Interaction Flow</h3>\n<div class=\"mermaid\">\nsequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>Project Architecture</h3>\n<div class=\"mermaid\">\ngraph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n\n</div>\n</div>\n</div>\n"
        },
        "linear": {
          "markdown": "## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n",
          "text": "📊 CODE ANALYSIS SUMMARY\n========================\n\nGenerated Diagrams:\n• Flowcharts: 1\n• Dependency Graphs: 1\n• Sequence Diagrams: 1\n• Architecture Diagrams: 1\n\n"
        }
      },
      "summary": {
        "totalDiagrams": 4,
        "diagramTypes": {
          "flowcharts": 1,
          "dependencyGraphs": 1,
          "sequenceDiagrams": 1,
          "architectureDiagrams": 1
        },
        "analysisContext": {
          "hasCodeChanges": true,
          "changedFiles": 21,
          "complexityLevel": "very_high",
          "securityRisk": "high"
        },
        "recommendations": [
          {
            "type": "complexity",
            "message": "High code complexity detected. Consider breaking down complex functions shown in flowcharts.",
            "priority": "high"
          },
          {
            "type": "dependencies",
            "message": "Dependency changes detected. Review impact analysis in dependency graphs.",
            "priority": "medium"
          },
          {
            "type": "architecture",
            "message": "Multiple files changed. Consider reviewing architecture diagrams for impact assessment.",
            "priority": "medium"
          },
          {
            "type": "api",
            "message": "API interactions detected. Review sequence diagrams for proper error handling.",
            "priority": "low"
          }
        ]
      }
    },
    "github": {
      "pr": {
        "url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28",
        "id": 2679328593,
        "node_id": "PR_kwDOPPEEec6fs09R",
        "html_url": "https://github.com/ManagementMO/CodeScribe/pull/28",
        "diff_url": "https://github.com/ManagementMO/CodeScribe/pull/28.diff",
        "patch_url": "https://github.com/ManagementMO/CodeScribe/pull/28.patch",
        "issue_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28",
        "number": 28,
        "state": "open",
        "locked": false,
        "title": "feat: Enhance CodeScribe with comprehensive workflow orchestration",
        "user": {
          "login": "ManagementMO",
          "id": 111318013,
          "node_id": "U_kgDOBqKT_Q",
          "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ManagementMO",
          "html_url": "https://github.com/ManagementMO",
          "followers_url": "https://api.github.com/users/ManagementMO/followers",
          "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
          "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
          "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
          "repos_url": "https://api.github.com/users/ManagementMO/repos",
          "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "# Enhanced CodeScribe Workflows\n\nThis PR introduces a major enhancement to CodeScribe, transforming it from a single-purpose PR creation tool into a comprehensive workflow orchestration platform for professional software engineers.  The system now includes modular workflow engines for:\n\n- **GitHub Automation**: Create and update PRs with AI-generated content, manage issues, and automate branch operations.\n- **Linear Integration**: Manage ticket workflows, track time, and provide comprehensive progress updates.\n- **Visual Documentation Generation**: Automatically create Mermaid flowcharts, sequence diagrams, and other documentation.\n- **Code Quality Management**: Analyze code for complexity, security vulnerabilities, and technical debt.\n\nThis enhancement modernizes CodeScribe into a versatile tool for professional software development, boosting team efficiency and productivity.  The system utilizes a plugin architecture for extensibility, allowing users to tailor workflows to their specific needs.\n\n## Key Features:\n\n- **Modular Architecture**: Refactored codebase into independent, testable modules.\n- **AI-Powered Commit Messages**: Auto-generates descriptive commit messages.\n- **Intelligent PR Descriptions**: AI-powered summaries and descriptions.\n- **Enhanced Linear Integration**: Detailed work logs and progress updates in Linear.\n- **Visual Documentation**: Generates flowcharts and diagrams from code.\n- **Code Quality Assessment**: Identifies technical debt and security risks.\n- **Plugin Architecture**: Easily extendable to support custom workflows.\n- **Comprehensive Reporting**: Detailed logs and analytics.\n\n## Technical Details:\n\n- The core engine manages workflow execution and coordinates between various components.\n- AI analysis is integrated using Google Gemini, with fallback options.\n- Context is gathered intelligently from the git repository, Linear tickets, and configuration files.\n- The system handles unpushed commits, potential merge conflicts, and common errors.\n- Workflows are designed for cross-platform compatibility (Windows, macOS, Linux).\n- The CLI allows users to execute individual workflows or the full workflow orchestration.\n- Comprehensive documentation and examples for easier adoption.",
        "created_at": "2025-07-19T20:47:35Z",
        "updated_at": "2025-07-20T01:01:04Z",
        "closed_at": null,
        "merged_at": null,
        "merge_commit_sha": "fb51123a86693703a9488aadfe4c4a4cf349e13f",
        "assignee": null,
        "assignees": [],
        "requested_reviewers": [],
        "requested_teams": [],
        "labels": [],
        "milestone": null,
        "draft": true,
        "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/commits",
        "review_comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/comments",
        "review_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/comments{/number}",
        "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28/comments",
        "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/7c4073fffd95c1a3148f0dea6581ecbd4f91e385",
        "head": {
          "label": "ManagementMO:feat/COD-20-warp-test",
          "ref": "feat/COD-20-warp-test",
          "sha": "7c4073fffd95c1a3148f0dea6581ecbd4f91e385",
          "user": {
            "login": "ManagementMO",
            "id": 111318013,
            "node_id": "U_kgDOBqKT_Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ManagementMO",
            "html_url": "https://github.com/ManagementMO",
            "followers_url": "https://api.github.com/users/ManagementMO/followers",
            "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
            "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
            "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
            "repos_url": "https://api.github.com/users/ManagementMO/repos",
            "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "repo": {
            "id": 1022428281,
            "node_id": "R_kgDOPPEEeQ",
            "name": "CodeScribe",
            "full_name": "ManagementMO/CodeScribe",
            "private": false,
            "owner": {
              "login": "ManagementMO",
              "id": 111318013,
              "node_id": "U_kgDOBqKT_Q",
              "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ManagementMO",
              "html_url": "https://github.com/ManagementMO",
              "followers_url": "https://api.github.com/users/ManagementMO/followers",
              "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
              "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
              "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
              "repos_url": "https://api.github.com/users/ManagementMO/repos",
              "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
              "type": "User",
              "user_view_type": "public",
              "site_admin": false
            },
            "html_url": "https://github.com/ManagementMO/CodeScribe",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/ManagementMO/CodeScribe",
            "forks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/forks",
            "keys_url": "https://api.github.com/repos/ManagementMO/CodeScribe/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/ManagementMO/CodeScribe/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/ManagementMO/CodeScribe/teams",
            "hooks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/hooks",
            "issue_events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/events{/number}",
            "events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/events",
            "assignees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/assignees{/user}",
            "branches_url": "https://api.github.com/repos/ManagementMO/CodeScribe/branches{/branch}",
            "tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/tags",
            "blobs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/ManagementMO/CodeScribe/languages",
            "stargazers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/stargazers",
            "contributors_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contributors",
            "subscribers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscribers",
            "subscription_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscription",
            "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contents/{+path}",
            "compare_url": "https://api.github.com/repos/ManagementMO/CodeScribe/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/ManagementMO/CodeScribe/merges",
            "archive_url": "https://api.github.com/repos/ManagementMO/CodeScribe/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/ManagementMO/CodeScribe/downloads",
            "issues_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues{/number}",
            "pulls_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/ManagementMO/CodeScribe/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/ManagementMO/CodeScribe/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/ManagementMO/CodeScribe/labels{/name}",
            "releases_url": "https://api.github.com/repos/ManagementMO/CodeScribe/releases{/id}",
            "deployments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/deployments",
            "created_at": "2025-07-19T04:03:17Z",
            "updated_at": "2025-07-19T20:38:50Z",
            "pushed_at": "2025-07-19T22:08:07Z",
            "git_url": "git://github.com/ManagementMO/CodeScribe.git",
            "ssh_url": "git@github.com:ManagementMO/CodeScribe.git",
            "clone_url": "https://github.com/ManagementMO/CodeScribe.git",
            "svn_url": "https://github.com/ManagementMO/CodeScribe",
            "homepage": null,
            "size": 5603,
            "stargazers_count": 1,
            "watchers_count": 1,
            "language": "JavaScript",
            "has_issues": true,
            "has_projects": true,
            "has_downloads": true,
            "has_wiki": true,
            "has_pages": false,
            "has_discussions": false,
            "forks_count": 0,
            "mirror_url": null,
            "archived": false,
            "disabled": false,
            "open_issues_count": 9,
            "license": null,
            "allow_forking": true,
            "is_template": false,
            "web_commit_signoff_required": false,
            "topics": [],
            "visibility": "public",
            "forks": 0,
            "open_issues": 9,
            "watchers": 1,
            "default_branch": "main"
          }
        },
        "base": {
          "label": "ManagementMO:main",
          "ref": "main",
          "sha": "217cb89561ac963171f6d3b20661fcdc02a66d91",
          "user": {
            "login": "ManagementMO",
            "id": 111318013,
            "node_id": "U_kgDOBqKT_Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ManagementMO",
            "html_url": "https://github.com/ManagementMO",
            "followers_url": "https://api.github.com/users/ManagementMO/followers",
            "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
            "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
            "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
            "repos_url": "https://api.github.com/users/ManagementMO/repos",
            "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "repo": {
            "id": 1022428281,
            "node_id": "R_kgDOPPEEeQ",
            "name": "CodeScribe",
            "full_name": "ManagementMO/CodeScribe",
            "private": false,
            "owner": {
              "login": "ManagementMO",
              "id": 111318013,
              "node_id": "U_kgDOBqKT_Q",
              "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ManagementMO",
              "html_url": "https://github.com/ManagementMO",
              "followers_url": "https://api.github.com/users/ManagementMO/followers",
              "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
              "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
              "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
              "repos_url": "https://api.github.com/users/ManagementMO/repos",
              "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
              "type": "User",
              "user_view_type": "public",
              "site_admin": false
            },
            "html_url": "https://github.com/ManagementMO/CodeScribe",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/ManagementMO/CodeScribe",
            "forks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/forks",
            "keys_url": "https://api.github.com/repos/ManagementMO/CodeScribe/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/ManagementMO/CodeScribe/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/ManagementMO/CodeScribe/teams",
            "hooks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/hooks",
            "issue_events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/events{/number}",
            "events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/events",
            "assignees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/assignees{/user}",
            "branches_url": "https://api.github.com/repos/ManagementMO/CodeScribe/branches{/branch}",
            "tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/tags",
            "blobs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/ManagementMO/CodeScribe/languages",
            "stargazers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/stargazers",
            "contributors_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contributors",
            "subscribers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscribers",
            "subscription_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscription",
            "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contents/{+path}",
            "compare_url": "https://api.github.com/repos/ManagementMO/CodeScribe/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/ManagementMO/CodeScribe/merges",
            "archive_url": "https://api.github.com/repos/ManagementMO/CodeScribe/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/ManagementMO/CodeScribe/downloads",
            "issues_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues{/number}",
            "pulls_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/ManagementMO/CodeScribe/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/ManagementMO/CodeScribe/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/ManagementMO/CodeScribe/labels{/name}",
            "releases_url": "https://api.github.com/repos/ManagementMO/CodeScribe/releases{/id}",
            "deployments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/deployments",
            "created_at": "2025-07-19T04:03:17Z",
            "updated_at": "2025-07-19T20:38:50Z",
            "pushed_at": "2025-07-19T22:08:07Z",
            "git_url": "git://github.com/ManagementMO/CodeScribe.git",
            "ssh_url": "git@github.com:ManagementMO/CodeScribe.git",
            "clone_url": "https://github.com/ManagementMO/CodeScribe.git",
            "svn_url": "https://github.com/ManagementMO/CodeScribe",
            "homepage": null,
            "size": 5603,
            "stargazers_count": 1,
            "watchers_count": 1,
            "language": "JavaScript",
            "has_issues": true,
            "has_projects": true,
            "has_downloads": true,
            "has_wiki": true,
            "has_pages": false,
            "has_discussions": false,
            "forks_count": 0,
            "mirror_url": null,
            "archived": false,
            "disabled": false,
            "open_issues_count": 9,
            "license": null,
            "allow_forking": true,
            "is_template": false,
            "web_commit_signoff_required": false,
            "topics": [],
            "visibility": "public",
            "forks": 0,
            "open_issues": 9,
            "watchers": 1,
            "default_branch": "main"
          }
        },
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28"
          },
          "html": {
            "href": "https://github.com/ManagementMO/CodeScribe/pull/28"
          },
          "issue": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28"
          },
          "comments": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28/comments"
          },
          "review_comments": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/comments"
          },
          "review_comment": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/comments{/number}"
          },
          "commits": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/commits"
          },
          "statuses": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/7c4073fffd95c1a3148f0dea6581ecbd4f91e385"
          }
        },
        "author_association": "OWNER",
        "auto_merge": null,
        "active_lock_reason": null,
        "merged": false,
        "mergeable": true,
        "rebaseable": true,
        "mergeable_state": "clean",
        "merged_by": null,
        "comments": 1,
        "review_comments": 0,
        "maintainer_can_modify": false,
        "commits": 4,
        "additions": 5727,
        "deletions": 282,
        "changed_files": 21,
        "isUpdate": true
      },
      "owner": "ManagementMO",
      "repo": "CodeScribe",
      "isUpdate": true
    }
  },
  "workflows": [
    "documentation",
    "github",
    "linear"
  ],
  "results": {
    "documentation": {
      "diagrams": {
        "flowcharts": [
          {
            "type": "flowchart",
            "title": "Class Relationships",
            "mermaid": "flowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n"
          }
        ],
        "dependencyGraphs": [
          {
            "type": "dependency_graph",
            "title": "Dependency Changes Impact",
            "mermaid": "graph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n"
          }
        ],
        "sequenceDiagrams": [
          {
            "type": "sequence",
            "title": "API Interaction Flow",
            "mermaid": "sequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n"
          }
        ],
        "architectureDiagrams": [
          {
            "type": "architecture",
            "title": "Project Architecture",
            "mermaid": "graph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n"
          }
        ]
      },
      "formattedDiagrams": {
        "github": {
          "markdown": "## 📊 Code Analysis Diagrams\n\n### Class Relationships\n\n```mermaid\nflowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n\n```\n\n### Dependency Changes Impact\n\n```mermaid\ngraph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n\n```\n\n### API Interaction Flow\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n```\n\n### Project Architecture\n\n```mermaid\ngraph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n\n```\n\n",
          "html": "<div class=\"code-analysis-diagrams\">\n<h2>📊 Code Analysis Diagrams</h2>\n<div class=\"diagram-container\">\n<h3>Class Relationships</h3>\n<div class=\"mermaid\">\nflowchart TD\n    C0[AIAnalysisEngine]\n    C1[ConfigurationManager]\n    C2[ContextAnalyzer]\n    C3[CodeScribeCore]\n    C4[BaseWorkflow]\n    C5[WorkflowOrchestrator]\n    C6[CommitWorkflow]\n    C4 --> C6\n    C7[GitHubWorkflow]\n    C4 --> C7\n    C8[LinearWorkflow]\n    C4 --> C8\n\n    classDef default fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>Dependency Changes Impact</h3>\n<div class=\"mermaid\">\ngraph TD\n    NEW0[@babel/parser@^7.28.0]\n    NEW0 --> APP[Application]\n    NEW1[@babel/traverse@^7.28.0]\n    NEW1 --> APP[Application]\n    NEW2[@babel/types@^7.28.1]\n    NEW2 --> APP[Application]\n    NEW3[acorn@^8.15.0]\n    NEW3 --> APP[Application]\n    NEW4[audit-ci@^7.1.0]\n    NEW4 --> APP[Application]\n    NEW5[semver@^7.7.2]\n    NEW5 --> APP[Application]\n    OLD0[express@^5.1.0]\n    UPD0[express@^5.1.0]\n    OLD0 -.-> UPD0\n    UPD0 --> APP[Application]\n\n    classDef new fill:#c8e6c9,stroke:#4caf50\n    classDef updated fill:#fff3e0,stroke:#ff9800\n    classDef app fill:#e1f5fe,stroke:#2196f3\n    class NEW0 new\n    class NEW1 new\n    class NEW2 new\n    class NEW3 new\n    class NEW4 new\n    class NEW5 new\n    class UPD0 updated\n    class APP app\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>API Interaction Flow</h3>\n<div class=\"mermaid\">\nsequenceDiagram\n    participant Client\n    participant App\n    participant API\n    participant DB\n\n    Client->>+App: runDraftAgent()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runInteractiveMode()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: getWorkflowOptions()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: handleHistoryCommand()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showHistory()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showStats()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: replayExecution()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: showLogs()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: runCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n    Client->>+App: testCommitWorkflow()\n    App->>+API: HTTP Request\n    API->>+DB: Query Data\n    DB-->>-API: Return Data\n    API-->>-App: HTTP Response\n    App-->>-Client: Return Result\n\n</div>\n</div>\n<div class=\"diagram-container\">\n<h3>Project Architecture</h3>\n<div class=\"mermaid\">\ngraph TB\n    subgraph \"Frontend Layer\"\n        UI[User Interface]\n        COMP[Components]\n    end\n\n    subgraph \"Business Logic Layer\"\n        SERV[Services]\n        WORK[Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        API[API Clients]\n        CACHE[Cache]\n    end\n\n    subgraph \"External Services\"\n        GH[GitHub API]\n        LIN[Linear API]\n        AI[AI Services]\n    end\n\n    UI --> COMP\n    COMP --> SERV\n    SERV --> WORK\n    WORK --> API\n    API --> GH\n    API --> LIN\n    API --> AI\n    SERV --> CACHE\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2\n    classDef business fill:#f3e5f5,stroke:#7b1fa2\n    classDef data fill:#e8f5e8,stroke:#388e3c\n    classDef external fill:#fff3e0,stroke:#f57c00\n    class UI,COMP frontend\n    class SERV,WORK business\n    class API,CACHE data\n    class GH,LIN,AI external\n\n</div>\n</div>\n</div>\n"
        },
        "linear": {
          "markdown": "## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n",
          "text": "📊 CODE ANALYSIS SUMMARY\n========================\n\nGenerated Diagrams:\n• Flowcharts: 1\n• Dependency Graphs: 1\n• Sequence Diagrams: 1\n• Architecture Diagrams: 1\n\n"
        }
      },
      "summary": {
        "totalDiagrams": 4,
        "diagramTypes": {
          "flowcharts": 1,
          "dependencyGraphs": 1,
          "sequenceDiagrams": 1,
          "architectureDiagrams": 1
        },
        "analysisContext": {
          "hasCodeChanges": true,
          "changedFiles": 21,
          "complexityLevel": "very_high",
          "securityRisk": "high"
        },
        "recommendations": [
          {
            "type": "complexity",
            "message": "High code complexity detected. Consider breaking down complex functions shown in flowcharts.",
            "priority": "high"
          },
          {
            "type": "dependencies",
            "message": "Dependency changes detected. Review impact analysis in dependency graphs.",
            "priority": "medium"
          },
          {
            "type": "architecture",
            "message": "Multiple files changed. Consider reviewing architecture diagrams for impact assessment.",
            "priority": "medium"
          },
          {
            "type": "api",
            "message": "API interactions detected. Review sequence diagrams for proper error handling.",
            "priority": "low"
          }
        ]
      }
    },
    "github": {
      "pr": {
        "url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28",
        "id": 2679328593,
        "node_id": "PR_kwDOPPEEec6fs09R",
        "html_url": "https://github.com/ManagementMO/CodeScribe/pull/28",
        "diff_url": "https://github.com/ManagementMO/CodeScribe/pull/28.diff",
        "patch_url": "https://github.com/ManagementMO/CodeScribe/pull/28.patch",
        "issue_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28",
        "number": 28,
        "state": "open",
        "locked": false,
        "title": "feat: Enhance CodeScribe with comprehensive workflow orchestration",
        "user": {
          "login": "ManagementMO",
          "id": 111318013,
          "node_id": "U_kgDOBqKT_Q",
          "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ManagementMO",
          "html_url": "https://github.com/ManagementMO",
          "followers_url": "https://api.github.com/users/ManagementMO/followers",
          "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
          "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
          "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
          "repos_url": "https://api.github.com/users/ManagementMO/repos",
          "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "# Enhanced CodeScribe Workflows\n\nThis PR introduces a major enhancement to CodeScribe, transforming it from a single-purpose PR creation tool into a comprehensive workflow orchestration platform for professional software engineers.  The system now includes modular workflow engines for:\n\n- **GitHub Automation**: Create and update PRs with AI-generated content, manage issues, and automate branch operations.\n- **Linear Integration**: Manage ticket workflows, track time, and provide comprehensive progress updates.\n- **Visual Documentation Generation**: Automatically create Mermaid flowcharts, sequence diagrams, and other documentation.\n- **Code Quality Management**: Analyze code for complexity, security vulnerabilities, and technical debt.\n\nThis enhancement modernizes CodeScribe into a versatile tool for professional software development, boosting team efficiency and productivity.  The system utilizes a plugin architecture for extensibility, allowing users to tailor workflows to their specific needs.\n\n## Key Features:\n\n- **Modular Architecture**: Refactored codebase into independent, testable modules.\n- **AI-Powered Commit Messages**: Auto-generates descriptive commit messages.\n- **Intelligent PR Descriptions**: AI-powered summaries and descriptions.\n- **Enhanced Linear Integration**: Detailed work logs and progress updates in Linear.\n- **Visual Documentation**: Generates flowcharts and diagrams from code.\n- **Code Quality Assessment**: Identifies technical debt and security risks.\n- **Plugin Architecture**: Easily extendable to support custom workflows.\n- **Comprehensive Reporting**: Detailed logs and analytics.\n\n## Technical Details:\n\n- The core engine manages workflow execution and coordinates between various components.\n- AI analysis is integrated using Google Gemini, with fallback options.\n- Context is gathered intelligently from the git repository, Linear tickets, and configuration files.\n- The system handles unpushed commits, potential merge conflicts, and common errors.\n- Workflows are designed for cross-platform compatibility (Windows, macOS, Linux).\n- The CLI allows users to execute individual workflows or the full workflow orchestration.\n- Comprehensive documentation and examples for easier adoption.",
        "created_at": "2025-07-19T20:47:35Z",
        "updated_at": "2025-07-20T01:01:04Z",
        "closed_at": null,
        "merged_at": null,
        "merge_commit_sha": "fb51123a86693703a9488aadfe4c4a4cf349e13f",
        "assignee": null,
        "assignees": [],
        "requested_reviewers": [],
        "requested_teams": [],
        "labels": [],
        "milestone": null,
        "draft": true,
        "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/commits",
        "review_comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/comments",
        "review_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/comments{/number}",
        "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28/comments",
        "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/7c4073fffd95c1a3148f0dea6581ecbd4f91e385",
        "head": {
          "label": "ManagementMO:feat/COD-20-warp-test",
          "ref": "feat/COD-20-warp-test",
          "sha": "7c4073fffd95c1a3148f0dea6581ecbd4f91e385",
          "user": {
            "login": "ManagementMO",
            "id": 111318013,
            "node_id": "U_kgDOBqKT_Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ManagementMO",
            "html_url": "https://github.com/ManagementMO",
            "followers_url": "https://api.github.com/users/ManagementMO/followers",
            "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
            "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
            "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
            "repos_url": "https://api.github.com/users/ManagementMO/repos",
            "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "repo": {
            "id": 1022428281,
            "node_id": "R_kgDOPPEEeQ",
            "name": "CodeScribe",
            "full_name": "ManagementMO/CodeScribe",
            "private": false,
            "owner": {
              "login": "ManagementMO",
              "id": 111318013,
              "node_id": "U_kgDOBqKT_Q",
              "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ManagementMO",
              "html_url": "https://github.com/ManagementMO",
              "followers_url": "https://api.github.com/users/ManagementMO/followers",
              "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
              "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
              "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
              "repos_url": "https://api.github.com/users/ManagementMO/repos",
              "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
              "type": "User",
              "user_view_type": "public",
              "site_admin": false
            },
            "html_url": "https://github.com/ManagementMO/CodeScribe",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/ManagementMO/CodeScribe",
            "forks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/forks",
            "keys_url": "https://api.github.com/repos/ManagementMO/CodeScribe/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/ManagementMO/CodeScribe/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/ManagementMO/CodeScribe/teams",
            "hooks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/hooks",
            "issue_events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/events{/number}",
            "events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/events",
            "assignees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/assignees{/user}",
            "branches_url": "https://api.github.com/repos/ManagementMO/CodeScribe/branches{/branch}",
            "tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/tags",
            "blobs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/ManagementMO/CodeScribe/languages",
            "stargazers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/stargazers",
            "contributors_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contributors",
            "subscribers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscribers",
            "subscription_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscription",
            "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contents/{+path}",
            "compare_url": "https://api.github.com/repos/ManagementMO/CodeScribe/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/ManagementMO/CodeScribe/merges",
            "archive_url": "https://api.github.com/repos/ManagementMO/CodeScribe/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/ManagementMO/CodeScribe/downloads",
            "issues_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues{/number}",
            "pulls_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/ManagementMO/CodeScribe/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/ManagementMO/CodeScribe/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/ManagementMO/CodeScribe/labels{/name}",
            "releases_url": "https://api.github.com/repos/ManagementMO/CodeScribe/releases{/id}",
            "deployments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/deployments",
            "created_at": "2025-07-19T04:03:17Z",
            "updated_at": "2025-07-19T20:38:50Z",
            "pushed_at": "2025-07-19T22:08:07Z",
            "git_url": "git://github.com/ManagementMO/CodeScribe.git",
            "ssh_url": "git@github.com:ManagementMO/CodeScribe.git",
            "clone_url": "https://github.com/ManagementMO/CodeScribe.git",
            "svn_url": "https://github.com/ManagementMO/CodeScribe",
            "homepage": null,
            "size": 5603,
            "stargazers_count": 1,
            "watchers_count": 1,
            "language": "JavaScript",
            "has_issues": true,
            "has_projects": true,
            "has_downloads": true,
            "has_wiki": true,
            "has_pages": false,
            "has_discussions": false,
            "forks_count": 0,
            "mirror_url": null,
            "archived": false,
            "disabled": false,
            "open_issues_count": 9,
            "license": null,
            "allow_forking": true,
            "is_template": false,
            "web_commit_signoff_required": false,
            "topics": [],
            "visibility": "public",
            "forks": 0,
            "open_issues": 9,
            "watchers": 1,
            "default_branch": "main"
          }
        },
        "base": {
          "label": "ManagementMO:main",
          "ref": "main",
          "sha": "217cb89561ac963171f6d3b20661fcdc02a66d91",
          "user": {
            "login": "ManagementMO",
            "id": 111318013,
            "node_id": "U_kgDOBqKT_Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ManagementMO",
            "html_url": "https://github.com/ManagementMO",
            "followers_url": "https://api.github.com/users/ManagementMO/followers",
            "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
            "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
            "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
            "repos_url": "https://api.github.com/users/ManagementMO/repos",
            "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "repo": {
            "id": 1022428281,
            "node_id": "R_kgDOPPEEeQ",
            "name": "CodeScribe",
            "full_name": "ManagementMO/CodeScribe",
            "private": false,
            "owner": {
              "login": "ManagementMO",
              "id": 111318013,
              "node_id": "U_kgDOBqKT_Q",
              "avatar_url": "https://avatars.githubusercontent.com/u/111318013?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ManagementMO",
              "html_url": "https://github.com/ManagementMO",
              "followers_url": "https://api.github.com/users/ManagementMO/followers",
              "following_url": "https://api.github.com/users/ManagementMO/following{/other_user}",
              "gists_url": "https://api.github.com/users/ManagementMO/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/ManagementMO/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/ManagementMO/subscriptions",
              "organizations_url": "https://api.github.com/users/ManagementMO/orgs",
              "repos_url": "https://api.github.com/users/ManagementMO/repos",
              "events_url": "https://api.github.com/users/ManagementMO/events{/privacy}",
              "received_events_url": "https://api.github.com/users/ManagementMO/received_events",
              "type": "User",
              "user_view_type": "public",
              "site_admin": false
            },
            "html_url": "https://github.com/ManagementMO/CodeScribe",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/ManagementMO/CodeScribe",
            "forks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/forks",
            "keys_url": "https://api.github.com/repos/ManagementMO/CodeScribe/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/ManagementMO/CodeScribe/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/ManagementMO/CodeScribe/teams",
            "hooks_url": "https://api.github.com/repos/ManagementMO/CodeScribe/hooks",
            "issue_events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/events{/number}",
            "events_url": "https://api.github.com/repos/ManagementMO/CodeScribe/events",
            "assignees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/assignees{/user}",
            "branches_url": "https://api.github.com/repos/ManagementMO/CodeScribe/branches{/branch}",
            "tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/tags",
            "blobs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/ManagementMO/CodeScribe/languages",
            "stargazers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/stargazers",
            "contributors_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contributors",
            "subscribers_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscribers",
            "subscription_url": "https://api.github.com/repos/ManagementMO/CodeScribe/subscription",
            "commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/ManagementMO/CodeScribe/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/ManagementMO/CodeScribe/contents/{+path}",
            "compare_url": "https://api.github.com/repos/ManagementMO/CodeScribe/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/ManagementMO/CodeScribe/merges",
            "archive_url": "https://api.github.com/repos/ManagementMO/CodeScribe/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/ManagementMO/CodeScribe/downloads",
            "issues_url": "https://api.github.com/repos/ManagementMO/CodeScribe/issues{/number}",
            "pulls_url": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/ManagementMO/CodeScribe/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/ManagementMO/CodeScribe/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/ManagementMO/CodeScribe/labels{/name}",
            "releases_url": "https://api.github.com/repos/ManagementMO/CodeScribe/releases{/id}",
            "deployments_url": "https://api.github.com/repos/ManagementMO/CodeScribe/deployments",
            "created_at": "2025-07-19T04:03:17Z",
            "updated_at": "2025-07-19T20:38:50Z",
            "pushed_at": "2025-07-19T22:08:07Z",
            "git_url": "git://github.com/ManagementMO/CodeScribe.git",
            "ssh_url": "git@github.com:ManagementMO/CodeScribe.git",
            "clone_url": "https://github.com/ManagementMO/CodeScribe.git",
            "svn_url": "https://github.com/ManagementMO/CodeScribe",
            "homepage": null,
            "size": 5603,
            "stargazers_count": 1,
            "watchers_count": 1,
            "language": "JavaScript",
            "has_issues": true,
            "has_projects": true,
            "has_downloads": true,
            "has_wiki": true,
            "has_pages": false,
            "has_discussions": false,
            "forks_count": 0,
            "mirror_url": null,
            "archived": false,
            "disabled": false,
            "open_issues_count": 9,
            "license": null,
            "allow_forking": true,
            "is_template": false,
            "web_commit_signoff_required": false,
            "topics": [],
            "visibility": "public",
            "forks": 0,
            "open_issues": 9,
            "watchers": 1,
            "default_branch": "main"
          }
        },
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28"
          },
          "html": {
            "href": "https://github.com/ManagementMO/CodeScribe/pull/28"
          },
          "issue": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28"
          },
          "comments": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/issues/28/comments"
          },
          "review_comments": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/comments"
          },
          "review_comment": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/comments{/number}"
          },
          "commits": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/pulls/28/commits"
          },
          "statuses": {
            "href": "https://api.github.com/repos/ManagementMO/CodeScribe/statuses/7c4073fffd95c1a3148f0dea6581ecbd4f91e385"
          }
        },
        "author_association": "OWNER",
        "auto_merge": null,
        "active_lock_reason": null,
        "merged": false,
        "mergeable": true,
        "rebaseable": true,
        "mergeable_state": "clean",
        "merged_by": null,
        "comments": 1,
        "review_comments": 0,
        "maintainer_can_modify": false,
        "commits": 4,
        "additions": 5727,
        "deletions": 282,
        "changed_files": 21,
        "isUpdate": true
      },
      "owner": "ManagementMO",
      "repo": "CodeScribe",
      "isUpdate": true
    },
    "linear": {
      "ticketId": "COD-20",
      "issueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
      "commentAdded": true,
      "issue": {
        "id": "9c45c108-554c-4f53-82dc-2d64e45f8903",
        "identifier": "COD-20",
        "title": "test warp",
        "description": null,
        "priority": 0,
        "estimate": null,
        "state": {
          "id": "7cbfc433-f5a7-46a8-9688-f1a35b4b5b17",
          "name": "In Review",
          "type": "started"
        },
        "assignee": {
          "id": "671bd7cf-4218-4ef2-8f35-f3929781363f",
          "name": "Mohammed Elshrief",
          "email": "elshriefmoh@gmail.com"
        },
        "project": null,
        "team": {
          "id": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
          "name": "Codescribe"
        },
        "labels": {
          "nodes": []
        },
        "comments": {
          "nodes": [
            {
              "id": "2fbe82ba-5cc4-4a52-9a1c-ed1e8641648b",
              "body": "🚀 **CodeScribe Agent - Enhanced Workflow Execution**\n\n**Development Progress:**\n- Current Phase: IN REVIEW\n- Complexity Level: VERY_HIGH\n- Risk Level: HIGH\n- Estimated Time Spent: 4h 0m\n\n**Status Update:**\n- ✅ Status changed from \"Todo\" to \"In Review\"\n- Reason: Pull request created for review\n\n**Scope Analysis:**\n- ⚠️ Scope changes detected (Risk: LOW)\n- High number of files changed (21)\n- High number of JavaScript files changed (12)\n- New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver\n\n**Recommendations:**\n- Expand testing strategy due to wide-ranging changes\n- Expand testing strategy due to wide-ranging changes\n- Security review required for new dependencies\n\n**Blockers Detected:**\n- ⚠️ Code complexity score (50.5) exceeds recommended threshold\n- 🚨 High security risk detected in code changes\n\n**GitHub Integration:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with comprehensive workflow orchestration\n\n**AI Analysis:**\nThis PR significantly enhances CodeScribe, transforming it into a powerful workflow orchestration platform with AI-powered code analysis, automated GitHub and Linear integration, and a modular architecture for future extensibility.\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Code Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n**Sub-ticket Management:**\n- 💡 Suggested 10 sub-tickets (auto-creation disabled)\n  - Implement general functionality\n  - Refactor high-complexity file: codescribe.js\n  - Refactor high-complexity file: commit.js\n- 🚨 Detected 2 potential blockers\n  - 🚨 Security Review Required - COD-20\n  - 🧪 Test Coverage Required - COD-20\n- Reasons: High code complexity (50.5 > 15), High number of changed files (21 > 8), High security risk detected\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n\n\n---\n*Automated by CodeScribe Enhanced Linear Workflow*",
              "createdAt": "2025-07-20T00:45:57.160Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "24472387-03ef-4ccf-b86d-265a063c99a0",
              "body": "🚀 **CodeScribe Agent - Enhanced Workflow Execution**\n\n**Development Progress:**\n- Current Phase: IN REVIEW\n- Complexity Level: VERY_HIGH\n- Risk Level: HIGH\n- Estimated Time Spent: 4h 0m\n\n**Status Update:**\n- ❌ Failed to change status: Linear API request failed: 400 - {\"errors\":[{\"message\":\"Field \\\"issueUpdate\\\" argument \\\"id\\\" of type \\\"String!\\\" is required, but it was not provided.\",\"locations\":[{\"line\":3,\"column\":17}],\"extensions\":{\"http\":{\"status\":400,\"headers\":{}},\"code\":\"GRAPHQL_VALIDATION_FAILED\",\"type\":\"graphql error\",\"userError\":true}}]}\n\n**Scope Analysis:**\n- ⚠️ Scope changes detected (Risk: LOW)\n- High number of files changed (21)\n- High number of JavaScript files changed (12)\n- New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver\n\n**Recommendations:**\n- Expand testing strategy due to wide-ranging changes\n- Expand testing strategy due to wide-ranging changes\n- Security review required for new dependencies\n\n**Blockers Detected:**\n- ⚠️ Code complexity score (50.5) exceeds recommended threshold\n- 🚨 High security risk detected in code changes\n\n**GitHub Integration:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with workflow orchestration\n\n**AI Analysis:**\nThis PR significantly enhances CodeScribe, adding workflow orchestration, AI integration, and improved GitHub/Linear support, boosting developer productivity and code quality.\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Code Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n**Sub-ticket Management:**\n- 💡 Suggested 10 sub-tickets (auto-creation disabled)\n  - Implement general functionality\n  - Refactor high-complexity file: codescribe.js\n  - Refactor high-complexity file: commit.js\n- 🚨 Detected 2 potential blockers\n  - 🚨 Security Review Required - COD-20\n  - 🧪 Test Coverage Required - COD-20\n- Reasons: High code complexity (50.5 > 15), High number of changed files (21 > 8), High security risk detected\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n\n\n---\n*Automated by CodeScribe Enhanced Linear Workflow*",
              "createdAt": "2025-07-20T00:39:45.829Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "6efb5b24-75da-47b9-85fe-821699afc12a",
              "body": "🚀 **Pull Request Updated**\n\nCodeScribe has been refactored into a modular architecture with AI integration and enhanced workflow orchestration, improving efficiency and automation.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with modular workflows and AI integration\n- ✨ Updated with latest code changes and AI analysis\n\n**Code Analysis:**\n- Generated 4 visualization diagrams\n- Complexity Level: very_high\n- Security Risk: high\n\n**Recommendations:**\n- High code complexity detected. Consider breaking down complex functions shown in flowcharts.\n- Dependency changes detected. Review impact analysis in dependency graphs.\n- Multiple files changed. Consider reviewing architecture diagrams for impact assessment.\n- API interactions detected. Review sequence diagrams for proper error handling.\n\n\n## 📊 Code Analysis Summary\n\n### Class Relationships\n\n```\n• AIAnalysisEngine\n• ConfigurationManager\n• ContextAnalyzer\n• CodeScribeCore\n• BaseWorkflow\n• WorkflowOrchestrator\n• CommitWorkflow\nC4 → C6\n• GitHubWorkflow\nC4 → C7\n• LinearWorkflow\nC4 → C8\n\n```\n\n### Dependency Changes Impact\n\n```\n• @babel/parser@^7.28.0\nNEW0 → APPApplication\n• @babel/traverse@^7.28.0\nNEW1 → APPApplication\n• @babel/types@^7.28.1\nNEW2 → APPApplication\n• acorn@^8.15.0\nNEW3 → APPApplication\n• audit-ci@^7.1.0\nNEW4 → APPApplication\n• semver@^7.7.2\nNEW5 → APPApplication\n• express@^5.1.0\n• express@^5.1.0\nUPD0 → APPApplication\n\n```\n\n### API Interaction Flow\n\n```\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\nDB → >-API: Return Data\nAPI → >-App: HTTP Response\nApp → >-Client: Return Result\n\n```\n\n### Project Architecture\n\n```\n• User Interface\n• Components\n• Services\n• Workflows\n• API Clients\n• Cache\n• GitHub API\n• Linear API\n• AI Services\nUI → COMP\nCOMP → SERV\nSERV → WORK\nWORK → API\nAPI → GH\nAPI → LIN\nAPI → AI\nSERV → CACHE\n\n```\n\n",
              "createdAt": "2025-07-20T00:06:59.826Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a1889d16-4192-4fc5-98d6-fdb2975f06bc",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T23:37:12.695Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "7d002ed8-35f4-49f8-9563-c29ec15fffaa",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T23:37:10.954Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "580ba9e5-ae4a-442c-9f4c-cda87541550b",
              "body": "@codescribe-agent hi",
              "createdAt": "2025-07-19T23:37:10.122Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8cecfa15-25e1-404d-b6e2-91b19351b70f",
              "body": "💾 **New Commit**\n\n**Commit:** `7c4073f`\n**Message:** test(.kiro): COD-20: Update .kiro/specs/enhanced-codescribe-workflows/tasks.md\n**Branch:** feat/COD-20-warp-test\n**GitHub:** [View Commit](https://github.com/ManagementMO/CodeScribe/commit/7c4073fffd95c1a3148f0dea6581ecbd4f91e385)\n\n*Committed by CodeScribe Agent*",
              "createdAt": "2025-07-19T22:08:07.661Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a04e884b-8a26-4b01-a048-52102e492599",
              "body": "💾 **New Commit**\n\n**Commit:** `307de08`\n**Message:** test(test)!: COD-20: Update 11 files (test, docs, code, config)\n**Branch:** feat/COD-20-warp-test\n**GitHub:** [View Commit](https://github.com/ManagementMO/CodeScribe/commit/307de08d36ed895fb8825255c0c3d47bf9cbac52)\n\n*Committed by CodeScribe Agent*",
              "createdAt": "2025-07-19T22:03:58.410Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8ff161b2-e928-4cd9-b21b-0e1d6bac20c7",
              "body": "🚀 **Pull Request Updated**\n\nThis PR significantly enhances CodeScribe, adding modular workflows, AI integration, and improved documentation, leading to a more efficient and robust development process.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with modular workflows, AI integration, and improved documentation\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:58:36.141Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "51ac0a8e-7d2e-47c7-a42f-926b66ac0dca",
              "body": "🚀 **Pull Request Updated**\n\nThis PR refactors CodeScribe into a modular workflow orchestration platform with enhanced GitHub, Linear, and AI integrations, improving automation and maintainability.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add comprehensive workflow orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:57:18.923Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e4a3254d-672d-450c-aff9-7b592b6e6ad7",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:50:23.608Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "2cd3c37e-e4ea-417a-b0c3-bdfdaa635009",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:50:22.558Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "fa69f361-767b-493f-838a-611dd3726d13",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:50:21.391Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "17c6c645-46e9-4947-9c56-c350a43110e9",
              "body": "### 🤖 CodeScribe Status Report\n\n**System Status:** ✅ All systems operational\n**Current Time:** 2025-07-19, 5:50:05 p.m.\n**GitHub API:** ✅ Connected\n**Linear API:** ✅ Connected  \n**AI Model:** ✅ Gemini 1.5 Flash ready\n**Webhook:** ✅ Receiving notifications\n\nReady to assist with code reviews and automation! 🚀",
              "createdAt": "2025-07-19T21:50:05.671Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e8d67c53-33bb-4a62-81dc-cbc3bafb352a",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:50:05.466Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "84554558-f5b2-4992-a69a-0642ffccd796",
              "body": "@codescribe-agent status",
              "createdAt": "2025-07-19T21:50:04.683Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "8f2b9d86-e18e-49d6-a594-f8f4b46b9b0b",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T21:49:45.456Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "cca36c91-7d87-479f-abd7-8327c9a44ccd",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:49:45.307Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "e67acff7-0739-4b2d-b25d-89a72403f5ed",
              "body": "@codescribe-agent do you have access to gemini api",
              "createdAt": "2025-07-19T21:49:43.891Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "524f0046-91d5-4938-8607-75806d29b037",
              "body": "### 📊 Repository Analysis\n\n**Repository:** ManagementMO/CodeScribe\n**Description:** No description\n**Language:** JavaScript\n**Stars:** ⭐ 1\n**Forks:** 🍴 0\n**Last Updated:** 2025-07-19\n\n**Recent Commits:**\n- Merge pull request #27 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- WARP WORKFLOW FILES (Mohammed Elshrief)\n- codescribe (Mohammed Elshrief)\n- Merge pull request #25 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- new current (Mohammed Elshrief)\n\n**Repository Stats:**\n- Open Issues: 9\n- Default Branch: main\n- Size: 5541 KB",
              "createdAt": "2025-07-19T21:48:04.135Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "08d5efca-f6a4-4e5b-a26d-8cbf912ea44a",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:48:02.253Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "eecf6d6c-c668-4170-8045-64c682ba3df3",
              "body": "@codescribe-agent repo",
              "createdAt": "2025-07-19T21:48:01.166Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "4dd395e5-cef2-42f6-b315-597e7bf1f5d1",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:47:43.586Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "c5e71cc5-7351-418f-86c3-9b8b0a013bc4",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:47:42.880Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "420b29de-46b7-437a-9585-72ed71659250",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:47:38.973Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "b1d24380-d5a4-45d3-bd12-4ff50a36da7f",
              "body": "### ❌ Commit Analysis Failed\n                    \nCould not fetch commit information: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent: [400 Bad Request] API Key not found. Please pass a valid API key. [{\"@type\":\"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\":\"API_KEY_INVALID\",\"domain\":\"googleapis.com\",\"metadata\":{\"service\":\"generativelanguage.googleapis.com\"}},{\"@type\":\"type.googleapis.com/google.rpc.LocalizedMessage\",\"locale\":\"en-US\",\"message\":\"API Key not found. Please pass a valid API key.\"}]",
              "createdAt": "2025-07-19T21:47:16.862Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "1092470b-a16f-446f-8a03-a6b3174a6ef6",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:47:16.165Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "61ae93d9-10e6-4a00-8b24-da451d849be3",
              "body": "@codescribe-agent commit",
              "createdAt": "2025-07-19T21:47:15.721Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "232681ef-07db-41b4-ac5f-3aac8321d7b6",
              "body": "### 📊 Repository Analysis\n\n**Repository:** ManagementMO/CodeScribe\n**Description:** No description\n**Language:** JavaScript\n**Stars:** ⭐ 1\n**Forks:** 🍴 0\n**Last Updated:** 2025-07-19\n\n**Recent Commits:**\n- Merge pull request #27 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- WARP WORKFLOW FILES (Mohammed Elshrief)\n- codescribe (Mohammed Elshrief)\n- Merge pull request #25 from ManagementMO/feat/COD-17-final-test (Mohammed Elshrief)\n- new current (Mohammed Elshrief)\n\n**Repository Stats:**\n- Open Issues: 9\n- Default Branch: main\n- Size: 5541 KB",
              "createdAt": "2025-07-19T21:46:40.787Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "4ec26325-241e-4e90-80e5-06a10e7342a3",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:46:40.126Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "72e5e164-acb6-4f82-beca-3579fae71bcb",
              "body": "@codescribe-agent repo",
              "createdAt": "2025-07-19T21:46:18.778Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "ce2a18ca-020a-4e90-92d7-27b8ce94b53f",
              "body": "### 🤖 CodeScribe Agent Help\n\nI can help you with several commands:\n\n**📊 Repository Analysis:**\n- `@codescribe-agent repo` - Get repository stats and recent commits\n\n**📝 Commit Analysis:**  \n- `@codescribe-agent commit` - Analyze the latest commit with AI\n\n**🔍 Code Review:**\n- `@codescribe-agent [GitHub PR URL]` - Review a pull request\n\n**⚡ Health Check:**\n- `@codescribe-agent status` - Check system status\n\n**Examples:**\n- `@codescribe-agent repo`\n- `@codescribe-agent commit`  \n- `@codescribe-agent status`\n- `@codescribe-agent https://github.com/owner/repo/pull/123`\n\nTry any of these commands to test my capabilities! 🚀",
              "createdAt": "2025-07-19T21:46:08.782Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a81bf829-abc6-4fbf-b615-92496fa6e82c",
              "body": "🤖 Roger that! I'm starting the code review now...",
              "createdAt": "2025-07-19T21:46:08.583Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "edded3fe-171b-4fe0-a81d-5bdb7688f5ba",
              "body": "@codescribe-agent what are your commands",
              "createdAt": "2025-07-19T21:46:07.984Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "769caab6-4eca-45d9-a8d2-98e23fc43c38",
              "body": "🚀 **Pull Request Updated**\n\nThis PR significantly enhances CodeScribe, adding modularity, AI-powered suggestions, and automated workflows for GitHub and Linear, improving developer efficiency and code quality.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhanced CodeScribe Workflow Orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:44:44.093Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "3e58423e-59c7-48fa-b456-0c72c142f07a",
              "body": "🚀 **Pull Request Updated**\n\nThis PR refactors CodeScribe into a modular architecture with enhanced workflow orchestration, AI integration, and improved error handling, paving the way for future feature expansion.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Enhance CodeScribe with Modular Architecture and Workflow Orchestration\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:39:14.924Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "08ccc014-03f9-4063-8ba3-ccab35b1ba38",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new section describing Warp Test procedures.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:34:11.607Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "1a829c9f-e7a1-4de7-a377-fffa5c651ec5",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, likely reflecting a new testing procedure.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:33:39.860Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "a8da1fb5-d4f3-4521-8603-c8bbaa250fce",
              "body": "🚀 **Pull Request Updated**\n\nThe README was updated to include a new 'Warp Test' section, likely reflecting a new testing phase in the CodeScribe agent.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:30:51.426Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "d143abeb-6ffc-46c5-a31a-818771e41465",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, improving clarity on the testing process.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:06:56.828Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "23fc2f3c-f90a-45e9-a527-e01b0421a0ac",
              "body": "🚀 **Pull Request Updated**\n\nAdded a 'Warp Test' section to the README, suggesting a new testing procedure for the CodeScribe agent.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T21:03:48.152Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            },
            {
              "id": "095cdc37-40c8-45fb-ab33-41887f49c1fb",
              "body": "🚀 **Pull Request Updated**\n\nThe README has been updated to include a new 'Warp Test' section, improving documentation clarity.\n\n**PR Details:**\n- Status: Updated PR #28\n- URL: https://github.com/ManagementMO/CodeScribe/pull/28\n- Title: feat: Add Warp Test to README\n- ✨ Updated with latest code changes and AI analysis",
              "createdAt": "2025-07-19T20:48:24.082Z",
              "user": {
                "name": "Mohammed Elshrief"
              }
            }
          ]
        },
        "createdAt": "2025-07-19T20:48:05.161Z",
        "updatedAt": "2025-07-20T00:45:58.627Z",
        "startedAt": "2025-07-20T00:45:56.908Z",
        "completedAt": null,
        "dueDate": null,
        "cycle": null
      },
      "progressAnalysis": {
        "currentPhase": "in_review",
        "suggestedActions": [
          {
            "type": "status_transition",
            "action": "Move to In Review",
            "reason": "Pull request created and ready for review"
          },
          {
            "type": "blocker_notification",
            "action": "Notify team of blocker",
            "reason": "High security risk detected in code changes"
          }
        ],
        "timeSpent": 240,
        "complexity": "very_high",
        "riskLevel": "high",
        "blockers": [
          {
            "type": "high_complexity",
            "message": "Code complexity score (55) exceeds recommended threshold",
            "severity": "medium"
          },
          {
            "type": "security_risk",
            "message": "High security risk detected in code changes",
            "severity": "high"
          }
        ],
        "milestones": [
          {
            "type": "pr_created",
            "timestamp": "2025-07-20T01:01:05.734Z"
          }
        ]
      },
      "statusTransition": {
        "skipped": true,
        "reason": "No status change needed (current: In Review, target: undefined)"
      },
      "timeTracking": {
        "skipped": true,
        "reason": "Time tracking disabled"
      },
      "scopeChange": {
        "hasChanges": true,
        "changes": [
          {
            "type": "file_count_high",
            "severity": "low",
            "message": "High number of files changed (21)",
            "impact": "May indicate scope creep or complex refactoring"
          },
          {
            "type": "js_file_count_high",
            "severity": "medium",
            "message": "High number of JavaScript files changed (12)",
            "impact": "Increased testing and review requirements"
          },
          {
            "type": "new_dependencies",
            "severity": "medium",
            "message": "New dependencies added: @babel/parser, @babel/traverse, @babel/types, acorn, audit-ci, semver",
            "impact": "Security review and approval may be required"
          }
        ],
        "riskLevel": "low",
        "recommendations": [
          {
            "type": "testing_strategy",
            "message": "Expand testing strategy due to wide-ranging changes",
            "action": "Add integration tests and increase test coverage"
          },
          {
            "type": "testing_strategy",
            "message": "Expand testing strategy due to wide-ranging changes",
            "action": "Add integration tests and increase test coverage"
          },
          {
            "type": "security_review",
            "message": "Security review required for new dependencies",
            "action": "Run security audit and get approval from security team"
          }
        ]
      },
      "subTickets": {
        "success": true,
        "reasons": [
          "High code complexity (55 > 15)",
          "High number of changed files (21 > 8)",
          "High security risk detected"
        ],
        "analysis": {
          "shouldCreateSubTickets": true,
          "suggestedSubTickets": [
            {
              "title": "Implement general functionality",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nHandle changes to 18 files related to general\n\n**Scope:**\nFiles to modify:\n- .codescribe.example.json\n- .kiro/specs/enhanced-codescribe-workflows/design.md\n- .kiro/specs/enhanced-codescribe-workflows/requirements.md\n- .kiro/specs/enhanced-codescribe-workflows/tasks.md\n- codescribe.js\n- commit.js\n- docs/COMMIT_WORKFLOW.md\n- package-lock.json\n- package.json\n- src/ai/AIAnalysisEngine.js\n- src/context/ContextAnalyzer.js\n- src/core/CodeScribeCore.js\n- src/workflows/BaseWorkflow.js\n- src/workflows/WorkflowOrchestrator.js\n- src/workflows/commit/CommitWorkflow.js\n- src/workflows/github/GitHubWorkflow.js\n- src/workflows/linear/LinearWorkflow.js\n- test-commit.js\n\n**Complexity:** high\n**Priority:** low\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 4,
              "estimate": 8,
              "labels": [
                "auto-generated",
                "sub-task",
                "feature"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "functionality_group",
                "files": [
                  ".codescribe.example.json",
                  ".kiro/specs/enhanced-codescribe-workflows/design.md",
                  ".kiro/specs/enhanced-codescribe-workflows/requirements.md",
                  ".kiro/specs/enhanced-codescribe-workflows/tasks.md",
                  "codescribe.js",
                  "commit.js",
                  "docs/COMMIT_WORKFLOW.md",
                  "package-lock.json",
                  "package.json",
                  "src/ai/AIAnalysisEngine.js",
                  "src/context/ContextAnalyzer.js",
                  "src/core/CodeScribeCore.js",
                  "src/workflows/BaseWorkflow.js",
                  "src/workflows/WorkflowOrchestrator.js",
                  "src/workflows/commit/CommitWorkflow.js",
                  "src/workflows/github/GitHubWorkflow.js",
                  "src/workflows/linear/LinearWorkflow.js",
                  "test-commit.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: codescribe.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in codescribe.js (score: 64)\n\n**Scope:**\nFiles to modify:\n- codescribe.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "codescribe.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: commit.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in commit.js (score: 20)\n\n**Scope:**\nFiles to modify:\n- commit.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "commit.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/ai/AIAnalysisEngine.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/ai/AIAnalysisEngine.js (score: 73)\n\n**Scope:**\nFiles to modify:\n- src/ai/AIAnalysisEngine.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/ai/AIAnalysisEngine.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/config/ConfigurationManager.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/config/ConfigurationManager.js (score: 24)\n\n**Scope:**\nFiles to modify:\n- src/config/ConfigurationManager.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/config/ConfigurationManager.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/context/ContextAnalyzer.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/context/ContextAnalyzer.js (score: 186)\n\n**Scope:**\nFiles to modify:\n- src/context/ContextAnalyzer.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/context/ContextAnalyzer.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/core/CodeScribeCore.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/core/CodeScribeCore.js (score: 11)\n\n**Scope:**\nFiles to modify:\n- src/core/CodeScribeCore.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/core/CodeScribeCore.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/commit/CommitWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/commit/CommitWorkflow.js (score: 66)\n\n**Scope:**\nFiles to modify:\n- src/workflows/commit/CommitWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/commit/CommitWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/github/GitHubWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/github/GitHubWorkflow.js (score: 16)\n\n**Scope:**\nFiles to modify:\n- src/workflows/github/GitHubWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/github/GitHubWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Refactor high-complexity file: src/workflows/linear/LinearWorkflow.js",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nAddress complexity issues in src/workflows/linear/LinearWorkflow.js (score: 181)\n\n**Scope:**\nFiles to modify:\n- src/workflows/linear/LinearWorkflow.js\n\n**Complexity:** high\n**Priority:** medium\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 3,
              "estimate": 9,
              "labels": [
                "auto-generated",
                "sub-task",
                "refactor",
                "technical-debt"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "complexity_refactor",
                "files": [
                  "src/workflows/linear/LinearWorkflow.js"
                ],
                "complexity": "high",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            },
            {
              "title": "Address security vulnerabilities",
              "description": "**Auto-generated sub-ticket from COD-20**\n\nFix 1 high-severity security issues\n\n**Scope:**\nFiles to modify:\n- src/context/ContextAnalyzer.js\n\n**Complexity:** medium\n**Priority:** high\n\n**Security Considerations:**\nThis task addresses security vulnerabilities. Please ensure:\n- Code review by security team\n- Security testing before deployment\n- Documentation of security fixes\n\n**Parent Ticket:** COD-20 - test warp",
              "priority": 2,
              "estimate": 3,
              "labels": [
                "auto-generated",
                "sub-task",
                "security",
                "bug",
                "high-priority"
              ],
              "parentIssueId": "9c45c108-554c-4f53-82dc-2d64e45f8903",
              "teamId": "e5487a27-0b77-40b3-8f9e-e7b2ccba6875",
              "assigneeId": "671bd7cf-4218-4ef2-8f35-f3929781363f",
              "metadata": {
                "type": "security_fixes",
                "files": [
                  "src/context/ContextAnalyzer.js"
                ],
                "complexity": "medium",
                "autoGenerated": true,
                "parentTicket": "COD-20"
              }
            }
          ],
          "blockers": [
            {
              "type": "security_blocker",
              "title": "🚨 Security Review Required - COD-20",
              "description": "Critical security vulnerabilities must be addressed before proceeding with COD-20",
              "priority": "urgent",
              "blocking": true,
              "vulnerabilities": [
                {
                  "file": "src/context/ContextAnalyzer.js",
                  "type": "code_injection",
                  "severity": "high",
                  "message": "Use of eval() can lead to code injection",
                  "line": 398,
                  "code": "eval("
                }
              ]
            },
            {
              "type": "testing_blocker",
              "title": "🧪 Test Coverage Required - COD-20",
              "description": "Complex changes require comprehensive test coverage before deployment",
              "priority": "high",
              "blocking": true,
              "missingTests": [
                "codescribe.js",
                "commit.js",
                "src/ai/AIAnalysisEngine.js",
                "src/config/ConfigurationManager.js",
                "src/context/ContextAnalyzer.js",
                "src/core/CodeScribeCore.js",
                "src/workflows/BaseWorkflow.js",
                "src/workflows/WorkflowOrchestrator.js",
                "src/workflows/commit/CommitWorkflow.js",
                "src/workflows/github/GitHubWorkflow.js",
                "src/workflows/linear/LinearWorkflow.js",
                "test-commit.js"
              ]
            }
          ],
          "taskBreakdown": [
            {
              "type": "functionality_group",
              "title": "Implement general functionality",
              "description": "Handle changes to 18 files related to general",
              "files": [
                ".codescribe.example.json",
                ".kiro/specs/enhanced-codescribe-workflows/design.md",
                ".kiro/specs/enhanced-codescribe-workflows/requirements.md",
                ".kiro/specs/enhanced-codescribe-workflows/tasks.md",
                "codescribe.js",
                "commit.js",
                "docs/COMMIT_WORKFLOW.md",
                "package-lock.json",
                "package.json",
                "src/ai/AIAnalysisEngine.js",
                "src/context/ContextAnalyzer.js",
                "src/core/CodeScribeCore.js",
                "src/workflows/BaseWorkflow.js",
                "src/workflows/WorkflowOrchestrator.js",
                "src/workflows/commit/CommitWorkflow.js",
                "src/workflows/github/GitHubWorkflow.js",
                "src/workflows/linear/LinearWorkflow.js",
                "test-commit.js"
              ],
              "estimatedComplexity": "high",
              "priority": "low"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: codescribe.js",
              "description": "Address complexity issues in codescribe.js (score: 64)",
              "files": [
                "codescribe.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: commit.js",
              "description": "Address complexity issues in commit.js (score: 20)",
              "files": [
                "commit.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/ai/AIAnalysisEngine.js",
              "description": "Address complexity issues in src/ai/AIAnalysisEngine.js (score: 73)",
              "files": [
                "src/ai/AIAnalysisEngine.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/config/ConfigurationManager.js",
              "description": "Address complexity issues in src/config/ConfigurationManager.js (score: 24)",
              "files": [
                "src/config/ConfigurationManager.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/context/ContextAnalyzer.js",
              "description": "Address complexity issues in src/context/ContextAnalyzer.js (score: 186)",
              "files": [
                "src/context/ContextAnalyzer.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/core/CodeScribeCore.js",
              "description": "Address complexity issues in src/core/CodeScribeCore.js (score: 11)",
              "files": [
                "src/core/CodeScribeCore.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/commit/CommitWorkflow.js",
              "description": "Address complexity issues in src/workflows/commit/CommitWorkflow.js (score: 66)",
              "files": [
                "src/workflows/commit/CommitWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/github/GitHubWorkflow.js",
              "description": "Address complexity issues in src/workflows/github/GitHubWorkflow.js (score: 16)",
              "files": [
                "src/workflows/github/GitHubWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "complexity_refactor",
              "title": "Refactor high-complexity file: src/workflows/linear/LinearWorkflow.js",
              "description": "Address complexity issues in src/workflows/linear/LinearWorkflow.js (score: 181)",
              "files": [
                "src/workflows/linear/LinearWorkflow.js"
              ],
              "estimatedComplexity": "high",
              "priority": "medium"
            },
            {
              "type": "security_fixes",
              "title": "Address security vulnerabilities",
              "description": "Fix 1 high-severity security issues",
              "files": [
                "src/context/ContextAnalyzer.js"
              ],
              "estimatedComplexity": "medium",
              "priority": "high"
            }
          ]
        },
        "createdSubTickets": [],
        "autoCreated": false
      }
    }
  },
  "duration": 19605,
  "success": true,
  "error": null
}